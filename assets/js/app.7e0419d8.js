(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,s,i=e[0],l=e[1],c=e[2],u=0,d=[];u<i.length;u++)s=i[u],Object.prototype.hasOwnProperty.call(a,s)&&a[s]&&d.push(a[s][0]),a[s]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(p&&p(e);d.length;)d.shift()();return o.push.apply(o,c||[]),t()}function t(){for(var n,e=0;e<o.length;e++){for(var t=o[e],r=!0,i=1;i<t.length;i++){var l=t[i];0!==a[l]&&(r=!1)}r&&(o.splice(e--,1),n=s(s.s=t[0]))}return n}var r={},a={8:0},o=[];function s(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.e=function(n){var e=[],t=a[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=a[n]=[e,r]}));e.push(t[2]=r);var o,i=document.createElement("script");i.charset="utf-8",i.timeout=120,s.nc&&i.setAttribute("nonce",s.nc),i.src=function(n){return s.p+"assets/js/"+({9:"vendors~docsearch"}[n]||n)+"."+{1:"20f1157a",2:"1fa27b92",3:"13e73877",4:"3ecaa076",5:"2b317ff5",6:"edb0deac",7:"578b56b2",9:"50988454",10:"b4354443",11:"0953146d",12:"c3f5efb2",13:"c2299237",14:"9563df3d",15:"8e72b474",16:"a58f6e07",17:"412abfc8",18:"409b4f72",19:"06b3d5ca",20:"fa424adf",21:"bb8d2f26",22:"d21edb19",23:"40d2b9b7",24:"aa4e55d3",25:"3421efd8",26:"8a59874f",27:"53af19d5",28:"cb3d3abb",29:"7b763d15",30:"f0cfa47e",31:"cd53b233",32:"432e91d1",33:"d0e38d2c",34:"4ce7483c",35:"c3b9b9ea",36:"c8185b0a",37:"ccd2af94",38:"0d1221b3",39:"dbed1d82",40:"95b274ee",41:"ec4544a3",42:"59280c51",43:"8363c6f7",44:"d5152b99",45:"1c5b4498",46:"a246c6ed",47:"e0cb22a7",48:"77733203",49:"ce47f81e",50:"b436803d",51:"72faf8d9",52:"9fc633e8",53:"495cff40",54:"74c9c240",55:"376f0348",56:"befa1cc1",57:"8b4d7743",58:"e2d00ba2",59:"aa57a1ff",60:"cab1bd49",61:"60ce830e",62:"06b17a45",63:"7dcd803a",64:"bb9cc876",65:"8df64d66",66:"6981ef17",67:"113d038c",68:"ce4e4f3d",69:"a51040ca",70:"22745af7",71:"35ac7386",72:"b5b997c3",73:"57e6d566",74:"17b7224b",75:"26108e67",76:"90b2aad3",77:"6f7528cd",78:"fb15b723",79:"c9d436fd",80:"b5fd4b13",81:"68599181",82:"f1ff6594",83:"cd694d09",84:"3f63365f",85:"00825ca6",86:"5cc98cd7",87:"2717195b",88:"677e5bf0",89:"13c63b3b",90:"068dec0e",91:"b336bc1b",92:"b2dc3902",93:"71e0ee8e",94:"f8ee003e",95:"135d2ab4",96:"1fe7c3dc",97:"6a38e0f1",98:"e4bb9885",99:"e218353d",100:"3636d4e7",101:"b81acf21",102:"f5012e42",103:"e33da2b0",104:"63939462",105:"d854320f",106:"3d3a10fb",107:"262034b6",108:"a482cff4",109:"5548d5a4",110:"2bdd73bb",111:"f5f0d7ce",112:"1a9adbc1",113:"9de24406",114:"bd2e6c25",115:"6ea73201",116:"9056466c",117:"3d24476d",118:"2028bf6c",119:"c2e7078b",120:"922b8441",121:"11e8953a",122:"e32674cc",123:"0f2e7d7a",124:"fd3a7c6f",125:"e1e8741b",126:"11d210db",127:"f73fcdf7",128:"8a7de777",129:"5de6f337",130:"bfb0449e",131:"064e9f08",132:"8e731041",133:"30a9f37d",134:"50a8274c",135:"bc5cd73a",136:"6012f581",137:"14bfb354",138:"f54bb974",139:"21830049",140:"d6ea73d9",141:"e678aafe",142:"90b75530",143:"3edd2e75",144:"1f0af1bf",145:"025e6a13",146:"5ed9ea7c",147:"99e123bc",148:"d0bccac1",149:"b58fdfef",150:"9b0cb581",151:"5e88aef3"}[n]+".js"}(n);var l=new Error;o=function(e){i.onerror=i.onload=null,clearTimeout(c);var t=a[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+r+": "+o+")",l.name="ChunkLoadError",l.type=r,l.request=o,t[1](l)}a[n]=void 0}};var c=setTimeout((function(){o({type:"timeout",target:i})}),12e4);i.onerror=i.onload=o,document.head.appendChild(i)}return Promise.all(e)},s.m=n,s.c=r,s.d=function(n,e,t){s.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},s.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},s.t=function(n,e){if(1&e&&(n=s(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)s.d(t,r,function(e){return n[e]}.bind(null,r));return t},s.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return s.d(e,"a",e),e},s.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},s.p="/",s.oe=function(n){throw console.error(n),n};var i=window.webpackJsonp=window.webpackJsonp||[],l=i.push.bind(i);i.push=e,i=i.slice();for(var c=0;c<i.length;c++)e(i[c]);var p=l;o.push([106,0]),t()}([function(n,e,t){"use strict";var r=function(n){return n&&n.Math===Math&&n};n.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof global&&global)||r("object"==typeof this&&this)||function(){return this}()||Function("return this")()},function(n,e,t){"use strict";var r="object"==typeof document&&document.all;n.exports=void 0===r&&void 0!==r?function(n){return"function"==typeof n||n===r}:function(n){return"function"==typeof n}},function(n,e,t){"use strict";var r=t(27),a=Function.prototype,o=a.call,s=r&&a.bind.bind(o,o);n.exports=r?s:function(n){return function(){return o.apply(n,arguments)}}},function(n,e,t){"use strict";n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){"use strict";function r(n,e,t,r,a,o,s,i){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),r&&(c.functional=!0),o&&(c._scopeId="data-v-"+o),s?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),a&&a.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(s)},c._ssrRegister=l):a&&(l=i?function(){a.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:a),l)if(c.functional){c._injectStyles=l;var p=c.render;c.render=function(n,e){return l.call(e),p(n,e)}}else{var u=c.beforeCreate;c.beforeCreate=u?[].concat(u,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(3);n.exports=!r((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){"use strict";var r=t(1);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(69),a="object"==typeof self&&self&&self.Object===Object&&self,o=r||a||Function("return this")();n.exports=o},function(n,e,t){"use strict";var r=t(2),a=t(32),o=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return o(a(n),e)}},function(n,e,t){var r=t(165),a=t(168);n.exports=function(n,e){var t=a(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return o})),t.d(e,"j",(function(){return s})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return p})),t.d(e,"c",(function(){return u})),t.d(e,"f",(function(){return d})),t.d(e,"l",(function(){return m})),t.d(e,"m",(function(){return f})),t.d(e,"d",(function(){return g})),t.d(e,"k",(function(){return v})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return x}));t(25);const r=/#.*$/,a=/\.(md|html)$/,o=/\/$/,s=/^[a-z]+:/i;function i(n){return decodeURI(n).replace(r,"").replace(a,"")}function l(n){return s.test(n)}function c(n){return/^mailto:/.test(n)}function p(n){return/^tel:/.test(n)}function u(n){if(l(n))return n;if(!n)return"404";const e=n.match(r),t=e?e[0]:"",a=i(n);return o.test(a)?n:a+".html"+t}function d(n,e){const t=n.hash,a=function(n){const e=n&&n.match(r);if(e)return e[0]}(e);if(a&&t!==a)return!1;return i(n.path)===i(e)}function m(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){const r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;const a=e.split("/");t&&a[a.length-1]||a.pop();const o=n.replace(/^\//,"").split("/");for(let n=0;n<o.length;n++){const e=o[n];".."===e?a.pop():"."!==e&&a.push(e)}""!==a[0]&&a.unshift("");return a.join("/")}(e,t));const r=i(e);for(let e=0;e<n.length;e++)if(i(n[e].regularPath)===r)return Object.assign({},n[e],{type:"page",path:u(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function f(n,e,t,r){const{pages:a,themeConfig:o}=t,s=r&&o.locales&&o.locales[r]||o;if("auto"===(n.frontmatter.sidebar||s.sidebar||o.sidebar))return h(n);const i=s.sidebar||o.sidebar;if(i){const{base:t,config:r}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const r in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(r)))return{base:r,config:e[r]};var t;return{}}(e,i);return"auto"===r?h(n):r?r.map(n=>function n(e,t,r,a=1){if("string"==typeof e)return m(t,e,r);if(Array.isArray(e))return Object.assign(m(t,e[0],r),{title:e[1]});{a>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const o=e.children||[];return 0===o.length&&e.path?Object.assign(m(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:o.map(e=>n(e,t,r,a+1)),collapsable:!1!==e.collapsable}}}(n,a,t)):[]}return[]}function h(n){const e=g(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function g(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function v(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function x(n,e){return y(e)-y(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r=t(15),a=t(150),o=t(151),s=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":s&&s in Object(n)?a(n):o(n)}},function(n,e,t){"use strict";var r=t(5),a=t(16),o=t(35);n.exports=r?function(n,e,t){return a.f(n,e,o(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(8).Symbol;n.exports=r},function(n,e,t){"use strict";var r=t(5),a=t(64),o=t(103),s=t(49),i=t(55),l=TypeError,c=Object.defineProperty,p=Object.getOwnPropertyDescriptor;e.f=r?o?function(n,e,t){if(s(n),e=i(e),s(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=p(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return c(n,e,t)}:c:function(n,e,t){if(s(n),e=i(e),s(t),a)try{return c(n,e,t)}catch(n){}if("get"in t||"set"in t)throw new l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){"use strict";var r=t(2),a=r({}.toString),o=r("".slice);n.exports=function(n){return o(a(n),8,-1)}},function(n,e,t){var r=t(155),a=t(156),o=t(157),s=t(158),i=t(159);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=o,l.prototype.has=s,l.prototype.set=i,n.exports=l},function(n,e,t){var r=t(71);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(10)(Object,"create");n.exports=r},function(n,e,t){var r=t(177);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(46);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(n,e,t){return n<e?e:n>t?t:n}function o(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=a(n,r.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(r.barSelector),p=r.speed,u=r.easing;return l.offsetWidth,s((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),i(c,function(n,e,t){var a;return(a="translate3d"===r.positionUsing?{transform:"translate3d("+o(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+o(n)+"%,0)"}:{"margin-left":o(n)+"%"}).transition="all "+e+"ms "+t,a}(n,p,u)),1===n?(i(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){i(l,{transition:"all "+p+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),p)}),p)):setTimeout(e,p)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*a(Math.random()*e,.1,.95)),e=a(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var a,s=e.querySelector(r.barSelector),l=n?"-100":o(t.status||0),p=document.querySelector(r.parent);return i(s,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),r.showSpinner||(a=e.querySelector(r.spinnerSelector))&&d(a),p!=document.body&&c(p,"nprogress-custom-parent"),p.appendChild(e),e},t.remove=function(){p(document.documentElement,"nprogress-busy"),p(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var s=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),i=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,a=n.length,o=e.charAt(0).toUpperCase()+e.slice(1);a--;)if((r=n[a]+o)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,a,o=arguments;if(2==o.length)for(t in e)void 0!==(a=e[t])&&e.hasOwnProperty(t)&&r(n,t,a);else r(n,o[1],o[2])}}();function l(n,e){return("string"==typeof n?n:u(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=u(n),r=t+e;l(t,e)||(n.className=r.substring(1))}function p(n,e){var t,r=u(n);l(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function u(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=a)},function(n){n.exports=JSON.parse('{"name":"vuepress-plugin-comment","version":"0.7.3","description":"Comment plugin in vuepress, such as Gitalk, Valine...","main":"index.js","scripts":{"test":"echo \\"Error: no test specified\\" && exit 1"},"repository":{"type":"git","url":"git+ssh://git@github.com/dongyuanxin/vuepress-plugin-comment.git"},"keywords":["vuepress","comment","plugin","vue","gitalk","valine"],"author":"dongyuanxin","license":"MIT","bugs":{"url":"https://github.com/dongyuanxin/vuepress-plugin-comment/issues"},"homepage":"https://github.com/dongyuanxin/vuepress-plugin-comment#readme","dependencies":{"ejs":"^2.6.1","gitalk":"^1.5.0","gitalk-fix":"^1.5.2","i":"^0.3.6","npm":"^6.9.0","valine":"^1.3.9"}}')},function(n,e,t){"use strict";var r=t(26),a=t(32),o=t(33),s=t(144),i=t(146);r({target:"Array",proto:!0,arity:1,forced:t(3)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(n){return n instanceof TypeError}}()},{push:function(n){var e=a(this),t=o(e),r=arguments.length;i(t+r);for(var l=0;l<r;l++)e[t]=arguments[l],t++;return s(e,t),t}})},function(n,e,t){"use strict";var r=t(0),a=t(53).f,o=t(14),s=t(97),i=t(38),l=t(65),c=t(125);n.exports=function(n,e){var t,p,u,d,m,f=n.target,h=n.global,g=n.stat;if(t=h?r:g?r[f]||i(f,{}):r[f]&&r[f].prototype)for(p in e){if(d=e[p],u=n.dontCallGetSet?(m=a(t,p))&&m.value:t[p],!c(h?p:f+(g?".":"#")+p,n.forced)&&void 0!==u){if(typeof d==typeof u)continue;l(d,u)}(n.sham||u&&u.sham)&&o(d,"sham",!0),s(t,p,d,n)}}},function(n,e,t){"use strict";var r=t(3);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){"use strict";var r=t(50),a=t(36);n.exports=function(n){return r(a(n))}},function(n,e,t){"use strict";var r=t(0),a=t(1),o=function(n){return a(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?o(r[n]):r[n]&&r[n][e]}},function(n,e,t){"use strict";var r=t(1),a=t(112),o=TypeError;n.exports=function(n){if(r(n))return n;throw new o(a(n)+" is not a function")}},function(n,e,t){"use strict";var r=t(0),a=t(61),o=t(9),s=t(63),i=t(59),l=t(58),c=r.Symbol,p=a("wks"),u=l?c.for||c:c&&c.withoutSetter||s;n.exports=function(n){return o(p,n)||(p[n]=i&&o(c,n)?c[n]:u("Symbol."+n)),p[n]}},function(n,e,t){"use strict";var r=t(36),a=Object;n.exports=function(n){return a(r(n))}},function(n,e,t){"use strict";var r=t(123);n.exports=function(n){return r(n.length)}},function(n,e,t){"use strict";var r=t(27),a=Function.prototype.call;n.exports=r?a.bind(a):function(){return a.apply(a,arguments)}},function(n,e,t){"use strict";n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){"use strict";var r=t(54),a=TypeError;n.exports=function(n){if(r(n))throw new a("Can't call method on "+n);return n}},function(n,e,t){"use strict";var r=t(62),a=t(0),o=t(38),s=n.exports=a["__core-js_shared__"]||o("__core-js_shared__",{});(s.versions||(s.versions=[])).push({version:"3.37.1",mode:r?"pure":"global",copyright:"© 2014-2024 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.37.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){"use strict";var r=t(0),a=Object.defineProperty;n.exports=function(n,e){try{a(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(149),a=t(12),o=Object.prototype,s=o.hasOwnProperty,i=o.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(n){return a(n)&&s.call(n,"callee")&&!i.call(n,"callee")};n.exports=l},function(n,e,t){var r=t(10)(t(8),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(169),a=t(176),o=t(178),s=t(179),i=t(180);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=o,l.prototype.has=s,l.prototype.set=i,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(6),a=t(46),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,s=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!a(n))||(s.test(n)||!o.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(13),a=t(12);n.exports=function(n){return"symbol"==typeof n||a(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,o=/^0o[0-7]+$/i,s=parseInt,i="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=i||l||Function("return this")(),p=Object.prototype.toString,u=Math.max,d=Math.min,m=function(){return c.Date.now()};function f(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function h(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==p.call(n)}(n))return NaN;if(f(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=f(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var i=a.test(n);return i||o.test(n)?s(n.slice(2),i?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,a,o,s,i,l,c=0,p=!1,g=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,o=a;return r=a=void 0,c=e,s=n.apply(o,t)}function y(n){return c=n,i=setTimeout(k,e),p?b(n):s}function x(n){var t=n-l;return void 0===l||t>=e||t<0||g&&n-c>=o}function k(){var n=m();if(x(n))return E(n);i=setTimeout(k,function(n){var t=e-(n-l);return g?d(t,o-(n-c)):t}(n))}function E(n){return i=void 0,v&&r?b(n):(r=a=void 0,s)}function w(){var n=m(),t=x(n);if(r=arguments,a=this,l=n,t){if(void 0===i)return y(l);if(g)return i=setTimeout(k,e),b(l)}return void 0===i&&(i=setTimeout(k,e)),s}return e=h(e)||0,f(t)&&(p=!!t.leading,o=(g="maxWait"in t)?u(h(t.maxWait)||0,e):o,v="trailing"in t?!!t.trailing:v),w.cancel=function(){void 0!==i&&clearTimeout(i),c=0,r=l=a=i=void 0},w.flush=function(){return void 0===i?s:E(m())},w}},function(n,e,t){"use strict";var r=t(7),a=String,o=TypeError;n.exports=function(n){if(r(n))return n;throw new o(a(n)+" is not an object")}},function(n,e,t){"use strict";var r=t(2),a=t(3),o=t(17),s=Object,i=r("".split);n.exports=a((function(){return!s("z").propertyIsEnumerable(0)}))?function(n){return"String"===o(n)?i(n,""):s(n)}:s},function(n,e,t){"use strict";n.exports={}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e,t){"use strict";var r=t(5),a=t(34),o=t(108),s=t(35),i=t(28),l=t(55),c=t(9),p=t(64),u=Object.getOwnPropertyDescriptor;e.f=r?u:function(n,e){if(n=i(n),e=l(e),p)try{return u(n,e)}catch(n){}if(c(n,e))return s(!a(o.f,n,e),n[e])}},function(n,e,t){"use strict";n.exports=function(n){return null==n}},function(n,e,t){"use strict";var r=t(109),a=t(56);n.exports=function(n){var e=r(n,"string");return a(e)?e:e+""}},function(n,e,t){"use strict";var r=t(29),a=t(1),o=t(57),s=t(58),i=Object;n.exports=s?function(n){return"symbol"==typeof n}:function(n){var e=r("Symbol");return a(e)&&o(e.prototype,i(n))}},function(n,e,t){"use strict";var r=t(2);n.exports=r({}.isPrototypeOf)},function(n,e,t){"use strict";var r=t(59);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){"use strict";var r=t(60),a=t(3),o=t(0).String;n.exports=!!Object.getOwnPropertySymbols&&!a((function(){var n=Symbol("symbol detection");return!o(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){"use strict";var r,a,o=t(0),s=t(110),i=o.process,l=o.Deno,c=i&&i.versions||l&&l.version,p=c&&c.v8;p&&(a=(r=p.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!a&&s&&(!(r=s.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=s.match(/Chrome\/(\d+)/))&&(a=+r[1]),n.exports=a},function(n,e,t){"use strict";var r=t(37);n.exports=function(n,e){return r[n]||(r[n]=e||{})}},function(n,e,t){"use strict";n.exports=!1},function(n,e,t){"use strict";var r=t(2),a=0,o=Math.random(),s=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+s(++a+o,36)}},function(n,e,t){"use strict";var r=t(5),a=t(3),o=t(102);n.exports=!r&&!a((function(){return 7!==Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){"use strict";var r=t(9),a=t(118),o=t(53),s=t(16);n.exports=function(n,e,t){for(var i=a(e),l=s.f,c=o.f,p=0;p<i.length;p++){var u=i[p];r(n,u)||t&&r(t,u)||l(n,u,c(e,u))}}},function(n,e,t){"use strict";var r=t(122);n.exports=function(n){var e=+n;return e!=e||0===e?0:r(e)}},function(n,e,t){"use strict";var r=t(132),a=t(7),o=t(36),s=t(133);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.prototype,"__proto__","set"))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return o(t),s(r),a(t)?(e?n(t,r):t.__proto__=r,t):t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,a=n.length;++t<r;)n[a+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(18),a=t(160),o=t(161),s=t(162),i=t(163),l=t(164);function c(n){var e=this.__data__=new r(n);this.size=e.size}c.prototype.clear=a,c.prototype.delete=o,c.prototype.get=s,c.prototype.has=i,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(13),a=t(41);n.exports=function(n){if(!a(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(181),a=t(12);n.exports=function n(e,t,o,s,i){return e===t||(null==e||null==t||!a(e)&&!a(t)?e!=e&&t!=t:r(e,t,o,s,n,i))}},function(n,e,t){var r=t(76),a=t(184),o=t(77);n.exports=function(n,e,t,s,i,l){var c=1&t,p=n.length,u=e.length;if(p!=u&&!(c&&u>p))return!1;var d=l.get(n),m=l.get(e);if(d&&m)return d==e&&m==n;var f=-1,h=!0,g=2&t?new r:void 0;for(l.set(n,e),l.set(e,n);++f<p;){var v=n[f],b=e[f];if(s)var y=c?s(b,v,f,e,n,l):s(v,b,f,n,e,l);if(void 0!==y){if(y)continue;h=!1;break}if(g){if(!a(e,(function(n,e){if(!o(g,e)&&(v===n||i(v,n,t,s,l)))return g.push(e)}))){h=!1;break}}else if(v!==b&&!i(v,b,t,s,l)){h=!1;break}}return l.delete(n),l.delete(e),h}},function(n,e,t){var r=t(42),a=t(182),o=t(183);function s(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}s.prototype.add=s.prototype.push=a,s.prototype.has=o,n.exports=s},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(194),a=t(200),o=t(82);n.exports=function(n){return o(n)?r(n):a(n)}},function(n,e,t){(function(n){var r=t(8),a=t(196),o=e&&!e.nodeType&&e,s=o&&"object"==typeof n&&n&&!n.nodeType&&n,i=s&&s.exports===o?r.Buffer:void 0,l=(i?i.isBuffer:void 0)||a;n.exports=l}).call(this,t(52)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(197),a=t(198),o=t(199),s=o&&o.isTypedArray,i=s?a(s):r;n.exports=i},function(n,e,t){var r=t(72),a=t(44);n.exports=function(n){return null!=n&&a(n.length)&&!r(n)}},function(n,e,t){var r=t(10)(t(8),"Set");n.exports=r},function(n,e,t){var r=t(41);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(87),a=t(22);n.exports=function(n,e){for(var t=0,o=(e=r(e,n)).length;null!=n&&t<o;)n=n[a(e[t++])];return t&&t==o?n:void 0}},function(n,e,t){var r=t(6),a=t(45),o=t(211),s=t(214);n.exports=function(n,e){return r(n)?n:a(n,e)?[n]:o(s(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(147),a=t(152),o=t(223),s=t(231),i=t(240),l=t(99),c=o((function(n){var e=l(n);return i(e)&&(e=void 0),s(r(n,1,i,!0),a(e,2))}));n.exports=c},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,a=r.exec(t);if(!a)return t;var o="",s=0,i=0;for(s=a.index;s<t.length;s++){switch(t.charCodeAt(s)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}i!==s&&(o+=t.substring(i,s)),i=s+1,o+=e}return i!==s?o+t.substring(i,s):o}},function(n,e,t){"use strict";
/**
 * @file Embedded JavaScript templating engine. {@link http://ejs.co}
 * @author Matthew Eernisse <mde@fleegix.org>
 * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
 * @project EJS
 * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
 */var r=t(247),a=t(248),o=t(249),s=!1,i=t(250).version,l=["delimiter","scope","context","debug","compileDebug","client","_with","rmWhitespace","strict","filename","async"],c=l.concat("cache"),p=/^\uFEFF/;function u(n,t){var a,o,s=t.views,i=/^[A-Za-z]+:\\|^\//.exec(n);if(i&&i.length)a=e.resolveInclude(n.replace(/^\/*/,""),t.root||"/",!0);else if(t.filename&&(o=e.resolveInclude(n,t.filename),r.existsSync(o)&&(a=o)),a||Array.isArray(s)&&s.some((function(t){return o=e.resolveInclude(n,t,!0),r.existsSync(o)}))&&(a=o),!a)throw new Error('Could not find the include file "'+t.escapeFunction(n)+'"');return a}function d(n,t){var r,a=n.filename,o=arguments.length>1;if(n.cache){if(!a)throw new Error("cache option requires a filename");if(r=e.cache.get(a))return r;o||(t=f(a).toString().replace(p,""))}else if(!o){if(!a)throw new Error("Internal EJS error: no file name or template provided");t=f(a).toString().replace(p,"")}return r=e.compile(t,n),n.cache&&e.cache.set(a,r),r}function m(n,t,r){var a;if(!r){if("function"==typeof e.promiseImpl)return new e.promiseImpl((function(e,r){try{e(a=d(n)(t))}catch(n){r(n)}}));throw new Error("Please provide a callback function")}try{a=d(n)(t)}catch(n){return r(n)}r(null,a)}function f(n){return e.fileLoader(n)}function h(n,e,t,r,a){var o=e.split("\n"),s=Math.max(r-3,0),i=Math.min(o.length,r+3),l=a(t),c=o.slice(s,i).map((function(n,e){var t=e+s+1;return(t==r?" >> ":"    ")+t+"| "+n})).join("\n");throw n.path=l,n.message=(l||"ejs")+":"+r+"\n"+c+"\n\n"+n.message,n}function g(n){return n.replace(/;(\s*$)/,"$1")}function v(n,t){t=t||{};var r={};this.templateText=n,this.mode=null,this.truncate=!1,this.currentLine=1,this.source="",this.dependencies=[],r.client=t.client||!1,r.escapeFunction=t.escape||t.escapeFunction||o.escapeXML,r.compileDebug=!1!==t.compileDebug,r.debug=!!t.debug,r.filename=t.filename,r.openDelimiter=t.openDelimiter||e.openDelimiter||"<",r.closeDelimiter=t.closeDelimiter||e.closeDelimiter||">",r.delimiter=t.delimiter||e.delimiter||"%",r.strict=t.strict||!1,r.context=t.context,r.cache=t.cache||!1,r.rmWhitespace=t.rmWhitespace,r.root=t.root,r.outputFunctionName=t.outputFunctionName,r.localsName=t.localsName||e.localsName||"locals",r.views=t.views,r.async=t.async,r.destructuredLocals=t.destructuredLocals,r.legacyInclude=void 0===t.legacyInclude||!!t.legacyInclude,r.strict?r._with=!1:r._with=void 0===t._with||t._with,this.opts=r,this.regex=this.createRegex()}e.cache=o.cache,e.fileLoader=r.readFileSync,e.localsName="locals",e.promiseImpl=new Function("return this;")().Promise,e.resolveInclude=function(n,e,t){var r=a.dirname,o=a.extname,s=(0,a.resolve)(t?e:r(e),n);return o(n)||(s+=".ejs"),s},e.compile=function(n,e){return e&&e.scope&&(s||(console.warn("`scope` option is deprecated and will be removed in EJS 3"),s=!0),e.context||(e.context=e.scope),delete e.scope),new v(n,e).compile()},e.render=function(n,e,t){var r=e||{},a=t||{};return 2==arguments.length&&o.shallowCopyFromList(a,r,l),d(a,n)(r)},e.renderFile=function(){var n,e,t,r=Array.prototype.slice.call(arguments),a=r.shift(),s={filename:a};return"function"==typeof arguments[arguments.length-1]&&(n=r.pop()),r.length?(e=r.shift(),r.length?o.shallowCopy(s,r.pop()):(e.settings&&(e.settings.views&&(s.views=e.settings.views),e.settings["view cache"]&&(s.cache=!0),(t=e.settings["view options"])&&o.shallowCopy(s,t)),o.shallowCopyFromList(s,e,c)),s.filename=a):e={},m(s,e,n)},e.Template=v,e.clearCache=function(){e.cache.reset()},v.modes={EVAL:"eval",ESCAPED:"escaped",RAW:"raw",COMMENT:"comment",LITERAL:"literal"},v.prototype={createRegex:function(){var n="(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)",e=o.escapeRegExpChars(this.opts.delimiter),t=o.escapeRegExpChars(this.opts.openDelimiter),r=o.escapeRegExpChars(this.opts.closeDelimiter);return n=n.replace(/%/g,e).replace(/</g,t).replace(/>/g,r),new RegExp(n)},compile:function(){var n,e,t,r=this.opts,s="",i="",l=r.escapeFunction;if(!this.source){if(this.generateSource(),s+='  var __output = "";\n  function __append(s) { if (s !== undefined && s !== null) __output += s }\n',r.outputFunctionName&&(s+="  var "+r.outputFunctionName+" = __append;\n"),r.destructuredLocals&&r.destructuredLocals.length){for(var c="  var __locals = ("+r.localsName+" || {}),\n",p=0;p<r.destructuredLocals.length;p++){var m=r.destructuredLocals[p];p>0&&(c+=",\n  "),c+=m+" = __locals."+m}s+=c+";\n"}!1!==r._with&&(s+="  with ("+r.localsName+" || {}) {\n",i+="  }\n"),i+="  return __output;\n",this.source=s+this.source+i}n=r.compileDebug?"var __line = 1\n  , __lines = "+JSON.stringify(this.templateText)+"\n  , __filename = "+(r.filename?JSON.stringify(r.filename):"undefined")+";\ntry {\n"+this.source+"} catch (e) {\n  rethrow(e, __lines, __filename, __line, escapeFn);\n}\n":this.source,r.client&&(n="escapeFn = escapeFn || "+l.toString()+";\n"+n,r.compileDebug&&(n="rethrow = rethrow || "+h.toString()+";\n"+n)),r.strict&&(n='"use strict";\n'+n),r.debug&&console.log(n),r.compileDebug&&r.filename&&(n=n+"\n//# sourceURL="+r.filename+"\n");try{if(r.async)try{t=new Function("return (async function(){}).constructor;")()}catch(n){throw n instanceof SyntaxError?new Error("This environment does not support async/await"):n}else t=Function;e=new t(r.localsName+", escapeFn, include, rethrow",n)}catch(n){throw n instanceof SyntaxError&&(r.filename&&(n.message+=" in "+r.filename),n.message+=" while compiling ejs\n\n",n.message+="If the above error is not helpful, you may want to try EJS-Lint:\n",n.message+="https://github.com/RyanZim/EJS-Lint",r.async||(n.message+="\n",n.message+="Or, if you meant to create an async function, pass `async: true` as an option.")),n}var f=r.client?e:function(n){return e.apply(r.context,[n||{},l,function(e,t){var a=o.shallowCopy({},n);return t&&(a=o.shallowCopy(a,t)),function(n,e){var t=o.shallowCopy({},e);return t.filename=u(n,t),d(t)}(e,r)(a)},h])};if(f.dependencies=this.dependencies,r.filename&&"function"==typeof Object.defineProperty){var g=r.filename,v=a.basename(g,a.extname(g));try{Object.defineProperty(f,"name",{value:v,writable:!1,enumerable:!1,configurable:!0})}catch(n){}}return f},generateSource:function(){var n=this.opts;n.rmWhitespace&&(this.templateText=this.templateText.replace(/[\r\n]+/g,"\n").replace(/^\s+|\s+$/gm,"")),this.templateText=this.templateText.replace(/[ \t]*<%_/gm,"<%_").replace(/_%>[ \t]*/gm,"_%>");var t=this,r=this.parseTemplateText(),a=this.opts.delimiter,s=this.opts.openDelimiter,i=this.opts.closeDelimiter;r&&r.length&&r.forEach((function(l,c){var d,m,h,g,b,y;if(0===l.indexOf(s+a)&&0!==l.indexOf(s+a+a)&&(m=r[c+2])!=a+i&&m!="-"+a+i&&m!="_"+a+i)throw new Error('Could not find matching close tag for "'+l+'".');if(n.legacyInclude&&(h=l.match(/^\s*include\s+(\S+)/))&&(d=r[c-1])&&(d==s+a||d==s+a+"-"||d==s+a+"_"))return g=o.shallowCopy({},t.opts),b=function(n,e){var t,r,a=o.shallowCopy({},e);r=f(t=u(n,a)).toString().replace(p,""),a.filename=t;var s=new v(r,a);return s.generateSource(),{source:s.source,filename:t,template:r}}(h[1],g),y=t.opts.compileDebug?"    ; (function(){\n      var __line = 1\n      , __lines = "+JSON.stringify(b.template)+"\n      , __filename = "+JSON.stringify(b.filename)+";\n      try {\n"+b.source+"      } catch (e) {\n        rethrow(e, __lines, __filename, __line, escapeFn);\n      }\n    ; }).call(this)\n":"    ; (function(){\n"+b.source+"    ; }).call(this)\n",t.source+=y,void t.dependencies.push(e.resolveInclude(h[1],g.filename));t.scanLine(l)}))},parseTemplateText:function(){for(var n,e=this.templateText,t=this.regex,r=t.exec(e),a=[];r;)0!==(n=r.index)&&(a.push(e.substring(0,n)),e=e.slice(n)),a.push(r[0]),e=e.slice(r[0].length),r=t.exec(e);return e&&a.push(e),a},_addOutput:function(n){if(this.truncate&&(n=n.replace(/^(?:\r\n|\r|\n)/,""),this.truncate=!1),!n)return n;n=(n=(n=(n=n.replace(/\\/g,"\\\\")).replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/"/g,'\\"'),this.source+='    ; __append("'+n+'")\n'},scanLine:function(n){var e,t=this.opts.delimiter,r=this.opts.openDelimiter,a=this.opts.closeDelimiter;switch(e=n.split("\n").length-1,n){case r+t:case r+t+"_":this.mode=v.modes.EVAL;break;case r+t+"=":this.mode=v.modes.ESCAPED;break;case r+t+"-":this.mode=v.modes.RAW;break;case r+t+"#":this.mode=v.modes.COMMENT;break;case r+t+t:this.mode=v.modes.LITERAL,this.source+='    ; __append("'+n.replace(r+t+t,r+t)+'")\n';break;case t+t+a:this.mode=v.modes.LITERAL,this.source+='    ; __append("'+n.replace(t+t+a,t+a)+'")\n';break;case t+a:case"-"+t+a:case"_"+t+a:this.mode==v.modes.LITERAL&&this._addOutput(n),this.mode=null,this.truncate=0===n.indexOf("-")||0===n.indexOf("_");break;default:if(this.mode){switch(this.mode){case v.modes.EVAL:case v.modes.ESCAPED:case v.modes.RAW:n.lastIndexOf("//")>n.lastIndexOf("\n")&&(n+="\n")}switch(this.mode){case v.modes.EVAL:this.source+="    ; "+n+"\n";break;case v.modes.ESCAPED:this.source+="    ; __append(escapeFn("+g(n)+"))\n";break;case v.modes.RAW:this.source+="    ; __append("+g(n)+")\n";break;case v.modes.COMMENT:break;case v.modes.LITERAL:this._addOutput(n)}}else this._addOutput(n)}this.opts.compileDebug&&e&&(this.currentLine+=e,this.source+="    ; __line = "+this.currentLine+"\n")}},e.escapeXML=o.escapeXML,e.__express=e.renderFile,e.VERSION=i,e.name="ejs","undefined"!=typeof window&&(window.ejs=e)},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},a=(t(243),t(4)),o=Object(a.a)(r,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=o.exports},function(n,e,t){"use strict";t.r(e);var r={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},a=(t(244),t(4)),o=Object(a.a)(r,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,r){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=o.exports},function(n,e,t){"use strict";var r=t(1),a=t(16),o=t(100),s=t(38);n.exports=function(n,e,t,i){i||(i={});var l=i.enumerable,c=void 0!==i.name?i.name:e;if(r(t)&&o(t,c,i),i.global)l?n[e]=t:s(e,t);else{try{i.unsafe?n[e]&&(l=!0):delete n[e]}catch(n){}l?n[e]=t:a.f(n,e,{value:t,enumerable:!1,configurable:!i.nonConfigurable,writable:!i.nonWritable})}return n}},function(n,e,t){"use strict";var r=t(138),a=String;n.exports=function(n){if("Symbol"===r(n))throw new TypeError("Cannot convert a Symbol value to a string");return a(n)}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){"use strict";var r=t(2),a=t(3),o=t(1),s=t(9),i=t(5),l=t(114).CONFIGURABLE,c=t(115),p=t(116),u=p.enforce,d=p.get,m=String,f=Object.defineProperty,h=r("".slice),g=r("".replace),v=r([].join),b=i&&!a((function(){return 8!==f((function(){}),"length",{value:8}).length})),y=String(String).split("String"),x=n.exports=function(n,e,t){"Symbol("===h(m(e),0,7)&&(e="["+g(m(e),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!s(n,"name")||l&&n.name!==e)&&(i?f(n,"name",{value:e,configurable:!0}):n.name=e),b&&t&&s(t,"arity")&&n.length!==t.arity&&f(n,"length",{value:t.arity});try{t&&s(t,"constructor")&&t.constructor?i&&f(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var r=u(n);return s(r,"source")||(r.source=v(y,"string"==typeof e?e:"")),n};Function.prototype.toString=x((function(){return o(this)&&d(this).source||c(this)}),"toString")},function(n,e,t){"use strict";n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var r=t(0),a=t(7),o=r.document,s=a(o)&&a(o.createElement);n.exports=function(n){return s?o.createElement(n):{}}},function(n,e,t){"use strict";var r=t(5),a=t(3);n.exports=r&&a((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){"use strict";var r=t(61),a=t(63),o=r("keys");n.exports=function(n){return o[n]||(o[n]=a(n))}},function(n,e,t){"use strict";var r=t(2),a=t(9),o=t(28),s=t(120).indexOf,i=t(51),l=r([].push);n.exports=function(n,e){var t,r=o(n),c=0,p=[];for(t in r)!a(i,t)&&a(r,t)&&l(p,t);for(;e.length>c;)a(r,t=e[c++])&&(~s(p,t)||l(p,t));return p}},function(n,e,t){n.exports=t(253)},function(n,e,t){"use strict";var r=t(26),a=t(126).left,o=t(127),s=t(60);r({target:"Array",proto:!0,forced:!t(128)&&s>79&&s<83||!o("reduce")},{reduce:function(n){var e=arguments.length;return a(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,o=a&&!r.call({1:2},1);e.f=o?function(n){var e=a(this,n);return!!e&&e.enumerable}:r},function(n,e,t){"use strict";var r=t(34),a=t(7),o=t(56),s=t(111),i=t(113),l=t(31),c=TypeError,p=l("toPrimitive");n.exports=function(n,e){if(!a(n)||o(n))return n;var t,l=s(n,p);if(l){if(void 0===e&&(e="default"),t=r(l,n,e),!a(t)||o(t))return t;throw new c("Can't convert object to primitive value")}return void 0===e&&(e="number"),i(n,e)}},function(n,e,t){"use strict";n.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(n,e,t){"use strict";var r=t(30),a=t(54);n.exports=function(n,e){var t=n[e];return a(t)?void 0:r(t)}},function(n,e,t){"use strict";var r=String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e,t){"use strict";var r=t(34),a=t(1),o=t(7),s=TypeError;n.exports=function(n,e){var t,i;if("string"===e&&a(t=n.toString)&&!o(i=r(t,n)))return i;if(a(t=n.valueOf)&&!o(i=r(t,n)))return i;if("string"!==e&&a(t=n.toString)&&!o(i=r(t,n)))return i;throw new s("Can't convert object to primitive value")}},function(n,e,t){"use strict";var r=t(5),a=t(9),o=Function.prototype,s=r&&Object.getOwnPropertyDescriptor,i=a(o,"name"),l=i&&"something"===function(){}.name,c=i&&(!r||r&&s(o,"name").configurable);n.exports={EXISTS:i,PROPER:l,CONFIGURABLE:c}},function(n,e,t){"use strict";var r=t(2),a=t(1),o=t(37),s=r(Function.toString);a(o.inspectSource)||(o.inspectSource=function(n){return s(n)}),n.exports=o.inspectSource},function(n,e,t){"use strict";var r,a,o,s=t(117),i=t(0),l=t(7),c=t(14),p=t(9),u=t(37),d=t(104),m=t(51),f=i.TypeError,h=i.WeakMap;if(s||u.state){var g=u.state||(u.state=new h);g.get=g.get,g.has=g.has,g.set=g.set,r=function(n,e){if(g.has(n))throw new f("Object already initialized");return e.facade=n,g.set(n,e),e},a=function(n){return g.get(n)||{}},o=function(n){return g.has(n)}}else{var v=d("state");m[v]=!0,r=function(n,e){if(p(n,v))throw new f("Object already initialized");return e.facade=n,c(n,v,e),e},a=function(n){return p(n,v)?n[v]:{}},o=function(n){return p(n,v)}}n.exports={set:r,get:a,has:o,enforce:function(n){return o(n)?a(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=a(e)).type!==n)throw new f("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){"use strict";var r=t(0),a=t(1),o=r.WeakMap;n.exports=a(o)&&/native code/.test(String(o))},function(n,e,t){"use strict";var r=t(29),a=t(2),o=t(119),s=t(124),i=t(49),l=a([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=o.f(i(n)),t=s.f;return t?l(e,t(n)):e}},function(n,e,t){"use strict";var r=t(105),a=t(101).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,a)}},function(n,e,t){"use strict";var r=t(28),a=t(121),o=t(33),s=function(n){return function(e,t,s){var i=r(e),l=o(i);if(0===l)return!n&&-1;var c,p=a(s,l);if(n&&t!=t){for(;l>p;)if((c=i[p++])!=c)return!0}else for(;l>p;p++)if((n||p in i)&&i[p]===t)return n||p||0;return!n&&-1}};n.exports={includes:s(!0),indexOf:s(!1)}},function(n,e,t){"use strict";var r=t(66),a=Math.max,o=Math.min;n.exports=function(n,e){var t=r(n);return t<0?a(t+e,0):o(t,e)}},function(n,e,t){"use strict";var r=Math.ceil,a=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?a:r)(e)}},function(n,e,t){"use strict";var r=t(66),a=Math.min;n.exports=function(n){var e=r(n);return e>0?a(e,9007199254740991):0}},function(n,e,t){"use strict";e.f=Object.getOwnPropertySymbols},function(n,e,t){"use strict";var r=t(3),a=t(1),o=/#|\.prototype\./,s=function(n,e){var t=l[i(n)];return t===p||t!==c&&(a(e)?r(e):!!e)},i=s.normalize=function(n){return String(n).replace(o,".").toLowerCase()},l=s.data={},c=s.NATIVE="N",p=s.POLYFILL="P";n.exports=s},function(n,e,t){"use strict";var r=t(30),a=t(32),o=t(50),s=t(33),i=TypeError,l="Reduce of empty array with no initial value",c=function(n){return function(e,t,c,p){var u=a(e),d=o(u),m=s(u);if(r(t),0===m&&c<2)throw new i(l);var f=n?m-1:0,h=n?-1:1;if(c<2)for(;;){if(f in d){p=d[f],f+=h;break}if(f+=h,n?f<0:m<=f)throw new i(l)}for(;n?f>=0:m>f;f+=h)f in d&&(p=t(p,d[f],f,u));return p}};n.exports={left:c(!1),right:c(!0)}},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){"use strict";var r=t(0),a=t(17);n.exports="process"===a(r.process)},function(n,e,t){"use strict";var r=t(26),a=t(0),o=t(130),s=t(131),i=a.WebAssembly,l=7!==new Error("e",{cause:7}).cause,c=function(n,e){var t={};t[n]=s(n,e,l),r({global:!0,constructor:!0,arity:1,forced:l},t)},p=function(n,e){if(i&&i[n]){var t={};t[n]=s("WebAssembly."+n,e,l),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(n){return function(e){return o(n,this,arguments)}})),c("EvalError",(function(n){return function(e){return o(n,this,arguments)}})),c("RangeError",(function(n){return function(e){return o(n,this,arguments)}})),c("ReferenceError",(function(n){return function(e){return o(n,this,arguments)}})),c("SyntaxError",(function(n){return function(e){return o(n,this,arguments)}})),c("TypeError",(function(n){return function(e){return o(n,this,arguments)}})),c("URIError",(function(n){return function(e){return o(n,this,arguments)}})),p("CompileError",(function(n){return function(e){return o(n,this,arguments)}})),p("LinkError",(function(n){return function(e){return o(n,this,arguments)}})),p("RuntimeError",(function(n){return function(e){return o(n,this,arguments)}}))},function(n,e,t){"use strict";var r=t(27),a=Function.prototype,o=a.apply,s=a.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?s.bind(o):function(){return s.apply(o,arguments)})},function(n,e,t){"use strict";var r=t(29),a=t(9),o=t(14),s=t(57),i=t(67),l=t(65),c=t(135),p=t(136),u=t(137),d=t(140),m=t(141),f=t(5),h=t(62);n.exports=function(n,e,t,g){var v=g?2:1,b=n.split("."),y=b[b.length-1],x=r.apply(null,b);if(x){var k=x.prototype;if(!h&&a(k,"cause")&&delete k.cause,!t)return x;var E=r("Error"),w=e((function(n,e){var t=u(g?e:n,void 0),r=g?new x(n):new x;return void 0!==t&&o(r,"message",t),m(r,w,r.stack,2),this&&s(k,this)&&p(r,this,w),arguments.length>v&&d(r,arguments[v]),r}));if(w.prototype=k,"Error"!==y?i?i(w,E):l(w,E,{name:!0}):f&&"stackTraceLimit"in x&&(c(w,x,"stackTraceLimit"),c(w,x,"prepareStackTrace")),l(w,x),!h)try{k.name!==y&&o(k,"name",y),k.constructor=w}catch(n){}return w}}},function(n,e,t){"use strict";var r=t(2),a=t(30);n.exports=function(n,e,t){try{return r(a(Object.getOwnPropertyDescriptor(n,e)[t]))}catch(n){}}},function(n,e,t){"use strict";var r=t(134),a=String,o=TypeError;n.exports=function(n){if(r(n))return n;throw new o("Can't set "+a(n)+" as a prototype")}},function(n,e,t){"use strict";var r=t(7);n.exports=function(n){return r(n)||null===n}},function(n,e,t){"use strict";var r=t(16).f;n.exports=function(n,e,t){t in n||r(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){"use strict";var r=t(1),a=t(7),o=t(67);n.exports=function(n,e,t){var s,i;return o&&r(s=e.constructor)&&s!==t&&a(i=s.prototype)&&i!==t.prototype&&o(n,i),n}},function(n,e,t){"use strict";var r=t(98);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){"use strict";var r=t(139),a=t(1),o=t(17),s=t(31)("toStringTag"),i=Object,l="Arguments"===o(function(){return arguments}());n.exports=r?o:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=i(n),s))?t:l?o(e):"Object"===(r=o(e))&&a(e.callee)?"Arguments":r}},function(n,e,t){"use strict";var r={};r[t(31)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){"use strict";var r=t(7),a=t(14);n.exports=function(n,e){r(e)&&"cause"in e&&a(n,"cause",e.cause)}},function(n,e,t){"use strict";var r=t(14),a=t(142),o=t(143),s=Error.captureStackTrace;n.exports=function(n,e,t,i){o&&(s?s(n,e):r(n,"stack",a(t,i)))}},function(n,e,t){"use strict";var r=t(2),a=Error,o=r("".replace),s=String(new a("zxcasd").stack),i=/\n\s*at [^:]*:[^\n]*/,l=i.test(s);n.exports=function(n,e){if(l&&"string"==typeof n&&!a.prepareStackTrace)for(;e--;)n=o(n,i,"");return n}},function(n,e,t){"use strict";var r=t(3),a=t(35);n.exports=!r((function(){var n=new Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",a(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var r=t(5),a=t(145),o=TypeError,s=Object.getOwnPropertyDescriptor,i=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(n){return n instanceof TypeError}}();n.exports=i?function(n,e){if(a(n)&&!s(n,"length").writable)throw new o("Cannot set read only .length");return n.length=e}:function(n,e){return n.length=e}},function(n,e,t){"use strict";var r=t(17);n.exports=Array.isArray||function(n){return"Array"===r(n)}},function(n,e,t){"use strict";var r=TypeError;n.exports=function(n){if(n>9007199254740991)throw r("Maximum allowed index exceeded");return n}},function(n,e,t){var r=t(68),a=t(148);n.exports=function n(e,t,o,s,i){var l=-1,c=e.length;for(o||(o=a),i||(i=[]);++l<c;){var p=e[l];t>0&&o(p)?t>1?n(p,t-1,o,s,i):r(i,p):s||(i[i.length]=p)}return i}},function(n,e,t){var r=t(15),a=t(39),o=t(6),s=r?r.isConcatSpreadable:void 0;n.exports=function(n){return o(n)||a(n)||!!(s&&n&&n[s])}},function(n,e,t){var r=t(13),a=t(12);n.exports=function(n){return a(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(15),a=Object.prototype,o=a.hasOwnProperty,s=a.toString,i=r?r.toStringTag:void 0;n.exports=function(n){var e=o.call(n,i),t=n[i];try{n[i]=void 0;var r=!0}catch(n){}var a=s.call(n);return r&&(e?n[i]=t:delete n[i]),a}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(153),a=t(209),o=t(47),s=t(6),i=t(220);n.exports=function(n){return"function"==typeof n?n:null==n?o:"object"==typeof n?s(n)?a(n[0],n[1]):r(n):i(n)}},function(n,e,t){var r=t(154),a=t(208),o=t(85);n.exports=function(n){var e=a(n);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(70),a=t(74);n.exports=function(n,e,t,o){var s=t.length,i=s,l=!o;if(null==n)return!i;for(n=Object(n);s--;){var c=t[s];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++s<i;){var p=(c=t[s])[0],u=n[p],d=c[1];if(l&&c[2]){if(void 0===u&&!(p in n))return!1}else{var m=new r;if(o)var f=o(u,d,p,n,e,m);if(!(void 0===f?a(d,u,3,o,m):f))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(19),a=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():a.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(19);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(19);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(19);n.exports=function(n,e){var t=this.__data__,a=r(t,n);return a<0?(++this.size,t.push([n,e])):t[a][1]=e,this}},function(n,e,t){var r=t(18);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(18),a=t(40),o=t(42);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var s=t.__data__;if(!a||s.length<199)return s.push([n,e]),this.size=++t.size,this;t=this.__data__=new o(s)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(72),a=t(166),o=t(41),s=t(73),i=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,p=l.toString,u=c.hasOwnProperty,d=RegExp("^"+p.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!o(n)||a(n))&&(r(n)?d:i).test(s(n))}},function(n,e,t){var r,a=t(167),o=(r=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!o&&o in n}},function(n,e,t){var r=t(8)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(170),a=t(18),o=t(40);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||a),string:new r}}},function(n,e,t){var r=t(171),a=t(172),o=t(173),s=t(174),i=t(175);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=o,l.prototype.has=s,l.prototype.set=i,n.exports=l},function(n,e,t){var r=t(20);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(20),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return a.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(20),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:a.call(e,n)}},function(n,e,t){var r=t(20);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(21);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(21);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(21);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(21);n.exports=function(n,e){var t=r(this,n),a=t.size;return t.set(n,e),this.size+=t.size==a?0:1,this}},function(n,e,t){var r=t(70),a=t(75),o=t(185),s=t(188),i=t(204),l=t(6),c=t(79),p=t(81),u="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,m,f,h){var g=l(n),v=l(e),b=g?"[object Array]":i(n),y=v?"[object Array]":i(e),x=(b="[object Arguments]"==b?u:b)==u,k=(y="[object Arguments]"==y?u:y)==u,E=b==y;if(E&&c(n)){if(!c(e))return!1;g=!0,x=!1}if(E&&!x)return h||(h=new r),g||p(n)?a(n,e,t,m,f,h):o(n,e,b,t,m,f,h);if(!(1&t)){var w=x&&d.call(n,"__wrapped__"),_=k&&d.call(e,"__wrapped__");if(w||_){var j=w?n.value():n,A=_?e.value():e;return h||(h=new r),f(j,A,t,m,h)}}return!!E&&(h||(h=new r),s(n,e,t,m,f,h))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(15),a=t(186),o=t(71),s=t(75),i=t(187),l=t(43),c=r?r.prototype:void 0,p=c?c.valueOf:void 0;n.exports=function(n,e,t,r,c,u,d){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!u(new a(n),new a(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var m=i;case"[object Set]":var f=1&r;if(m||(m=l),n.size!=e.size&&!f)return!1;var h=d.get(n);if(h)return h==e;r|=2,d.set(n,e);var g=s(m(n),m(e),r,c,u,d);return d.delete(n),g;case"[object Symbol]":if(p)return p.call(n)==p.call(e)}return!1}},function(n,e,t){var r=t(8).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(189),a=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,o,s,i){var l=1&t,c=r(n),p=c.length;if(p!=r(e).length&&!l)return!1;for(var u=p;u--;){var d=c[u];if(!(l?d in e:a.call(e,d)))return!1}var m=i.get(n),f=i.get(e);if(m&&f)return m==e&&f==n;var h=!0;i.set(n,e),i.set(e,n);for(var g=l;++u<p;){var v=n[d=c[u]],b=e[d];if(o)var y=l?o(b,v,d,e,n,i):o(v,b,d,n,e,i);if(!(void 0===y?v===b||s(v,b,t,o,i):y)){h=!1;break}g||(g="constructor"==d)}if(h&&!g){var x=n.constructor,k=e.constructor;x==k||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof k&&k instanceof k||(h=!1)}return i.delete(n),i.delete(e),h}},function(n,e,t){var r=t(190),a=t(191),o=t(78);n.exports=function(n){return r(n,o,a)}},function(n,e,t){var r=t(68),a=t(6);n.exports=function(n,e,t){var o=e(n);return a(n)?o:r(o,t(n))}},function(n,e,t){var r=t(192),a=t(193),o=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,i=s?function(n){return null==n?[]:(n=Object(n),r(s(n),(function(e){return o.call(n,e)})))}:a;n.exports=i},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=0,o=[];++t<r;){var s=n[t];e(s,t,n)&&(o[a++]=s)}return o}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(195),a=t(39),o=t(6),s=t(79),i=t(80),l=t(81),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=o(n),p=!t&&a(n),u=!t&&!p&&s(n),d=!t&&!p&&!u&&l(n),m=t||p||u||d,f=m?r(n.length,String):[],h=f.length;for(var g in n)!e&&!c.call(n,g)||m&&("length"==g||u&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||i(g,h))||f.push(g);return f}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(13),a=t(44),o=t(12),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,n.exports=function(n){return o(n)&&a(n.length)&&!!s[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(69),a=e&&!e.nodeType&&e,o=a&&"object"==typeof n&&n&&!n.nodeType&&n,s=o&&o.exports===a&&r.process,i=function(){try{var n=o&&o.require&&o.require("util").types;return n||s&&s.binding&&s.binding("util")}catch(n){}}();n.exports=i}).call(this,t(52)(n))},function(n,e,t){var r=t(201),a=t(202),o=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return a(n);var e=[];for(var t in Object(n))o.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(203)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(205),a=t(40),o=t(206),s=t(83),i=t(207),l=t(13),c=t(73),p=c(r),u=c(a),d=c(o),m=c(s),f=c(i),h=l;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||a&&"[object Map]"!=h(new a)||o&&"[object Promise]"!=h(o.resolve())||s&&"[object Set]"!=h(new s)||i&&"[object WeakMap]"!=h(new i))&&(h=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,r=t?c(t):"";if(r)switch(r){case p:return"[object DataView]";case u:return"[object Map]";case d:return"[object Promise]";case m:return"[object Set]";case f:return"[object WeakMap]"}return e}),n.exports=h},function(n,e,t){var r=t(10)(t(8),"DataView");n.exports=r},function(n,e,t){var r=t(10)(t(8),"Promise");n.exports=r},function(n,e,t){var r=t(10)(t(8),"WeakMap");n.exports=r},function(n,e,t){var r=t(84),a=t(78);n.exports=function(n){for(var e=a(n),t=e.length;t--;){var o=e[t],s=n[o];e[t]=[o,s,r(s)]}return e}},function(n,e,t){var r=t(74),a=t(210),o=t(217),s=t(45),i=t(84),l=t(85),c=t(22);n.exports=function(n,e){return s(n)&&i(e)?l(c(n),e):function(t){var s=a(t,n);return void 0===s&&s===e?o(t,n):r(e,s,3)}}},function(n,e,t){var r=t(86);n.exports=function(n,e,t){var a=null==n?void 0:r(n,e);return void 0===a?t:a}},function(n,e,t){var r=t(212),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,s=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(a,(function(n,t,r,a){e.push(r?a.replace(o,"$1"):t||n)})),e}));n.exports=s},function(n,e,t){var r=t(213);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(42);function a(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,a=e?e.apply(this,r):r[0],o=t.cache;if(o.has(a))return o.get(a);var s=n.apply(this,r);return t.cache=o.set(a,s)||o,s};return t.cache=new(a.Cache||r),t}a.Cache=r,n.exports=a},function(n,e,t){var r=t(215);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(15),a=t(216),o=t(6),s=t(46),i=r?r.prototype:void 0,l=i?i.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(o(e))return a(e,n)+"";if(s(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=Array(r);++t<r;)a[t]=e(n[t],t,n);return a}},function(n,e,t){var r=t(218),a=t(219);n.exports=function(n,e){return null!=n&&a(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(87),a=t(39),o=t(6),s=t(80),i=t(44),l=t(22);n.exports=function(n,e,t){for(var c=-1,p=(e=r(e,n)).length,u=!1;++c<p;){var d=l(e[c]);if(!(u=null!=n&&t(n,d)))break;n=n[d]}return u||++c!=p?u:!!(p=null==n?0:n.length)&&i(p)&&s(d,p)&&(o(n)||a(n))}},function(n,e,t){var r=t(221),a=t(222),o=t(45),s=t(22);n.exports=function(n){return o(n)?r(s(n)):a(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(86);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(47),a=t(224),o=t(226);n.exports=function(n,e){return o(a(n,e,r),n+"")}},function(n,e,t){var r=t(225),a=Math.max;n.exports=function(n,e,t){return e=a(void 0===e?n.length-1:e,0),function(){for(var o=arguments,s=-1,i=a(o.length-e,0),l=Array(i);++s<i;)l[s]=o[e+s];s=-1;for(var c=Array(e+1);++s<e;)c[s]=o[s];return c[e]=t(l),r(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(227),a=t(230)(r);n.exports=a},function(n,e,t){var r=t(228),a=t(229),o=t(47),s=a?function(n,e){return a(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:o;n.exports=s},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(10),a=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=a},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var a=t(),o=16-(a-r);if(r=a,o>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(76),a=t(232),o=t(237),s=t(77),i=t(238),l=t(43);n.exports=function(n,e,t){var c=-1,p=a,u=n.length,d=!0,m=[],f=m;if(t)d=!1,p=o;else if(u>=200){var h=e?null:i(n);if(h)return l(h);d=!1,p=s,f=new r}else f=e?[]:m;n:for(;++c<u;){var g=n[c],v=e?e(g):g;if(g=t||0!==g?g:0,d&&v==v){for(var b=f.length;b--;)if(f[b]===v)continue n;e&&f.push(v),m.push(g)}else p(f,v,t)||(f!==m&&f.push(v),m.push(g))}return m}},function(n,e,t){var r=t(233);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(234),a=t(235),o=t(236);n.exports=function(n,e,t){return e==e?o(n,e,t):r(n,a,t)}},function(n,e){n.exports=function(n,e,t,r){for(var a=n.length,o=t+(r?1:-1);r?o--:++o<a;)if(e(n[o],o,n))return o;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,a=n.length;++r<a;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,a=null==n?0:n.length;++r<a;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(83),a=t(239),o=t(43),s=r&&1/o(new r([,-0]))[1]==1/0?function(n){return new r(n)}:a;n.exports=s},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(82),a=t(12);n.exports=function(n){return a(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(88)},function(n,e,t){"use strict";t(89)},function(n,e,t){},function(n,e,t){},function(n,e){},function(n,e){function t(n,e){for(var t=0,r=n.length-1;r>=0;r--){var a=n[r];"."===a?n.splice(r,1):".."===a?(n.splice(r,1),t++):t&&(n.splice(r,1),t--)}if(e)for(;t--;t)n.unshift("..");return n}function r(n,e){if(n.filter)return n.filter(e);for(var t=[],r=0;r<n.length;r++)e(n[r],r,n)&&t.push(n[r]);return t}e.resolve=function(){for(var n="",e=!1,a=arguments.length-1;a>=-1&&!e;a--){var o=a>=0?arguments[a]:process.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(n=o+"/"+n,e="/"===o.charAt(0))}return(e?"/":"")+(n=t(r(n.split("/"),(function(n){return!!n})),!e).join("/"))||"."},e.normalize=function(n){var o=e.isAbsolute(n),s="/"===a(n,-1);return(n=t(r(n.split("/"),(function(n){return!!n})),!o).join("/"))||o||(n="."),n&&s&&(n+="/"),(o?"/":"")+n},e.isAbsolute=function(n){return"/"===n.charAt(0)},e.join=function(){var n=Array.prototype.slice.call(arguments,0);return e.normalize(r(n,(function(n,e){if("string"!=typeof n)throw new TypeError("Arguments to path.join must be strings");return n})).join("/"))},e.relative=function(n,t){function r(n){for(var e=0;e<n.length&&""===n[e];e++);for(var t=n.length-1;t>=0&&""===n[t];t--);return e>t?[]:n.slice(e,t-e+1)}n=e.resolve(n).substr(1),t=e.resolve(t).substr(1);for(var a=r(n.split("/")),o=r(t.split("/")),s=Math.min(a.length,o.length),i=s,l=0;l<s;l++)if(a[l]!==o[l]){i=l;break}var c=[];for(l=i;l<a.length;l++)c.push("..");return(c=c.concat(o.slice(i))).join("/")},e.sep="/",e.delimiter=":",e.dirname=function(n){if("string"!=typeof n&&(n+=""),0===n.length)return".";for(var e=n.charCodeAt(0),t=47===e,r=-1,a=!0,o=n.length-1;o>=1;--o)if(47===(e=n.charCodeAt(o))){if(!a){r=o;break}}else a=!1;return-1===r?t?"/":".":t&&1===r?"/":n.slice(0,r)},e.basename=function(n,e){var t=function(n){"string"!=typeof n&&(n+="");var e,t=0,r=-1,a=!0;for(e=n.length-1;e>=0;--e)if(47===n.charCodeAt(e)){if(!a){t=e+1;break}}else-1===r&&(a=!1,r=e+1);return-1===r?"":n.slice(t,r)}(n);return e&&t.substr(-1*e.length)===e&&(t=t.substr(0,t.length-e.length)),t},e.extname=function(n){"string"!=typeof n&&(n+="");for(var e=-1,t=0,r=-1,a=!0,o=0,s=n.length-1;s>=0;--s){var i=n.charCodeAt(s);if(47!==i)-1===r&&(a=!1,r=s+1),46===i?-1===e?e=s:1!==o&&(o=1):-1!==e&&(o=-1);else if(!a){t=s+1;break}}return-1===e||-1===r||0===o||1===o&&e===r-1&&e===t+1?"":n.slice(e,r)};var a="b"==="ab".substr(-1)?function(n,e,t){return n.substr(e,t)}:function(n,e,t){return e<0&&(e=n.length+e),n.substr(e,t)}},function(n,e,t){"use strict";var r=/[|\\{}()[\]^$+*?.]/g;e.escapeRegExpChars=function(n){return n?String(n).replace(r,"\\$&"):""};var a={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"},o=/[&<>'"]/g;function s(n){return a[n]||n}e.escapeXML=function(n){return null==n?"":String(n).replace(o,s)},e.escapeXML.toString=function(){return Function.prototype.toString.call(this)+';\nvar _ENCODE_HTML_RULES = {\n      "&": "&amp;"\n    , "<": "&lt;"\n    , ">": "&gt;"\n    , \'"\': "&#34;"\n    , "\'": "&#39;"\n    }\n  , _MATCH_HTML = /[&<>\'"]/g;\nfunction encode_char(c) {\n  return _ENCODE_HTML_RULES[c] || c;\n};\n'},e.shallowCopy=function(n,e){for(var t in e=e||{})n[t]=e[t];return n},e.shallowCopyFromList=function(n,e,t){for(var r=0;r<t.length;r++){var a=t[r];void 0!==e[a]&&(n[a]=e[a])}return n},e.cache={_data:{},set:function(n,e){this._data[n]=e},get:function(n){return this._data[n]},remove:function(n){delete this._data[n]},reset:function(){this._data={}}}},function(n){n.exports=JSON.parse('{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.7.4","author":"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)","license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":"https://github.com/mde/ejs/issues","homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^13.1.1","eslint":"^4.14.0","git-directory-deploy":"^1.5.1","jake":"^10.3.1","jsdoc":"^3.4.0","lru-cache":"^4.0.1","mocha":"^5.0.5","uglify-js":"^3.3.16"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","postinstall":"node ./postinstall.js"}}')},function(n,e,t){"use strict";t(90)},function(n,e,t){"use strict";t(91)},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.7.16
 * (c) 2014-2023 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({}),a=Array.isArray;function o(n){return null==n}function s(n){return null!=n}function i(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return"function"==typeof n}function p(n){return null!==n&&"object"==typeof n}var u=Object.prototype.toString;function d(n){return"[object Object]"===u.call(n)}function m(n){return"[object RegExp]"===u.call(n)}function f(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function h(n){return s(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function g(n){return null==n?"":Array.isArray(n)||d(n)&&n.toString===u?JSON.stringify(n,v,2):String(n)}function v(n,e){return e&&e.__v_isRef?e.value:e}function b(n){var e=parseFloat(n);return isNaN(e)?n:e}function y(n,e){for(var t=Object.create(null),r=n.split(","),a=0;a<r.length;a++)t[r[a]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}y("slot,component",!0);var x=y("key,ref,slot,slot-scope,is");function k(n,e){var t=n.length;if(t){if(e===n[t-1])return void(n.length=t-1);var r=n.indexOf(e);if(r>-1)return n.splice(r,1)}}var E=Object.prototype.hasOwnProperty;function w(n,e){return E.call(n,e)}function _(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var j=/-(\w)/g,A=_((function(n){return n.replace(j,(function(n,e){return e?e.toUpperCase():""}))})),R=_((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),S=/\B([A-Z])/g,C=_((function(n){return n.replace(S,"-$1").toLowerCase()}));var P=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function T(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function B(n,e){for(var t in e)n[t]=e[t];return n}function q(n){for(var e={},t=0;t<n.length;t++)n[t]&&B(e,n[t]);return e}function I(n,e,t){}var L=function(n,e,t){return!1},z=function(n){return n};function N(n,e){if(n===e)return!0;var t=p(n),r=p(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var a=Array.isArray(n),o=Array.isArray(e);if(a&&o)return n.length===e.length&&n.every((function(n,t){return N(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(a||o)return!1;var s=Object.keys(n),i=Object.keys(e);return s.length===i.length&&s.every((function(t){return N(n[t],e[t])}))}catch(n){return!1}}function O(n,e){for(var t=0;t<n.length;t++)if(N(n[t],e))return t;return-1}function M(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function D(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var $=["component","directive","filter"],U=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:L,isReservedAttr:L,isUnknownElement:L,getTagNamespace:I,parsePlatformTagName:z,mustUseProp:L,async:!0,_lifecycleHooks:U},V=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function W(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var J=new RegExp("[^".concat(V.source,".$_\\d]"));var G="__proto__"in{},Q="undefined"!=typeof window,Z=Q&&window.navigator.userAgent.toLowerCase(),K=Z&&/msie|trident/.test(Z),X=Z&&Z.indexOf("msie 9.0")>0,Y=Z&&Z.indexOf("edge/")>0;Z&&Z.indexOf("android");var nn=Z&&/iphone|ipad|ipod|ios/.test(Z);Z&&/chrome\/\d+/.test(Z),Z&&/phantomjs/.test(Z);var en,tn=Z&&Z.match(/firefox\/(\d+)/),rn={}.watch,an=!1;if(Q)try{var on={};Object.defineProperty(on,"passive",{get:function(){an=!0}}),window.addEventListener("test-passive",null,on)}catch(n){}var sn=function(){return void 0===en&&(en=!Q&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),en},ln=Q&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function cn(n){return"function"==typeof n&&/native code/.test(n.toString())}var pn,un="undefined"!=typeof Symbol&&cn(Symbol)&&"undefined"!=typeof Reflect&&cn(Reflect.ownKeys);pn="undefined"!=typeof Set&&cn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var dn=null;function mn(n){void 0===n&&(n=null),n||dn&&dn._scope.off(),dn=n,n&&n._scope.on()}var fn=function(){function n(n,e,t,r,a,o,s,i){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=a,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=s,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=i,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),hn=function(n){void 0===n&&(n="");var e=new fn;return e.text=n,e.isComment=!0,e};function gn(n){return new fn(void 0,void 0,void 0,String(n))}function vn(n){var e=new fn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}"function"==typeof SuppressedError&&SuppressedError;var bn=0,yn=[],xn=function(){function n(){this._pending=!1,this.id=bn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){this.subs[this.subs.indexOf(n)]=null,this._pending||(this._pending=!0,yn.push(this))},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.filter((function(n){return n}));for(var t=0,r=e.length;t<r;t++){0,e[t].update()}},n}();xn.target=null;var kn=[];function En(n){kn.push(n),xn.target=n}function wn(){kn.pop(),xn.target=kn[kn.length-1]}var _n=Array.prototype,jn=Object.create(_n);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=_n[n];W(jn,n,(function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var a,o=e.apply(this,t),s=this.__ob__;switch(n){case"push":case"unshift":a=t;break;case"splice":a=t.slice(2)}return a&&s.observeArray(a),s.dep.notify(),o}))}));var An=Object.getOwnPropertyNames(jn),Rn={},Sn=!0;function Cn(n){Sn=n}var Pn={notify:I,depend:I,addSub:I,removeSub:I},Tn=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?Pn:new xn,this.vmCount=0,W(n,"__ob__",this),a(n)){if(!t)if(G)n.__proto__=jn;else for(var r=0,o=An.length;r<o;r++){W(n,i=An[r],jn[i])}e||this.observeArray(n)}else{var s=Object.keys(n);for(r=0;r<s.length;r++){var i;qn(n,i=s[r],Rn,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)Bn(n[e],!1,this.mock)},n}();function Bn(n,e,t){return n&&w(n,"__ob__")&&n.__ob__ instanceof Tn?n.__ob__:!Sn||!t&&sn()||!a(n)&&!d(n)||!Object.isExtensible(n)||n.__v_skip||Dn(n)||n instanceof fn?void 0:new Tn(n,e,t)}function qn(n,e,t,r,o,s,i){void 0===i&&(i=!1);var l=new xn,c=Object.getOwnPropertyDescriptor(n,e);if(!c||!1!==c.configurable){var p=c&&c.get,u=c&&c.set;p&&!u||t!==Rn&&2!==arguments.length||(t=n[e]);var d=o?t&&t.__ob__:Bn(t,!1,s);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=p?p.call(n):t;return xn.target&&(l.depend(),d&&(d.dep.depend(),a(e)&&zn(e))),Dn(e)&&!o?e.value:e},set:function(e){var r=p?p.call(n):t;if(D(r,e)){if(u)u.call(n,e);else{if(p)return;if(!o&&Dn(r)&&!Dn(e))return void(r.value=e);t=e}d=o?e&&e.__ob__:Bn(e,!1,s),l.notify()}}}),l}}function In(n,e,t){if(!Mn(n)){var r=n.__ob__;return a(n)&&f(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),r&&!r.shallow&&r.mock&&Bn(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||r&&r.vmCount?t:r?(qn(r.value,e,t,void 0,r.shallow,r.mock),r.dep.notify(),t):(n[e]=t,t)}}function Ln(n,e){if(a(n)&&f(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||Mn(n)||w(n,e)&&(delete n[e],t&&t.dep.notify())}}function zn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),a(e)&&zn(e)}function Nn(n){return On(n,!0),W(n,"__v_isShallow",!0),n}function On(n,e){if(!Mn(n)){Bn(n,e,sn());0}}function Mn(n){return!(!n||!n.__v_isReadonly)}function Dn(n){return!(!n||!0!==n.__v_isRef)}function $n(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if(Dn(n))return n.value;var r=n&&n.__ob__;return r&&r.dep.depend(),n},set:function(n){var r=e[t];Dn(r)&&!Dn(n)?r.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Un;var Fn=function(){function n(n){void 0===n&&(n=!1),this.detached=n,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Un,!n&&Un&&(this.index=(Un.scopes||(Un.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=Un;try{return Un=this,n()}finally{Un=e}}else 0},n.prototype.on=function(){Un=this},n.prototype.off=function(){Un=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!n){var r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.parent=void 0,this.active=!1}},n}();function Vn(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Hn=_((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function Wn(n,e){function t(){var n=t.fns;if(!a(n))return Se(n,null,arguments,e,"v-on handler");for(var r=n.slice(),o=0;o<r.length;o++)Se(r[o],null,arguments,e,"v-on handler")}return t.fns=n,t}function Jn(n,e,t,r,a,s){var l,c,p,u;for(l in n)c=n[l],p=e[l],u=Hn(l),o(c)||(o(p)?(o(c.fns)&&(c=n[l]=Wn(c,s)),i(u.once)&&(c=n[l]=a(u.name,c,u.capture)),t(u.name,c,u.capture,u.passive,u.params)):c!==p&&(p.fns=c,n[l]=p));for(l in e)o(n[l])&&r((u=Hn(l)).name,e[l],u.capture)}function Gn(n,e,t){var r;n instanceof fn&&(n=n.data.hook||(n.data.hook={}));var a=n[e];function l(){t.apply(this,arguments),k(r.fns,l)}o(a)?r=Wn([l]):s(a.fns)&&i(a.merged)?(r=a).fns.push(l):r=Wn([a,l]),r.merged=!0,n[e]=r}function Qn(n,e,t,r,a){if(s(e)){if(w(e,t))return n[t]=e[t],a||delete e[t],!0;if(w(e,r))return n[t]=e[r],a||delete e[r],!0}return!1}function Zn(n){return l(n)?[gn(n)]:a(n)?function n(e,t){var r,c,p,u,d=[];for(r=0;r<e.length;r++)o(c=e[r])||"boolean"==typeof c||(p=d.length-1,u=d[p],a(c)?c.length>0&&(Kn((c=n(c,"".concat(t||"","_").concat(r)))[0])&&Kn(u)&&(d[p]=gn(u.text+c[0].text),c.shift()),d.push.apply(d,c)):l(c)?Kn(u)?d[p]=gn(u.text+c):""!==c&&d.push(gn(c)):Kn(c)&&Kn(u)?d[p]=gn(u.text+c.text):(i(e._isVList)&&s(c.tag)&&o(c.key)&&s(t)&&(c.key="__vlist".concat(t,"_").concat(r,"__")),d.push(c)));return d}(n):void 0}function Kn(n){return s(n)&&s(n.text)&&!1===n.isComment}function Xn(n,e){var t,r,o,i,l=null;if(a(n)||"string"==typeof n)for(l=new Array(n.length),t=0,r=n.length;t<r;t++)l[t]=e(n[t],t);else if("number"==typeof n)for(l=new Array(n),t=0;t<n;t++)l[t]=e(t+1,t);else if(p(n))if(un&&n[Symbol.iterator]){l=[];for(var c=n[Symbol.iterator](),u=c.next();!u.done;)l.push(e(u.value,l.length)),u=c.next()}else for(o=Object.keys(n),l=new Array(o.length),t=0,r=o.length;t<r;t++)i=o[t],l[t]=e(n[i],i,t);return s(l)||(l=[]),l._isVList=!0,l}function Yn(n,e,t,r){var a,o=this.$scopedSlots[n];o?(t=t||{},r&&(t=B(B({},r),t)),a=o(t)||(c(e)?e():e)):a=this.$slots[n]||(c(e)?e():e);var s=t&&t.slot;return s?this.$createElement("template",{slot:s},a):a}function ne(n){return Tt(this.$options,"filters",n,!0)||z}function ee(n,e){return a(n)?-1===n.indexOf(e):n!==e}function te(n,e,t,r,a){var o=F.keyCodes[e]||t;return a&&r&&!F.keyCodes[e]?ee(a,r):o?ee(o,n):r?C(r)!==e:void 0===n}function re(n,e,t,r,o){if(t)if(p(t)){a(t)&&(t=q(t));var s=void 0,i=function(a){if("class"===a||"style"===a||x(a))s=n;else{var i=n.attrs&&n.attrs.type;s=r||F.mustUseProp(e,i,a)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=A(a),c=C(a);l in s||c in s||(s[a]=t[a],o&&((n.on||(n.on={}))["update:".concat(a)]=function(n){t[a]=n}))};for(var l in t)i(l)}else;return n}function ae(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||se(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),r}function oe(n,e,t){return se(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function se(n,e,t){if(a(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&ie(n[r],"".concat(e,"_").concat(r),t);else ie(n,e,t)}function ie(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function le(n,e){if(e)if(d(e)){var t=n.on=n.on?B({},n.on):{};for(var r in e){var a=t[r],o=e[r];t[r]=a?[].concat(a,o):o}}else;return n}function ce(n,e,t,r){e=e||{$stable:!t};for(var o=0;o<n.length;o++){var s=n[o];a(s)?ce(s,e,t):s&&(s.proxy&&(s.fn.proxy=!0),e[s.key]=s.fn)}return r&&(e.$key=r),e}function pe(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function ue(n,e){return"string"==typeof n?e+n:n}function de(n){n._o=oe,n._n=b,n._s=g,n._l=Xn,n._t=Yn,n._q=N,n._i=O,n._m=ae,n._f=ne,n._k=te,n._b=re,n._v=gn,n._e=hn,n._u=ce,n._g=le,n._d=pe,n._p=ue}function me(n,e){if(!n||!n.length)return{};for(var t={},r=0,a=n.length;r<a;r++){var o=n[r],s=o.data;if(s&&s.attrs&&s.attrs.slot&&delete s.attrs.slot,o.context!==e&&o.fnContext!==e||!s||null==s.slot)(t.default||(t.default=[])).push(o);else{var i=s.slot,l=t[i]||(t[i]=[]);"template"===o.tag?l.push.apply(l,o.children||[]):l.push(o)}}for(var c in t)t[c].every(fe)&&delete t[c];return t}function fe(n){return n.isComment&&!n.asyncFactory||" "===n.text}function he(n){return n.isComment&&n.asyncFactory}function ge(n,e,t,a){var o,s=Object.keys(t).length>0,i=e?!!e.$stable:!s,l=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(i&&a&&a!==r&&l===a.$key&&!s&&!a.$hasNormal)return a;for(var c in o={},e)e[c]&&"$"!==c[0]&&(o[c]=ve(n,t,c,e[c]))}else o={};for(var p in t)p in o||(o[p]=be(t,p));return e&&Object.isExtensible(e)&&(e._normalized=o),W(o,"$stable",i),W(o,"$key",l),W(o,"$hasNormal",s),o}function ve(n,e,t,r){var o=function(){var e=dn;mn(n);var t=arguments.length?r.apply(null,arguments):r({}),o=(t=t&&"object"==typeof t&&!a(t)?[t]:Zn(t))&&t[0];return mn(e),t&&(!o||1===t.length&&o.isComment&&!he(o))?void 0:t};return r.proxy&&Object.defineProperty(e,t,{get:o,enumerable:!0,configurable:!0}),o}function be(n,e){return function(){return n[e]}}function ye(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};W(e,"_v_attr_proxy",!0),xe(e,n.$attrs,r,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||xe(n._listenersProxy={},n.$listeners,r,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||Ee(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:P(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return $n(n,e,t)}))}}}function xe(n,e,t,r,a){var o=!1;for(var s in e)s in n?e[s]!==t[s]&&(o=!0):(o=!0,ke(n,s,r,a));for(var s in n)s in e||(o=!0,delete n[s]);return o}function ke(n,e,t,r){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[r][e]}})}function Ee(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var we=null;function _e(n,e){return(n.__esModule||un&&"Module"===n[Symbol.toStringTag])&&(n=n.default),p(n)?e.extend(n):n}function je(n){if(a(n))for(var e=0;e<n.length;e++){var t=n[e];if(s(t)&&(s(t.componentOptions)||he(t)))return t}}function Ae(n,e,t,r,u,d){return(a(t)||l(t))&&(u=r,r=t,t=void 0),i(d)&&(u=2),function(n,e,t,r,l){if(s(t)&&s(t.__ob__))return hn();s(t)&&s(t.is)&&(e=t.is);if(!e)return hn();0;a(r)&&c(r[0])&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===l?r=Zn(r):1===l&&(r=function(n){for(var e=0;e<n.length;e++)if(a(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var u,d;if("string"==typeof e){var m=void 0;d=n.$vnode&&n.$vnode.ns||F.getTagNamespace(e),u=F.isReservedTag(e)?new fn(F.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!s(m=Tt(n.$options,"components",e))?new fn(e,t,r,void 0,void 0,n):kt(m,t,n,r,e)}else u=kt(e,t,n,r);return a(u)?u:s(u)?(s(d)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(s(e.children))for(var a=0,l=e.children.length;a<l;a++){var c=e.children[a];s(c.tag)&&(o(c.ns)||i(r)&&"svg"!==c.tag)&&n(c,t,r)}}(u,d),s(t)&&function(n){p(n.style)&&Fe(n.style);p(n.class)&&Fe(n.class)}(t),u):hn()}(n,e,t,r,u)}function Re(n,e,t){En();try{if(e)for(var r=e;r=r.$parent;){var a=r.$options.errorCaptured;if(a)for(var o=0;o<a.length;o++)try{if(!1===a[o].call(r,n,e,t))return}catch(n){Ce(n,r,"errorCaptured hook")}}Ce(n,e,t)}finally{wn()}}function Se(n,e,t,r,a){var o;try{(o=t?n.apply(e,t):n.call(e))&&!o._isVue&&h(o)&&!o._handled&&(o.catch((function(n){return Re(n,r,a+" (Promise/async)")})),o._handled=!0)}catch(n){Re(n,r,a)}return o}function Ce(n,e,t){if(F.errorHandler)try{return F.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Pe(e,null,"config.errorHandler")}Pe(n,e,t)}function Pe(n,e,t){if(!Q||"undefined"==typeof console)throw n;console.error(n)}var Te,Be=!1,qe=[],Ie=!1;function Le(){Ie=!1;var n=qe.slice(0);qe.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&cn(Promise)){var ze=Promise.resolve();Te=function(){ze.then(Le),nn&&setTimeout(I)},Be=!0}else if(K||"undefined"==typeof MutationObserver||!cn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Te="undefined"!=typeof setImmediate&&cn(setImmediate)?function(){setImmediate(Le)}:function(){setTimeout(Le,0)};else{var Ne=1,Oe=new MutationObserver(Le),Me=document.createTextNode(String(Ne));Oe.observe(Me,{characterData:!0}),Te=function(){Ne=(Ne+1)%2,Me.data=String(Ne)},Be=!0}function De(n,e){var t;if(qe.push((function(){if(n)try{n.call(e)}catch(n){Re(n,e,"nextTick")}else t&&t(e)})),Ie||(Ie=!0,Te()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function $e(n){return function(e,t){if(void 0===t&&(t=dn),t)return function(n,e,t){var r=n.$options;r[e]=Rt(r[e],t)}(t,n,e)}}$e("beforeMount"),$e("mounted"),$e("beforeUpdate"),$e("updated"),$e("beforeDestroy"),$e("destroyed"),$e("activated"),$e("deactivated"),$e("serverPrefetch"),$e("renderTracked"),$e("renderTriggered"),$e("errorCaptured");var Ue=new pn;function Fe(n){return function n(e,t){var r,o,s=a(e);if(!s&&!p(e)||e.__v_skip||Object.isFrozen(e)||e instanceof fn)return;if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(s)for(r=e.length;r--;)n(e[r],t);else if(Dn(e))n(e.value,t);else for(o=Object.keys(e),r=o.length;r--;)n(e[o[r]],t)}(n,Ue),Ue.clear(),n}var Ve,He=0,We=function(){function n(n,e,t,r,a){var o,s;o=this,void 0===(s=Un&&!Un._vm?Un:n?n._scope:void 0)&&(s=Un),s&&s.active&&s.effects.push(o),(this.vm=n)&&a&&(n._watcher=this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++He,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new pn,this.newDepIds=new pn,this.expression="",c(e)?this.getter=e:(this.getter=function(n){if(!J.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=I)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;En(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Re(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Fe(n),wn(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():mt(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||p(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Se(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&k(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function Je(n,e){Ve.$on(n,e)}function Ge(n,e){Ve.$off(n,e)}function Qe(n,e){var t=Ve;return function r(){var a=e.apply(null,arguments);null!==a&&t.$off(n,r)}}function Ze(n,e,t){Ve=n,Jn(e,t||{},Je,Ge,Qe,n),Ve=void 0}var Ke=null;function Xe(n){var e=Ke;return Ke=n,function(){Ke=e}}function Ye(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function nt(n,e){if(e){if(n._directInactive=!1,Ye(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)nt(n.$children[t]);et(n,"activated")}}function et(n,e,t,r){void 0===r&&(r=!0),En();var a=dn,o=Un;r&&mn(n);var s=n.$options[e],i="".concat(e," hook");if(s)for(var l=0,c=s.length;l<c;l++)Se(s[l],n,t||null,n,i);n._hasHookEvent&&n.$emit("hook:"+e),r&&(mn(a),o&&o.on()),wn()}var tt=[],rt=[],at={},ot=!1,st=!1,it=0;var lt=0,ct=Date.now;if(Q&&!K){var pt=window.performance;pt&&"function"==typeof pt.now&&ct()>document.createEvent("Event").timeStamp&&(ct=function(){return pt.now()})}var ut=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function dt(){var n,e;for(lt=ct(),st=!0,tt.sort(ut),it=0;it<tt.length;it++)(n=tt[it]).before&&n.before(),e=n.id,at[e]=null,n.run();var t=rt.slice(),r=tt.slice();it=tt.length=rt.length=0,at={},ot=st=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,nt(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r&&r._watcher===t&&r._isMounted&&!r._isDestroyed&&et(r,"updated")}}(r),function(){for(var n=0;n<yn.length;n++){var e=yn[n];e.subs=e.subs.filter((function(n){return n})),e._pending=!1}yn.length=0}(),ln&&F.devtools&&ln.emit("flush")}function mt(n){var e=n.id;if(null==at[e]&&(n!==xn.target||!n.noRecurse)){if(at[e]=!0,st){for(var t=tt.length-1;t>it&&tt[t].id>n.id;)t--;tt.splice(t+1,0,n)}else tt.push(n);ot||(ot=!0,De(dt))}}function ft(n,e){if(n){for(var t=Object.create(null),r=un?Reflect.ownKeys(n):Object.keys(n),a=0;a<r.length;a++){var o=r[a];if("__ob__"!==o){var s=n[o].from;if(s in e._provided)t[o]=e._provided[s];else if("default"in n[o]){var i=n[o].default;t[o]=c(i)?i.call(e):i}else 0}}return t}}function ht(n,e,t,o,s){var l,c=this,p=s.options;w(o,"_uid")?(l=Object.create(o))._original=o:(l=o,o=o._original);var u=i(p._compiled),d=!u;this.data=n,this.props=e,this.children=t,this.parent=o,this.listeners=n.on||r,this.injections=ft(p.inject,o),this.slots=function(){return c.$slots||ge(o,n.scopedSlots,c.$slots=me(t,o)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ge(o,n.scopedSlots,this.slots())}}),u&&(this.$options=p,this.$slots=this.slots(),this.$scopedSlots=ge(o,n.scopedSlots,this.$slots)),p._scopeId?this._c=function(n,e,t,r){var s=Ae(l,n,e,t,r,d);return s&&!a(s)&&(s.fnScopeId=p._scopeId,s.fnContext=o),s}:this._c=function(n,e,t,r){return Ae(l,n,e,t,r,d)}}function gt(n,e,t,r,a){var o=vn(n);return o.fnContext=t,o.fnOptions=r,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function vt(n,e){for(var t in e)n[A(t)]=e[t]}function bt(n){return n.name||n.__name||n._componentTag}de(ht.prototype);var yt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;yt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;s(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ke)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,a,o){var s=a.data.scopedSlots,i=n.$scopedSlots,l=!!(s&&!s.$stable||i!==r&&!i.$stable||s&&n.$scopedSlots.$key!==s.$key||!s&&n.$scopedSlots.$key),c=!!(o||n.$options._renderChildren||l),p=n.$vnode;n.$options._parentVnode=a,n.$vnode=a,n._vnode&&(n._vnode.parent=a),n.$options._renderChildren=o;var u=a.data.attrs||r;n._attrsProxy&&xe(n._attrsProxy,u,p.data&&p.data.attrs||r,n,"$attrs")&&(c=!0),n.$attrs=u,t=t||r;var d=n.$options._parentListeners;if(n._listenersProxy&&xe(n._listenersProxy,t,d||r,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,Ze(n,t,d),e&&n.$options.props){Cn(!1);for(var m=n._props,f=n.$options._propKeys||[],h=0;h<f.length;h++){var g=f[h],v=n.$options.props;m[g]=Bt(g,v,e,n)}Cn(!0),n.$options.propsData=e}c&&(n.$slots=me(o,a.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,et(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,rt.push(e)):nt(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Ye(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);et(e,"deactivated")}}(e,!0):e.$destroy())}},xt=Object.keys(yt);function kt(n,e,t,l,c){if(!o(n)){var u=t.$options._base;if(p(n)&&(n=u.extend(n)),"function"==typeof n){var d;if(o(n.cid)&&void 0===(n=function(n,e){if(i(n.error)&&s(n.errorComp))return n.errorComp;if(s(n.resolved))return n.resolved;var t=we;if(t&&s(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),i(n.loading)&&s(n.loadingComp))return n.loadingComp;if(t&&!s(n.owners)){var r=n.owners=[t],a=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return k(r,t)}));var u=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},d=M((function(t){n.resolved=_e(t,e),a?r.length=0:u(!0)})),m=M((function(e){s(n.errorComp)&&(n.error=!0,u(!0))})),f=n(d,m);return p(f)&&(h(f)?o(n.resolved)&&f.then(d,m):h(f.component)&&(f.component.then(d,m),s(f.error)&&(n.errorComp=_e(f.error,e)),s(f.loading)&&(n.loadingComp=_e(f.loading,e),0===f.delay?n.loading=!0:l=setTimeout((function(){l=null,o(n.resolved)&&o(n.error)&&(n.loading=!0,u(!1))}),f.delay||200)),s(f.timeout)&&(c=setTimeout((function(){c=null,o(n.resolved)&&m(null)}),f.timeout)))),a=!1,n.loading?n.loadingComp:n.resolved}}(d=n,u)))return function(n,e,t,r,a){var o=hn();return o.asyncFactory=n,o.asyncMeta={data:e,context:t,children:r,tag:a},o}(d,e,t,l,c);e=e||{},Wt(n),s(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var o=e.on||(e.on={}),i=o[r],l=e.model.callback;s(i)?(a(i)?-1===i.indexOf(l):i!==l)&&(o[r]=[l].concat(i)):o[r]=l}(n.options,e);var m=function(n,e,t){var r=e.options.props;if(!o(r)){var a={},i=n.attrs,l=n.props;if(s(i)||s(l))for(var c in r){var p=C(c);Qn(a,l,c,p,!0)||Qn(a,i,c,p,!1)}return a}}(e,n);if(i(n.options.functional))return function(n,e,t,o,i){var l=n.options,c={},p=l.props;if(s(p))for(var u in p)c[u]=Bt(u,p,e||r);else s(t.attrs)&&vt(c,t.attrs),s(t.props)&&vt(c,t.props);var d=new ht(t,c,i,o,n),m=l.render.call(null,d._c,d);if(m instanceof fn)return gt(m,t,d.parent,l,d);if(a(m)){for(var f=Zn(m)||[],h=new Array(f.length),g=0;g<f.length;g++)h[g]=gt(f[g],t,d.parent,l,d);return h}}(n,m,e,t,l);var f=e.on;if(e.on=e.nativeOn,i(n.options.abstract)){var g=e.slot;e={},g&&(e.slot=g)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<xt.length;t++){var r=xt[t],a=e[r],o=yt[r];a===o||a&&a._merged||(e[r]=a?Et(o,a):o)}}(e);var v=bt(n.options)||c;return new fn("vue-component-".concat(n.cid).concat(v?"-".concat(v):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:m,listeners:f,tag:c,children:l},d)}}}function Et(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}var wt=I,_t=F.optionMergeStrategies;function jt(n,e,t){if(void 0===t&&(t=!0),!e)return n;for(var r,a,o,s=un?Reflect.ownKeys(e):Object.keys(e),i=0;i<s.length;i++)"__ob__"!==(r=s[i])&&(a=n[r],o=e[r],t&&w(n,r)?a!==o&&d(a)&&d(o)&&jt(a,o):In(n,r,o));return n}function At(n,e,t){return t?function(){var r=c(e)?e.call(t,t):e,a=c(n)?n.call(t,t):n;return r?jt(r,a):a}:e?n?function(){return jt(c(e)?e.call(this,this):e,c(n)?n.call(this,this):n)}:e:n}function Rt(n,e){var t=e?n?n.concat(e):a(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function St(n,e,t,r){var a=Object.create(n||null);return e?B(a,e):a}_t.data=function(n,e,t){return t?At(n,e,t):e&&"function"!=typeof e?n:At(n,e)},U.forEach((function(n){_t[n]=Rt})),$.forEach((function(n){_t[n+"s"]=St})),_t.watch=function(n,e,t,r){if(n===rn&&(n=void 0),e===rn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var o={};for(var s in B(o,n),e){var i=o[s],l=e[s];i&&!a(i)&&(i=[i]),o[s]=i?i.concat(l):a(l)?l:[l]}return o},_t.props=_t.methods=_t.inject=_t.computed=function(n,e,t,r){if(!n)return e;var a=Object.create(null);return B(a,n),e&&B(a,e),a},_t.provide=function(n,e){return n?function(){var t=Object.create(null);return jt(t,c(n)?n.call(this):n),e&&jt(t,c(e)?e.call(this):e,!1),t}:e};var Ct=function(n,e){return void 0===e?n:e};function Pt(n,e,t){if(c(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var r,o,s={};if(a(t))for(r=t.length;r--;)"string"==typeof(o=t[r])&&(s[A(o)]={type:null});else if(d(t))for(var i in t)o=t[i],s[A(i)]=d(o)?o:{type:o};else 0;n.props=s}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(a(t))for(var o=0;o<t.length;o++)r[t[o]]={from:t[o]};else if(d(t))for(var s in t){var i=t[s];r[s]=d(i)?B({from:s},i):{from:i}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];c(r)&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=Pt(n,e.extends,t)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)n=Pt(n,e.mixins[r],t);var s,i={};for(s in n)l(s);for(s in e)w(n,s)||l(s);function l(r){var a=_t[r]||Ct;i[r]=a(n[r],e[r],t,r)}return i}function Tt(n,e,t,r){if("string"==typeof t){var a=n[e];if(w(a,t))return a[t];var o=A(t);if(w(a,o))return a[o];var s=R(o);return w(a,s)?a[s]:a[t]||a[o]||a[s]}}function Bt(n,e,t,r){var a=e[n],o=!w(t,n),s=t[n],i=zt(Boolean,a.type);if(i>-1)if(o&&!w(a,"default"))s=!1;else if(""===s||s===C(n)){var l=zt(String,a.type);(l<0||i<l)&&(s=!0)}if(void 0===s){s=function(n,e,t){if(!w(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return c(r)&&"Function"!==It(e.type)?r.call(n):r}(r,a,n);var p=Sn;Cn(!0),Bn(s),Cn(p)}return s}var qt=/^\s*function (\w+)/;function It(n){var e=n&&n.toString().match(qt);return e?e[1]:""}function Lt(n,e){return It(n)===It(e)}function zt(n,e){if(!a(e))return Lt(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Lt(e[t],n))return t;return-1}var Nt={enumerable:!0,configurable:!0,get:I,set:I};function Ot(n,e,t){Nt.get=function(){return this[e][t]},Nt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,Nt)}function Mt(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props=Nn({}),a=n.$options._propKeys=[];n.$parent&&Cn(!1);var o=function(o){a.push(o);var s=Bt(o,e,t,n);qn(r,o,s,void 0,!0),o in n||Ot(n,"_props",o)};for(var s in e)o(s);Cn(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var r=n._setupContext=ye(n);mn(n),En();var a=Se(t,null,[n._props||Nn({}),r],n,"setup");if(wn(),mn(),c(a))e.render=a;else if(p(a))if(n._setupState=a,a.__sfc){var o=n._setupProxy={};for(var s in a)"__sfc"!==s&&$n(o,a,s)}else for(var s in a)H(s)||$n(n,a,s);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?I:P(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;d(e=n._data=c(e)?function(n,e){En();try{return n.call(e,e)}catch(n){return Re(n,e,"data()"),{}}finally{wn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,a=(n.$options.methods,t.length);for(;a--;){var o=t[a];0,r&&w(r,o)||H(o)||Ot(n,"_data",o)}var s=Bn(e);s&&s.vmCount++}(n);else{var t=Bn(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=sn();for(var a in e){var o=e[a],s=c(o)?o:o.get;0,r||(t[a]=new We(n,s||I,I,Dt)),a in n||$t(n,a,o)}}(n,e.computed),e.watch&&e.watch!==rn&&function(n,e){for(var t in e){var r=e[t];if(a(r))for(var o=0;o<r.length;o++)Vt(n,t,r[o]);else Vt(n,t,r)}}(n,e.watch)}var Dt={lazy:!0};function $t(n,e,t){var r=!sn();c(t)?(Nt.get=r?Ut(e):Ft(t),Nt.set=I):(Nt.get=t.get?r&&!1!==t.cache?Ut(e):Ft(t.get):I,Nt.set=t.set||I),Object.defineProperty(n,e,Nt)}function Ut(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),xn.target&&e.depend(),e.value}}function Ft(n){return function(){return n.call(this,this)}}function Vt(n,e,t,r){return d(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Ht=0;function Wt(n){var e=n.options;if(n.super){var t=Wt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var a in t)t[a]!==r[a]&&(e||(e={}),e[a]=t[a]);return e}(n);r&&B(n.extendOptions,r),(e=n.options=Pt(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Jt(n){this._init(n)}function Gt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,a=n._Ctor||(n._Ctor={});if(a[r])return a[r];var o=bt(n)||bt(t.options);var s=function(n){this._init(n)};return(s.prototype=Object.create(t.prototype)).constructor=s,s.cid=e++,s.options=Pt(t.options,n),s.super=t,s.options.props&&function(n){var e=n.options.props;for(var t in e)Ot(n.prototype,"_props",t)}(s),s.options.computed&&function(n){var e=n.options.computed;for(var t in e)$t(n.prototype,t,e[t])}(s),s.extend=t.extend,s.mixin=t.mixin,s.use=t.use,$.forEach((function(n){s[n]=t[n]})),o&&(s.options.components[o]=s),s.superOptions=t.options,s.extendOptions=n,s.sealedOptions=B({},s.options),a[r]=s,s}}function Qt(n){return n&&(bt(n.Ctor.options)||n.tag)}function Zt(n,e){return a(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!m(n)&&n.test(e)}function Kt(n,e){var t=n.cache,r=n.keys,a=n._vnode,o=n.$vnode;for(var s in t){var i=t[s];if(i){var l=i.name;l&&!e(l)&&Xt(t,s,r,a)}}o.componentOptions.children=void 0}function Xt(n,e,t,r){var a=n[e];!a||r&&a.tag===r.tag||a.componentInstance.$destroy(),n[e]=null,k(t,e)}Jt.prototype._init=function(n){var e=this;e._uid=Ht++,e._isVue=!0,e.__v_skip=!0,e._scope=new Fn(!0),e._scope.parent=void 0,e._scope._vm=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var a=r.componentOptions;t.propsData=a.propsData,t._parentListeners=a.listeners,t._renderChildren=a.children,t._componentTag=a.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Pt(Wt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Ze(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,a=t&&t.context;n.$slots=me(e._renderChildren,a),n.$scopedSlots=t?ge(n.$parent,t.data.scopedSlots,n.$slots):r,n._c=function(e,t,r,a){return Ae(n,e,t,r,a,!1)},n.$createElement=function(e,t,r,a){return Ae(n,e,t,r,a,!0)};var o=t&&t.data;qn(n,"$attrs",o&&o.attrs||r,null,!0),qn(n,"$listeners",e._parentListeners||r,null,!0)}(e),et(e,"beforeCreate",void 0,!1),function(n){var e=ft(n.$options.inject,n);e&&(Cn(!1),Object.keys(e).forEach((function(t){qn(n,t,e[t])})),Cn(!0))}(e),Mt(e),function(n){var e=n.$options.provide;if(e){var t=c(e)?e.call(n):e;if(!p(t))return;for(var r=Vn(n),a=un?Reflect.ownKeys(t):Object.keys(t),o=0;o<a.length;o++){var s=a[o];Object.defineProperty(r,s,Object.getOwnPropertyDescriptor(t,s))}}}(e),et(e,"created"),e.$options.el&&e.$mount(e.$options.el)},function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=In,n.prototype.$delete=Ln,n.prototype.$watch=function(n,e,t){if(d(e))return Vt(this,n,e,t);(t=t||{}).user=!0;var r=new We(this,n,e,t);if(t.immediate){var a='callback for immediate watcher "'.concat(r.expression,'"');En(),Se(e,this,[r.value],this,a),wn()}return function(){r.teardown()}}}(Jt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(a(n))for(var o=0,s=n.length;o<s;o++)r.$on(n[o],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(a(n)){for(var r=0,o=n.length;r<o;r++)t.$off(n[r],e);return t}var s,i=t._events[n];if(!i)return t;if(!e)return t._events[n]=null,t;for(var l=i.length;l--;)if((s=i[l])===e||s.fn===e){i.splice(l,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?T(t):t;for(var r=T(arguments,1),a='event handler for "'.concat(n,'"'),o=0,s=t.length;o<s;o++)Se(t[o],e,r,e,a)}return e}}(Jt),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,a=t._vnode,o=Xe(t);t._vnode=n,t.$el=a?t.__patch__(a,n):t.__patch__(t.$el,n,e,!1),o(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var s=t;s&&s.$vnode&&s.$parent&&s.$vnode===s.$parent._vnode;)s.$parent.$el=s.$el,s=s.$parent},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){et(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||k(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),et(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Jt),function(n){de(n.prototype),n.prototype.$nextTick=function(n){return De(n,this)},n.prototype._render=function(){var n=this,e=n.$options,t=e.render,r=e._parentVnode;r&&n._isMounted&&(n.$scopedSlots=ge(n.$parent,r.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&Ee(n._slotsProxy,n.$scopedSlots)),n.$vnode=r;var o,s=dn,i=we;try{mn(n),we=n,o=t.call(n._renderProxy,n.$createElement)}catch(e){Re(e,n,"render"),o=n._vnode}finally{we=i,mn(s)}return a(o)&&1===o.length&&(o=o[0]),o instanceof fn||(o=hn()),o.parent=r,o}}(Jt);var Yt=[String,RegExp,Array],nr={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Yt,exclude:Yt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var a=t.tag,o=t.componentInstance,s=t.componentOptions;n[r]={name:Qt(s),tag:a,componentInstance:o},e.push(r),this.max&&e.length>parseInt(this.max)&&Xt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Xt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Kt(n,(function(n){return Zt(e,n)}))})),this.$watch("exclude",(function(e){Kt(n,(function(n){return!Zt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=je(n),t=e&&e.componentOptions;if(t){var r=Qt(t),a=this.include,o=this.exclude;if(a&&(!r||!Zt(a,r))||o&&r&&Zt(o,r))return e;var s=this.cache,i=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;s[l]?(e.componentInstance=s[l].componentInstance,k(i,l),i.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return F}};Object.defineProperty(n,"config",e),n.util={warn:wt,extend:B,mergeOptions:Pt,defineReactive:qn},n.set=In,n.delete=Ln,n.nextTick=De,n.observable=function(n){return Bn(n),n},n.options=Object.create(null),$.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,B(n.options.components,nr),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=T(arguments,1);return t.unshift(this),c(n.install)?n.install.apply(n,t):c(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Pt(this.options,n),this}}(n),Gt(n),function(n){$.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&d(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&c(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Jt),Object.defineProperty(Jt.prototype,"$isServer",{get:sn}),Object.defineProperty(Jt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Jt,"FunctionalRenderContext",{value:ht}),Jt.version="2.7.16";var er=y("style,class"),tr=y("input,textarea,option,select,progress"),rr=y("contenteditable,draggable,spellcheck"),ar=y("events,caret,typing,plaintext-only"),or=y("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),sr="http://www.w3.org/1999/xlink",ir=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},lr=function(n){return ir(n)?n.slice(6,n.length):""},cr=function(n){return null==n||!1===n};function pr(n){for(var e=n.data,t=n,r=n;s(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=ur(r.data,e));for(;s(t=t.parent);)t&&t.data&&(e=ur(e,t.data));return function(n,e){if(s(n)||s(e))return dr(n,mr(e));return""}(e.staticClass,e.class)}function ur(n,e){return{staticClass:dr(n.staticClass,e.staticClass),class:s(n.class)?[n.class,e.class]:e.class}}function dr(n,e){return n?e?n+" "+e:n:e||""}function mr(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,a=n.length;r<a;r++)s(e=mr(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):p(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var fr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},hr=y("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),gr=y("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),vr=function(n){return hr(n)||gr(n)};var br=Object.create(null);var yr=y("text,number,password,search,email,tel,url");var xr=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(fr[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),kr={create:function(n,e){Er(e)},update:function(n,e){n.data.ref!==e.data.ref&&(Er(n,!0),Er(e))},destroy:function(n){Er(n,!0)}};function Er(n,e){var t=n.data.ref;if(s(t)){var r=n.context,o=n.componentInstance||n.elm,i=e?null:o,l=e?void 0:o;if(c(t))Se(t,r,[i],r,"template ref function");else{var p=n.data.refInFor,u="string"==typeof t||"number"==typeof t,d=Dn(t),m=r.$refs;if(u||d)if(p){var f=u?m[t]:t.value;e?a(f)&&k(f,o):a(f)?f.includes(o)||f.push(o):u?(m[t]=[o],wr(r,t,m[t])):t.value=[o]}else if(u){if(e&&m[t]!==o)return;m[t]=l,wr(r,t,i)}else if(d){if(e&&t.value!==o)return;t.value=i}else 0}}}function wr(n,e,t){var r=n._setupState;r&&w(r,e)&&(Dn(r[e])?r[e].value=t:r[e]=t)}var _r=new fn("",{},[]),jr=["create","activate","update","remove","destroy"];function Ar(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&s(n.data)===s(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=s(t=n.data)&&s(t=t.attrs)&&t.type,a=s(t=e.data)&&s(t=t.attrs)&&t.type;return r===a||yr(r)&&yr(a)}(n,e)||i(n.isAsyncPlaceholder)&&o(e.asyncFactory.error))}function Rr(n,e,t){var r,a,o={};for(r=e;r<=t;++r)s(a=n[r].key)&&(o[a]=r);return o}var Sr={create:Cr,update:Cr,destroy:function(n){Cr(n,_r)}};function Cr(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,a,o=n===_r,s=e===_r,i=Tr(n.data.directives,n.context),l=Tr(e.data.directives,e.context),c=[],p=[];for(t in l)r=i[t],a=l[t],r?(a.oldValue=r.value,a.oldArg=r.arg,qr(a,"update",e,n),a.def&&a.def.componentUpdated&&p.push(a)):(qr(a,"bind",e,n),a.def&&a.def.inserted&&c.push(a));if(c.length){var u=function(){for(var t=0;t<c.length;t++)qr(c[t],"inserted",e,n)};o?Gn(e,"insert",u):u()}p.length&&Gn(e,"postpatch",(function(){for(var t=0;t<p.length;t++)qr(p[t],"componentUpdated",e,n)}));if(!o)for(t in i)l[t]||qr(i[t],"unbind",n,n,s)}(n,e)}var Pr=Object.create(null);function Tr(n,e){var t,r,a=Object.create(null);if(!n)return a;for(t=0;t<n.length;t++){if((r=n[t]).modifiers||(r.modifiers=Pr),a[Br(r)]=r,e._setupState&&e._setupState.__sfc){var o=r.def||Tt(e,"_setupState","v-"+r.name);r.def="function"==typeof o?{bind:o,update:o}:o}r.def=r.def||Tt(e.$options,"directives",r.name)}return a}function Br(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function qr(n,e,t,r,a){var o=n.def&&n.def[e];if(o)try{o(t.elm,n,t,r,a)}catch(r){Re(r,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var Ir=[kr,Sr];function Lr(n,e){var t=e.componentOptions;if(!(s(t)&&!1===t.Ctor.options.inheritAttrs||o(n.data.attrs)&&o(e.data.attrs))){var r,a,l=e.elm,c=n.data.attrs||{},p=e.data.attrs||{};for(r in(s(p.__ob__)||i(p._v_attr_proxy))&&(p=e.data.attrs=B({},p)),p)a=p[r],c[r]!==a&&zr(l,r,a,e.data.pre);for(r in(K||Y)&&p.value!==c.value&&zr(l,"value",p.value),c)o(p[r])&&(ir(r)?l.removeAttributeNS(sr,lr(r)):rr(r)||l.removeAttribute(r))}}function zr(n,e,t,r){r||n.tagName.indexOf("-")>-1?Nr(n,e,t):or(e)?cr(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):rr(e)?n.setAttribute(e,function(n,e){return cr(e)||"false"===e?"false":"contenteditable"===n&&ar(e)?e:"true"}(e,t)):ir(e)?cr(t)?n.removeAttributeNS(sr,lr(e)):n.setAttributeNS(sr,e,t):Nr(n,e,t)}function Nr(n,e,t){if(cr(t))n.removeAttribute(e);else{if(K&&!X&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var Or={create:Lr,update:Lr};function Mr(n,e){var t=e.elm,r=e.data,a=n.data;if(!(o(r.staticClass)&&o(r.class)&&(o(a)||o(a.staticClass)&&o(a.class)))){var i=pr(e),l=t._transitionClasses;s(l)&&(i=dr(i,mr(l))),i!==t._prevClass&&(t.setAttribute("class",i),t._prevClass=i)}}var Dr,$r={create:Mr,update:Mr};function Ur(n,e,t){var r=Dr;return function a(){var o=e.apply(null,arguments);null!==o&&Hr(n,a,t,r)}}var Fr=Be&&!(tn&&Number(tn[1])<=53);function Vr(n,e,t,r){if(Fr){var a=lt,o=e;e=o._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=a||n.timeStamp<=0||n.target.ownerDocument!==document)return o.apply(this,arguments)}}Dr.addEventListener(n,e,an?{capture:t,passive:r}:t)}function Hr(n,e,t,r){(r||Dr).removeEventListener(n,e._wrapper||e,t)}function Wr(n,e){if(!o(n.data.on)||!o(e.data.on)){var t=e.data.on||{},r=n.data.on||{};Dr=e.elm||n.elm,function(n){if(s(n.__r)){var e=K?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}s(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Jn(t,r,Vr,Hr,Ur,e.context),Dr=void 0}}var Jr,Gr={create:Wr,update:Wr,destroy:function(n){return Wr(n,_r)}};function Qr(n,e){if(!o(n.data.domProps)||!o(e.data.domProps)){var t,r,a=e.elm,l=n.data.domProps||{},c=e.data.domProps||{};for(t in(s(c.__ob__)||i(c._v_attr_proxy))&&(c=e.data.domProps=B({},c)),l)t in c||(a[t]="");for(t in c){if(r=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===l[t])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===t&&"PROGRESS"!==a.tagName){a._value=r;var p=o(r)?"":String(r);Zr(a,p)&&(a.value=p)}else if("innerHTML"===t&&gr(a.tagName)&&o(a.innerHTML)){(Jr=Jr||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var u=Jr.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;u.firstChild;)a.appendChild(u.firstChild)}else if(r!==l[t])try{a[t]=r}catch(n){}}}}function Zr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(s(r)){if(r.number)return b(t)!==b(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Kr={create:Qr,update:Qr},Xr=_((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Yr(n){var e=na(n.style);return n.staticStyle?B(n.staticStyle,e):e}function na(n){return Array.isArray(n)?q(n):"string"==typeof n?Xr(n):n}var ea,ta=/^--/,ra=/\s*!important$/,aa=function(n,e,t){if(ta.test(e))n.style.setProperty(e,t);else if(ra.test(t))n.style.setProperty(C(e),t.replace(ra,""),"important");else{var r=sa(e);if(Array.isArray(t))for(var a=0,o=t.length;a<o;a++)n.style[r]=t[a];else n.style[r]=t}},oa=["Webkit","Moz","ms"],sa=_((function(n){if(ea=ea||document.createElement("div").style,"filter"!==(n=A(n))&&n in ea)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<oa.length;t++){var r=oa[t]+e;if(r in ea)return r}}));function ia(n,e){var t=e.data,r=n.data;if(!(o(t.staticStyle)&&o(t.style)&&o(r.staticStyle)&&o(r.style))){var a,i,l=e.elm,c=r.staticStyle,p=r.normalizedStyle||r.style||{},u=c||p,d=na(e.data.style)||{};e.data.normalizedStyle=s(d.__ob__)?B({},d):d;var m=function(n,e){var t,r={};if(e)for(var a=n;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(t=Yr(a.data))&&B(r,t);(t=Yr(n.data))&&B(r,t);for(var o=n;o=o.parent;)o.data&&(t=Yr(o.data))&&B(r,t);return r}(e,!0);for(i in u)o(m[i])&&aa(l,i,"");for(i in m)a=m[i],aa(l,i,null==a?"":a)}}var la={create:ia,update:ia},ca=/\s+/;function pa(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(ca).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function ua(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(ca).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function da(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&B(e,ma(n.name||"v")),B(e,n),e}return"string"==typeof n?ma(n):void 0}}var ma=_((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),fa=Q&&!X,ha="transition",ga="transitionend",va="animation",ba="animationend";fa&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ha="WebkitTransition",ga="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(va="WebkitAnimation",ba="webkitAnimationEnd"));var ya=Q?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function xa(n){ya((function(){ya(n)}))}function ka(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),pa(n,e))}function Ea(n,e){n._transitionClasses&&k(n._transitionClasses,e),ua(n,e)}function wa(n,e,t){var r=ja(n,e),a=r.type,o=r.timeout,s=r.propCount;if(!a)return t();var i="transition"===a?ga:ba,l=0,c=function(){n.removeEventListener(i,p),t()},p=function(e){e.target===n&&++l>=s&&c()};setTimeout((function(){l<s&&c()}),o+1),n.addEventListener(i,p)}var _a=/\b(transform|all)(,|$)/;function ja(n,e){var t,r=window.getComputedStyle(n),a=(r[ha+"Delay"]||"").split(", "),o=(r[ha+"Duration"]||"").split(", "),s=Aa(a,o),i=(r[va+"Delay"]||"").split(", "),l=(r[va+"Duration"]||"").split(", "),c=Aa(i,l),p=0,u=0;return"transition"===e?s>0&&(t="transition",p=s,u=o.length):"animation"===e?c>0&&(t="animation",p=c,u=l.length):u=(t=(p=Math.max(s,c))>0?s>c?"transition":"animation":null)?"transition"===t?o.length:l.length:0,{type:t,timeout:p,propCount:u,hasTransform:"transition"===t&&_a.test(r[ha+"Property"])}}function Aa(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return Ra(e)+Ra(n[t])})))}function Ra(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function Sa(n,e){var t=n.elm;s(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=da(n.data.transition);if(!o(r)&&!s(t._enterCb)&&1===t.nodeType){for(var a=r.css,i=r.type,l=r.enterClass,u=r.enterToClass,d=r.enterActiveClass,m=r.appearClass,f=r.appearToClass,h=r.appearActiveClass,g=r.beforeEnter,v=r.enter,y=r.afterEnter,x=r.enterCancelled,k=r.beforeAppear,E=r.appear,w=r.afterAppear,_=r.appearCancelled,j=r.duration,A=Ke,R=Ke.$vnode;R&&R.parent;)A=R.context,R=R.parent;var S=!A._isMounted||!n.isRootInsert;if(!S||E||""===E){var C=S&&m?m:l,P=S&&h?h:d,T=S&&f?f:u,B=S&&k||g,q=S&&c(E)?E:v,I=S&&w||y,L=S&&_||x,z=b(p(j)?j.enter:j);0;var N=!1!==a&&!X,O=Ta(q),D=t._enterCb=M((function(){N&&(Ea(t,T),Ea(t,P)),D.cancelled?(N&&Ea(t,C),L&&L(t)):I&&I(t),t._enterCb=null}));n.data.show||Gn(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),q&&q(t,D)})),B&&B(t),N&&(ka(t,C),ka(t,P),xa((function(){Ea(t,C),D.cancelled||(ka(t,T),O||(Pa(z)?setTimeout(D,z):wa(t,i,D)))}))),n.data.show&&(e&&e(),q&&q(t,D)),N||O||D()}}}function Ca(n,e){var t=n.elm;s(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=da(n.data.transition);if(o(r)||1!==t.nodeType)return e();if(!s(t._leaveCb)){var a=r.css,i=r.type,l=r.leaveClass,c=r.leaveToClass,u=r.leaveActiveClass,d=r.beforeLeave,m=r.leave,f=r.afterLeave,h=r.leaveCancelled,g=r.delayLeave,v=r.duration,y=!1!==a&&!X,x=Ta(m),k=b(p(v)?v.leave:v);0;var E=t._leaveCb=M((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(Ea(t,c),Ea(t,u)),E.cancelled?(y&&Ea(t,l),h&&h(t)):(e(),f&&f(t)),t._leaveCb=null}));g?g(w):w()}function w(){E.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),y&&(ka(t,l),ka(t,u),xa((function(){Ea(t,l),E.cancelled||(ka(t,c),x||(Pa(k)?setTimeout(E,k):wa(t,i,E)))}))),m&&m(t,E),y||x||E())}}function Pa(n){return"number"==typeof n&&!isNaN(n)}function Ta(n){if(o(n))return!1;var e=n.fns;return s(e)?Ta(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function Ba(n,e){!0!==e.data.show&&Sa(e)}var qa=function(n){var e,t,r={},c=n.modules,p=n.nodeOps;for(e=0;e<jr.length;++e)for(r[jr[e]]=[],t=0;t<c.length;++t)s(c[t][jr[e]])&&r[jr[e]].push(c[t][jr[e]]);function u(n){var e=p.parentNode(n);s(e)&&p.removeChild(e,n)}function d(n,e,t,a,o,l,c){if(s(n.elm)&&s(l)&&(n=l[c]=vn(n)),n.isRootInsert=!o,!function(n,e,t,a){var o=n.data;if(s(o)){var l=s(n.componentInstance)&&o.keepAlive;if(s(o=o.hook)&&s(o=o.init)&&o(n,!1),s(n.componentInstance))return m(n,e),f(t,n.elm,a),i(l)&&function(n,e,t,a){var o,i=n;for(;i.componentInstance;)if(i=i.componentInstance._vnode,s(o=i.data)&&s(o=o.transition)){for(o=0;o<r.activate.length;++o)r.activate[o](_r,i);e.push(i);break}f(t,n.elm,a)}(n,e,t,a),!0}}(n,e,t,a)){var u=n.data,d=n.children,g=n.tag;s(g)?(n.elm=n.ns?p.createElementNS(n.ns,g):p.createElement(g,n),b(n),h(n,d,e),s(u)&&v(n,e),f(t,n.elm,a)):i(n.isComment)?(n.elm=p.createComment(n.text),f(t,n.elm,a)):(n.elm=p.createTextNode(n.text),f(t,n.elm,a))}}function m(n,e){s(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,g(n)?(v(n,e),b(n)):(Er(n),e.push(n))}function f(n,e,t){s(n)&&(s(t)?p.parentNode(t)===n&&p.insertBefore(n,e,t):p.appendChild(n,e))}function h(n,e,t){if(a(e)){0;for(var r=0;r<e.length;++r)d(e[r],t,n.elm,null,!0,e,r)}else l(n.text)&&p.appendChild(n.elm,p.createTextNode(String(n.text)))}function g(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return s(n.tag)}function v(n,t){for(var a=0;a<r.create.length;++a)r.create[a](_r,n);s(e=n.data.hook)&&(s(e.create)&&e.create(_r,n),s(e.insert)&&t.push(n))}function b(n){var e;if(s(e=n.fnScopeId))p.setStyleScope(n.elm,e);else for(var t=n;t;)s(e=t.context)&&s(e=e.$options._scopeId)&&p.setStyleScope(n.elm,e),t=t.parent;s(e=Ke)&&e!==n.context&&e!==n.fnContext&&s(e=e.$options._scopeId)&&p.setStyleScope(n.elm,e)}function x(n,e,t,r,a,o){for(;r<=a;++r)d(t[r],o,n,e,!1,t,r)}function k(n){var e,t,a=n.data;if(s(a))for(s(e=a.hook)&&s(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(s(e=n.children))for(t=0;t<n.children.length;++t)k(n.children[t])}function E(n,e,t){for(;e<=t;++e){var r=n[e];s(r)&&(s(r.tag)?(w(r),k(r)):u(r.elm))}}function w(n,e){if(s(e)||s(n.data)){var t,a=r.remove.length+1;for(s(e)?e.listeners+=a:e=function(n,e){function t(){0==--t.listeners&&u(n)}return t.listeners=e,t}(n.elm,a),s(t=n.componentInstance)&&s(t=t._vnode)&&s(t.data)&&w(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);s(t=n.data.hook)&&s(t=t.remove)?t(n,e):e()}else u(n.elm)}function _(n,e,t,r){for(var a=t;a<r;a++){var o=e[a];if(s(o)&&Ar(n,o))return a}}function j(n,e,t,a,l,c){if(n!==e){s(e.elm)&&s(a)&&(e=a[l]=vn(e));var u=e.elm=n.elm;if(i(n.isAsyncPlaceholder))s(e.asyncFactory.resolved)?S(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(i(e.isStatic)&&i(n.isStatic)&&e.key===n.key&&(i(e.isCloned)||i(e.isOnce)))e.componentInstance=n.componentInstance;else{var m,f=e.data;s(f)&&s(m=f.hook)&&s(m=m.prepatch)&&m(n,e);var h=n.children,v=e.children;if(s(f)&&g(e)){for(m=0;m<r.update.length;++m)r.update[m](n,e);s(m=f.hook)&&s(m=m.update)&&m(n,e)}o(e.text)?s(h)&&s(v)?h!==v&&function(n,e,t,r,a){var i,l,c,u=0,m=0,f=e.length-1,h=e[0],g=e[f],v=t.length-1,b=t[0],y=t[v],k=!a;for(0;u<=f&&m<=v;)o(h)?h=e[++u]:o(g)?g=e[--f]:Ar(h,b)?(j(h,b,r,t,m),h=e[++u],b=t[++m]):Ar(g,y)?(j(g,y,r,t,v),g=e[--f],y=t[--v]):Ar(h,y)?(j(h,y,r,t,v),k&&p.insertBefore(n,h.elm,p.nextSibling(g.elm)),h=e[++u],y=t[--v]):Ar(g,b)?(j(g,b,r,t,m),k&&p.insertBefore(n,g.elm,h.elm),g=e[--f],b=t[++m]):(o(i)&&(i=Rr(e,u,f)),o(l=s(b.key)?i[b.key]:_(b,e,u,f))?d(b,r,n,h.elm,!1,t,m):Ar(c=e[l],b)?(j(c,b,r,t,m),e[l]=void 0,k&&p.insertBefore(n,c.elm,h.elm)):d(b,r,n,h.elm,!1,t,m),b=t[++m]);u>f?x(n,o(t[v+1])?null:t[v+1].elm,t,m,v,r):m>v&&E(e,u,f)}(u,h,v,t,c):s(v)?(s(n.text)&&p.setTextContent(u,""),x(u,null,v,0,v.length-1,t)):s(h)?E(h,0,h.length-1):s(n.text)&&p.setTextContent(u,""):n.text!==e.text&&p.setTextContent(u,e.text),s(f)&&s(m=f.hook)&&s(m=m.postpatch)&&m(n,e)}}}function A(n,e,t){if(i(t)&&s(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var R=y("attrs,class,staticClass,staticStyle,key");function S(n,e,t,r){var a,o=e.tag,l=e.data,c=e.children;if(r=r||l&&l.pre,e.elm=n,i(e.isComment)&&s(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(s(l)&&(s(a=l.hook)&&s(a=a.init)&&a(e,!0),s(a=e.componentInstance)))return m(e,t),!0;if(s(o)){if(s(c))if(n.hasChildNodes())if(s(a=l)&&s(a=a.domProps)&&s(a=a.innerHTML)){if(a!==n.innerHTML)return!1}else{for(var p=!0,u=n.firstChild,d=0;d<c.length;d++){if(!u||!S(u,c[d],t,r)){p=!1;break}u=u.nextSibling}if(!p||u)return!1}else h(e,c,t);if(s(l)){var f=!1;for(var g in l)if(!R(g)){f=!0,v(e,t);break}!f&&l.class&&Fe(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,a){if(!o(e)){var l,c=!1,u=[];if(o(n))c=!0,d(e,u);else{var m=s(n.nodeType);if(!m&&Ar(n,e))j(n,e,u,null,null,a);else{if(m){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),i(t)&&S(n,e,u))return A(e,u,!0),n;l=n,n=new fn(p.tagName(l).toLowerCase(),{},[],void 0,l)}var f=n.elm,h=p.parentNode(f);if(d(e,u,f._leaveCb?null:h,p.nextSibling(f)),s(e.parent))for(var v=e.parent,b=g(e);v;){for(var y=0;y<r.destroy.length;++y)r.destroy[y](v);if(v.elm=e.elm,b){for(var x=0;x<r.create.length;++x)r.create[x](_r,v);var w=v.data.hook.insert;if(w.merged)for(var _=w.fns.slice(1),R=0;R<_.length;R++)_[R]()}else Er(v);v=v.parent}s(h)?E([n],0,0):s(n.tag)&&k(n)}}return A(e,u,c),e.elm}s(n)&&k(n)}}({nodeOps:xr,modules:[Or,$r,Gr,Kr,la,Q?{create:Ba,activate:Ba,remove:function(n,e){!0!==n.data.show?Ca(n,e):e()}}:{}].concat(Ir)});X&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&$a(n,"input")}));var Ia={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?Gn(t,"postpatch",(function(){Ia.componentUpdated(n,e,t)})):La(n,e,t.context),n._vOptions=[].map.call(n.options,Oa)):("textarea"===t.tag||yr(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",Ma),n.addEventListener("compositionend",Da),n.addEventListener("change",Da),X&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){La(n,e,t.context);var r=n._vOptions,a=n._vOptions=[].map.call(n.options,Oa);if(a.some((function(n,e){return!N(n,r[e])})))(n.multiple?e.value.some((function(n){return Na(n,a)})):e.value!==e.oldValue&&Na(e.value,a))&&$a(n,"change")}}};function La(n,e,t){za(n,e,t),(K||Y)&&setTimeout((function(){za(n,e,t)}),0)}function za(n,e,t){var r=e.value,a=n.multiple;if(!a||Array.isArray(r)){for(var o,s,i=0,l=n.options.length;i<l;i++)if(s=n.options[i],a)o=O(r,Oa(s))>-1,s.selected!==o&&(s.selected=o);else if(N(Oa(s),r))return void(n.selectedIndex!==i&&(n.selectedIndex=i));a||(n.selectedIndex=-1)}}function Na(n,e){return e.every((function(e){return!N(e,n)}))}function Oa(n){return"_value"in n?n._value:n.value}function Ma(n){n.target.composing=!0}function Da(n){n.target.composing&&(n.target.composing=!1,$a(n.target,"input"))}function $a(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function Ua(n){return!n.componentInstance||n.data&&n.data.transition?n:Ua(n.componentInstance._vnode)}var Fa={model:Ia,show:{bind:function(n,e,t){var r=e.value,a=(t=Ua(t)).data&&t.data.transition,o=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&a?(t.data.show=!0,Sa(t,(function(){n.style.display=o}))):n.style.display=r?o:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=Ua(t)).data&&t.data.transition?(t.data.show=!0,r?Sa(t,(function(){n.style.display=n.__vOriginalDisplay})):Ca(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,a){a||(n.style.display=n.__vOriginalDisplay)}}},Va={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Ha(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Ha(je(e.children)):n}function Wa(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var a=t._parentListeners;for(var r in a)e[A(r)]=a[r];return e}function Ja(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Ga=function(n){return n.tag||he(n)},Qa=function(n){return"show"===n.name},Za={name:"transition",props:Va,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Ga)).length){0;var r=this.mode;0;var a=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return a;var o=Ha(a);if(!o)return a;if(this._leaving)return Ja(n,a);var s="__transition-".concat(this._uid,"-");o.key=null==o.key?o.isComment?s+"comment":s+o.tag:l(o.key)?0===String(o.key).indexOf(s)?o.key:s+o.key:o.key;var i=(o.data||(o.data={})).transition=Wa(this),c=this._vnode,p=Ha(c);if(o.data.directives&&o.data.directives.some(Qa)&&(o.data.show=!0),p&&p.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(o,p)&&!he(p)&&(!p.componentInstance||!p.componentInstance._vnode.isComment)){var u=p.data.transition=B({},i);if("out-in"===r)return this._leaving=!0,Gn(u,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Ja(n,a);if("in-out"===r){if(he(o))return c;var d,m=function(){d()};Gn(i,"afterEnter",m),Gn(i,"enterCancelled",m),Gn(u,"delayLeave",(function(n){d=n}))}}return a}}},Ka=B({tag:String,moveClass:String},Va);function Xa(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Ya(n){n.data.newPos=n.elm.getBoundingClientRect()}function no(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,a=e.top-t.top;if(r||a){n.data.moved=!0;var o=n.elm.style;o.transform=o.WebkitTransform="translate(".concat(r,"px,").concat(a,"px)"),o.transitionDuration="0s"}}delete Ka.mode;var eo={Transition:Za,TransitionGroup:{props:Ka,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var a=Xe(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,a(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,a=this.$slots.default||[],o=this.children=[],s=Wa(this),i=0;i<a.length;i++){if((p=a[i]).tag)if(null!=p.key&&0!==String(p.key).indexOf("__vlist"))o.push(p),t[p.key]=p,(p.data||(p.data={})).transition=s;else;}if(r){var l=[],c=[];for(i=0;i<r.length;i++){var p;(p=r[i]).data.transition=s,p.data.pos=p.elm.getBoundingClientRect(),t[p.key]?l.push(p):c.push(p)}this.kept=n(e,null,l),this.removed=c}return n(e,null,o)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Xa),n.forEach(Ya),n.forEach(no),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;ka(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(ga,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(ga,n),t._moveCb=null,Ea(t,e))})}})))},methods:{hasMove:function(n,e){if(!fa)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){ua(t,n)})),pa(t,e),t.style.display="none",this.$el.appendChild(t);var r=ja(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};function to(n,e){for(var t in e)n[t]=e[t];return n}Jt.config.mustUseProp=function(n,e,t){return"value"===t&&tr(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Jt.config.isReservedTag=vr,Jt.config.isReservedAttr=er,Jt.config.getTagNamespace=function(n){return gr(n)?"svg":"math"===n?"math":void 0},Jt.config.isUnknownElement=function(n){if(!Q)return!0;if(vr(n))return!1;if(n=n.toLowerCase(),null!=br[n])return br[n];var e=document.createElement(n);return n.indexOf("-")>-1?br[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:br[n]=/HTMLUnknownElement/.test(e.toString())},B(Jt.options.directives,Fa),B(Jt.options.components,eo),Jt.prototype.__patch__=Q?qa:I,Jt.prototype.$mount=function(n,e){return function(n,e,t){var r;n.$el=e,n.$options.render||(n.$options.render=hn),et(n,"beforeMount"),r=function(){n._update(n._render(),t)},new We(n,r,I,{before:function(){n._isMounted&&!n._isDestroyed&&et(n,"beforeUpdate")}},!0),t=!1;var a=n._preWatchers;if(a)for(var o=0;o<a.length;o++)a[o].run();return null==n.$vnode&&(n._isMounted=!0,et(n,"mounted")),n}(this,n=n&&Q?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},Q&&setTimeout((function(){F.devtools&&ln&&ln.emit("init",Jt)}),0);var ro=/[!'()*]/g,ao=function(n){return"%"+n.charCodeAt(0).toString(16)},oo=/%2C/g,so=function(n){return encodeURIComponent(n).replace(ro,ao).replace(oo,",")};function io(n){try{return decodeURIComponent(n)}catch(n){0}return n}var lo=function(n){return null==n||"object"==typeof n?n:String(n)};function co(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=io(t.shift()),a=t.length>0?io(t.join("=")):null;void 0===e[r]?e[r]=a:Array.isArray(e[r])?e[r].push(a):e[r]=[e[r],a]})),e):e}function po(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return so(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(so(e)):r.push(so(e)+"="+so(n)))})),r.join("&")}return so(e)+"="+so(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var uo=/\/?$/;function mo(n,e,t,r){var a=r&&r.options.stringifyQuery,o=e.query||{};try{o=fo(o)}catch(n){}var s={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:o,params:e.params||{},fullPath:vo(e,a),matched:n?go(n):[]};return t&&(s.redirectedFrom=vo(t,a)),Object.freeze(s)}function fo(n){if(Array.isArray(n))return n.map(fo);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=fo(n[t]);return e}return n}var ho=mo(null,{path:"/"});function go(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function vo(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var a=n.hash;return void 0===a&&(a=""),(t||"/")+(e||po)(r)+a}function bo(n,e,t){return e===ho?n===e:!!e&&(n.path&&e.path?n.path.replace(uo,"")===e.path.replace(uo,"")&&(t||n.hash===e.hash&&yo(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&yo(n.query,e.query)&&yo(n.params,e.params))))}function yo(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,a){var o=n[t];if(r[a]!==t)return!1;var s=e[t];return null==o||null==s?o===s:"object"==typeof o&&"object"==typeof s?yo(o,s):String(o)===String(s)}))}function xo(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var a=t.instances[r],o=t.enteredCbs[r];if(a&&o){delete t.enteredCbs[r];for(var s=0;s<o.length;s++)a._isBeingDestroyed||o[s](a)}}}}var ko={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,a=e.parent,o=e.data;o.routerView=!0;for(var s=a.$createElement,i=t.name,l=a.$route,c=a._routerViewCache||(a._routerViewCache={}),p=0,u=!1;a&&a._routerRoot!==a;){var d=a.$vnode?a.$vnode.data:{};d.routerView&&p++,d.keepAlive&&a._directInactive&&a._inactive&&(u=!0),a=a.$parent}if(o.routerViewDepth=p,u){var m=c[i],f=m&&m.component;return f?(m.configProps&&Eo(f,o,m.route,m.configProps),s(f,o,r)):s()}var h=l.matched[p],g=h&&h.components[i];if(!h||!g)return c[i]=null,s();c[i]={component:g},o.registerRouteInstance=function(n,e){var t=h.instances[i];(e&&t!==n||!e&&t===n)&&(h.instances[i]=e)},(o.hook||(o.hook={})).prepatch=function(n,e){h.instances[i]=e.componentInstance},o.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==h.instances[i]&&(h.instances[i]=n.componentInstance),xo(l)};var v=h.props&&h.props[i];return v&&(to(c[i],{route:l,configProps:v}),Eo(g,o,l,v)),s(g,o,r)}};function Eo(n,e,t,r){var a=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(a){a=e.props=to({},a);var o=e.attrs=e.attrs||{};for(var s in a)n.props&&s in n.props||(o[s]=a[s],delete a[s])}}function wo(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var o=n.replace(/^\//,"").split("/"),s=0;s<o.length;s++){var i=o[s];".."===i?a.pop():"."!==i&&a.push(i)}return""!==a[0]&&a.unshift(""),a.join("/")}function _o(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var jo=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},Ao=Do,Ro=Bo,So=function(n,e){return Io(Bo(n,e),e)},Co=Io,Po=Mo,To=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Bo(n,e){for(var t,r=[],a=0,o=0,s="",i=e&&e.delimiter||"/";null!=(t=To.exec(n));){var l=t[0],c=t[1],p=t.index;if(s+=n.slice(o,p),o=p+l.length,c)s+=c[1];else{var u=n[o],d=t[2],m=t[3],f=t[4],h=t[5],g=t[6],v=t[7];s&&(r.push(s),s="");var b=null!=d&&null!=u&&u!==d,y="+"===g||"*"===g,x="?"===g||"*"===g,k=t[2]||i,E=f||h;r.push({name:m||a++,prefix:d||"",delimiter:k,optional:x,repeat:y,partial:b,asterisk:!!v,pattern:E?zo(E):v?".*":"[^"+Lo(k)+"]+?"})}}return o<n.length&&(s+=n.substr(o)),s&&r.push(s),r}function qo(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function Io(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",Oo(e)));return function(e,r){for(var a="",o=e||{},s=(r||{}).pretty?qo:encodeURIComponent,i=0;i<n.length;i++){var l=n[i];if("string"!=typeof l){var c,p=o[l.name];if(null==p){if(l.optional){l.partial&&(a+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(jo(p)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var u=0;u<p.length;u++){if(c=s(p[u]),!t[i].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");a+=(0===u?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(p).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):s(p),!t[i].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');a+=l.prefix+c}}else a+=l}return a}}function Lo(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function zo(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function No(n,e){return n.keys=e,n}function Oo(n){return n&&n.sensitive?"":"i"}function Mo(n,e,t){jo(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,a=!1!==t.end,o="",s=0;s<n.length;s++){var i=n[s];if("string"==typeof i)o+=Lo(i);else{var l=Lo(i.prefix),c="(?:"+i.pattern+")";e.push(i),i.repeat&&(c+="(?:"+l+c+")*"),o+=c=i.optional?i.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var p=Lo(t.delimiter||"/"),u=o.slice(-p.length)===p;return r||(o=(u?o.slice(0,-p.length):o)+"(?:"+p+"(?=$))?"),o+=a?"$":r&&u?"":"(?="+p+"|$)",No(new RegExp("^"+o,Oo(t)),e)}function Do(n,e,t){return jo(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return No(n,e)}(n,e):jo(n)?function(n,e,t){for(var r=[],a=0;a<n.length;a++)r.push(Do(n[a],e,t).source);return No(new RegExp("(?:"+r.join("|")+")",Oo(t)),e)}(n,e,t):function(n,e,t){return Mo(Bo(n,t),e,t)}(n,e,t)}Ao.parse=Ro,Ao.compile=So,Ao.tokensToFunction=Co,Ao.tokensToRegExp=Po;var $o=Object.create(null);function Uo(n,e,t){e=e||{};try{var r=$o[n]||($o[n]=Ao.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function Fo(n,e,t,r){var a="string"==typeof n?{path:n}:n;if(a._normalized)return a;if(a.name){var o=(a=to({},n)).params;return o&&"object"==typeof o&&(a.params=to({},o)),a}if(!a.path&&a.params&&e){(a=to({},a))._normalized=!0;var s=to(to({},e.params),a.params);if(e.name)a.name=e.name,a.params=s;else if(e.matched.length){var i=e.matched[e.matched.length-1].path;a.path=Uo(i,s,e.path)}else 0;return a}var l=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var a=n.indexOf("?");return a>=0&&(t=n.slice(a+1),n=n.slice(0,a)),{path:n,query:t,hash:e}}(a.path||""),c=e&&e.path||"/",p=l.path?wo(l.path,c,t||a.append):c,u=function(n,e,t){void 0===e&&(e={});var r,a=t||co;try{r=a(n||"")}catch(n){r={}}for(var o in e){var s=e[o];r[o]=Array.isArray(s)?s.map(lo):lo(s)}return r}(l.query,a.query,r&&r.options.parseQuery),d=a.hash||l.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:p,query:u,hash:d}}var Vo,Ho=function(){},Wo={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,a=t.resolve(this.to,r,this.append),o=a.location,s=a.route,i=a.href,l={},c=t.options.linkActiveClass,p=t.options.linkExactActiveClass,u=null==c?"router-link-active":c,d=null==p?"router-link-exact-active":p,m=null==this.activeClass?u:this.activeClass,f=null==this.exactActiveClass?d:this.exactActiveClass,h=s.redirectedFrom?mo(null,Fo(s.redirectedFrom),null,t):s;l[f]=bo(r,h,this.exactPath),l[m]=this.exact||this.exactPath?l[f]:function(n,e){return 0===n.path.replace(uo,"/").indexOf(e.path.replace(uo,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,h);var g=l[f]?this.ariaCurrentValue:null,v=function(n){Jo(n)&&(e.replace?t.replace(o,Ho):t.push(o,Ho))},b={click:Jo};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=v})):b[this.event]=v;var y={class:l},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:i,route:s,navigate:v,isActive:l[m],isExactActive:l[f]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)y.on=b,y.attrs={href:i,"aria-current":g};else{var k=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(k){k.isStatic=!1;var E=k.data=to({},k.data);for(var w in E.on=E.on||{},E.on){var _=E.on[w];w in b&&(E.on[w]=Array.isArray(_)?_:[_])}for(var j in b)j in E.on?E.on[j].push(b[j]):E.on[j]=v;var A=k.data.attrs=to({},k.data.attrs);A.href=i,A["aria-current"]=g}else y.on=b}return n(this.tag,y,this.$slots.default)}};function Jo(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Go="undefined"!=typeof window;function Qo(n,e,t,r,a){var o=e||[],s=t||Object.create(null),i=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,a,o,s){var i=a.path,l=a.name;0;var c=a.pathToRegexpOptions||{},p=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return _o(e.path+"/"+n)}(i,o,c.strict);"boolean"==typeof a.caseSensitive&&(c.sensitive=a.caseSensitive);var u={path:p,regex:Zo(p,c),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:l,parent:o,matchAs:s,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var o=s?_o(s+"/"+a.path):void 0;n(e,t,r,a,u,o)}));t[u.path]||(e.push(u.path),t[u.path]=u);if(void 0!==a.alias)for(var d=Array.isArray(a.alias)?a.alias:[a.alias],m=0;m<d.length;++m){0;var f={path:d[m],children:a.children};n(e,t,r,f,o,u.path||"/")}l&&(r[l]||(r[l]=u))}(o,s,i,n,a)}));for(var l=0,c=o.length;l<c;l++)"*"===o[l]&&(o.push(o.splice(l,1)[0]),c--,l--);return{pathList:o,pathMap:s,nameMap:i}}function Zo(n,e){return Ao(n,[],e)}function Ko(n,e){var t=Qo(n),r=t.pathList,a=t.pathMap,o=t.nameMap;function s(n,t,s){var i=Fo(n,t,!1,e),c=i.name;if(c){var p=o[c];if(!p)return l(null,i);var u=p.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof i.params&&(i.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in i.params)&&u.indexOf(d)>-1&&(i.params[d]=t.params[d]);return i.path=Uo(p.path,i.params),l(p,i,s)}if(i.path){i.params={};for(var m=0;m<r.length;m++){var f=r[m],h=a[f];if(Xo(h.regex,i.path,i.params))return l(h,i,s)}}return l(null,i)}function i(n,t){var r=n.redirect,a="function"==typeof r?r(mo(n,t,null,e)):r;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return l(null,t);var i=a,c=i.name,p=i.path,u=t.query,d=t.hash,m=t.params;if(u=i.hasOwnProperty("query")?i.query:u,d=i.hasOwnProperty("hash")?i.hash:d,m=i.hasOwnProperty("params")?i.params:m,c){o[c];return s({_normalized:!0,name:c,query:u,hash:d,params:m},void 0,t)}if(p){var f=function(n,e){return wo(n,e.parent?e.parent.path:"/",!0)}(p,n);return s({_normalized:!0,path:Uo(f,m),query:u,hash:d},void 0,t)}return l(null,t)}function l(n,t,r){return n&&n.redirect?i(n,r||t):n&&n.matchAs?function(n,e,t){var r=s({_normalized:!0,path:Uo(t,e.params)});if(r){var a=r.matched,o=a[a.length-1];return e.params=r.params,l(o,e)}return l(null,e)}(0,t,n.matchAs):mo(n,t,r,e)}return{match:s,addRoute:function(n,e){var t="object"!=typeof n?o[n]:void 0;Qo([e||n],r,a,o,t),t&&t.alias.length&&Qo(t.alias.map((function(n){return{path:n,children:[e]}})),r,a,o,t)},getRoutes:function(){return r.map((function(n){return a[n]}))},addRoutes:function(n){Qo(n,r,a,o)}}}function Xo(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var a=1,o=r.length;a<o;++a){var s=n.keys[a-1];s&&(t[s.name||"pathMatch"]="string"==typeof r[a]?io(r[a]):r[a])}return!0}var Yo=Go&&window.performance&&window.performance.now?window.performance:Date;function ns(){return Yo.now().toFixed(3)}var es=ns();function ts(){return es}function rs(n){return es=n}var as=Object.create(null);function os(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=to({},window.history.state);return t.key=ts(),window.history.replaceState(t,"",e),window.addEventListener("popstate",ls),function(){window.removeEventListener("popstate",ls)}}function ss(n,e,t,r){if(n.app){var a=n.options.scrollBehavior;a&&n.app.$nextTick((function(){var o=function(){var n=ts();if(n)return as[n]}(),s=a.call(n,e,t,r?o:null);s&&("function"==typeof s.then?s.then((function(n){ms(n,o)})).catch((function(n){0})):ms(s,o))}))}}function is(){var n=ts();n&&(as[n]={x:window.pageXOffset,y:window.pageYOffset})}function ls(n){is(),n.state&&n.state.key&&rs(n.state.key)}function cs(n){return us(n.x)||us(n.y)}function ps(n){return{x:us(n.x)?n.x:window.pageXOffset,y:us(n.y)?n.y:window.pageYOffset}}function us(n){return"number"==typeof n}var ds=/^#\d/;function ms(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var a=ds.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(a){var o=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(a,o={x:us((t=o).x)?t.x:0,y:us(t.y)?t.y:0})}else cs(n)&&(e=ps(n))}else r&&cs(n)&&(e=ps(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var fs,hs=Go&&((-1===(fs=window.navigator.userAgent).indexOf("Android 2.")&&-1===fs.indexOf("Android 4.0")||-1===fs.indexOf("Mobile Safari")||-1!==fs.indexOf("Chrome")||-1!==fs.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function gs(n,e){is();var t=window.history;try{if(e){var r=to({},t.state);r.key=ts(),t.replaceState(r,"",n)}else t.pushState({key:rs(ns())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function vs(n){gs(n,!0)}var bs={redirected:2,aborted:4,cancelled:8,duplicated:16};function ys(n,e){return ks(n,e,bs.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return Es.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function xs(n,e){return ks(n,e,bs.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function ks(n,e,t,r){var a=new Error(r);return a._isRouter=!0,a.from=n,a.to=e,a.type=t,a}var Es=["params","query","hash"];function ws(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function _s(n,e){return ws(n)&&n._isRouter&&(null==e||n.type===e)}function js(n,e,t){var r=function(a){a>=n.length?t():n[a]?e(n[a],(function(){r(a+1)})):r(a+1)};r(0)}function As(n){return function(e,t,r){var a=!1,o=0,s=null;Rs(n,(function(n,e,t,i){if("function"==typeof n&&void 0===n.cid){a=!0,o++;var l,c=Ps((function(e){var a;((a=e).__esModule||Cs&&"Module"===a[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Vo.extend(e),t.components[i]=e,--o<=0&&r()})),p=Ps((function(n){var e="Failed to resolve async component "+i+": "+n;s||(s=ws(n)?n:new Error(e),r(s))}));try{l=n(c,p)}catch(n){p(n)}if(l)if("function"==typeof l.then)l.then(c,p);else{var u=l.component;u&&"function"==typeof u.then&&u.then(c,p)}}})),a||r()}}function Rs(n,e){return Ss(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function Ss(n){return Array.prototype.concat.apply([],n)}var Cs="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Ps(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var Ts=function(n,e){this.router=n,this.base=function(n){if(!n)if(Go){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=ho,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Bs(n,e,t,r){var a=Rs(n,(function(n,r,a,o){var s=function(n,e){"function"!=typeof n&&(n=Vo.extend(n));return n.options[e]}(n,e);if(s)return Array.isArray(s)?s.map((function(n){return t(n,r,a,o)})):t(s,r,a,o)}));return Ss(r?a.reverse():a)}function qs(n,e){if(e)return function(){return n.apply(e,arguments)}}Ts.prototype.listen=function(n){this.cb=n},Ts.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},Ts.prototype.onError=function(n){this.errorCbs.push(n)},Ts.prototype.transitionTo=function(n,e,t){var r,a=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var o=this.current;this.confirmTransition(r,(function(){a.updateRoute(r),e&&e(r),a.ensureURL(),a.router.afterHooks.forEach((function(n){n&&n(r,o)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!a.ready&&(_s(n,bs.redirected)&&o===ho||(a.ready=!0,a.readyErrorCbs.forEach((function(e){e(n)}))))}))},Ts.prototype.confirmTransition=function(n,e,t){var r=this,a=this.current;this.pending=n;var o,s,i=function(n){!_s(n)&&ws(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=a.matched.length-1;if(bo(n,a)&&l===c&&n.matched[l]===a.matched[c])return this.ensureURL(),n.hash&&ss(this.router,a,n,!1),i(((s=ks(o=a,n,bs.duplicated,'Avoided redundant navigation to current location: "'+o.fullPath+'".')).name="NavigationDuplicated",s));var p=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),u=p.updated,d=p.deactivated,m=p.activated,f=[].concat(function(n){return Bs(n,"beforeRouteLeave",qs,!0)}(d),this.router.beforeHooks,function(n){return Bs(n,"beforeRouteUpdate",qs)}(u),m.map((function(n){return n.beforeEnter})),As(m)),h=function(e,t){if(r.pending!==n)return i(xs(a,n));try{e(n,a,(function(e){!1===e?(r.ensureURL(!0),i(function(n,e){return ks(n,e,bs.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(a,n))):ws(e)?(r.ensureURL(!0),i(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(i(ys(a,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){i(n)}};js(f,h,(function(){js(function(n){return Bs(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,a,o){return n(r,a,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),o(n)}))}}(n,t,r)}))}(m).concat(r.router.resolveHooks),h,(function(){if(r.pending!==n)return i(xs(a,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){xo(n)}))}))}))},Ts.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},Ts.prototype.setupListeners=function(){},Ts.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=ho,this.pending=null};var Is=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Ls(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=hs&&t;r&&this.listeners.push(os());var a=function(){var t=n.current,a=Ls(n.base);n.current===ho&&a===n._startLocation||n.transitionTo(a,(function(n){r&&ss(e,n,t,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){gs(_o(r.base+n.fullPath)),ss(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){vs(_o(r.base+n.fullPath)),ss(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Ls(this.base)!==this.current.fullPath){var e=_o(this.base+this.current.fullPath);n?gs(e):vs(e)}},e.prototype.getCurrentLocation=function(){return Ls(this.base)},e}(Ts);function Ls(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(_o(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var zs=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=Ls(n);if(!/^\/#/.test(e))return window.location.replace(_o(n+"/#"+e)),!0}(this.base)||Ns()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=hs&&e;t&&this.listeners.push(os());var r=function(){var e=n.current;Ns()&&n.transitionTo(Os(),(function(r){t&&ss(n.router,r,e,!0),hs||$s(r.fullPath)}))},a=hs?"popstate":"hashchange";window.addEventListener(a,r),this.listeners.push((function(){window.removeEventListener(a,r)}))}},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Ds(n.fullPath),ss(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){$s(n.fullPath),ss(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Os()!==e&&(n?Ds(e):$s(e))},e.prototype.getCurrentLocation=function(){return Os()},e}(Ts);function Ns(){var n=Os();return"/"===n.charAt(0)||($s("/"+n),!1)}function Os(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function Ms(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function Ds(n){hs?gs(Ms(n)):window.location.hash=n}function $s(n){hs?vs(Ms(n)):window.location.replace(Ms(n))}var Us=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){_s(n,bs.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Ts),Fs=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ko(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!hs&&!1!==n.fallback,this.fallback&&(e="hash"),Go||(e="abstract"),this.mode=e,e){case"history":this.history=new Is(this,n.base);break;case"hash":this.history=new zs(this,n.base,this.fallback);break;case"abstract":this.history=new Us(this,n.base);break;default:0}},Vs={currentRoute:{configurable:!0}};Fs.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Vs.currentRoute.get=function(){return this.history&&this.history.current},Fs.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Is||t instanceof zs){var r=function(n){t.setupListeners(),function(n){var r=t.current,a=e.options.scrollBehavior;hs&&a&&"fullPath"in n&&ss(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Fs.prototype.beforeEach=function(n){return Ws(this.beforeHooks,n)},Fs.prototype.beforeResolve=function(n){return Ws(this.resolveHooks,n)},Fs.prototype.afterEach=function(n){return Ws(this.afterHooks,n)},Fs.prototype.onReady=function(n,e){this.history.onReady(n,e)},Fs.prototype.onError=function(n){this.history.onError(n)},Fs.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},Fs.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},Fs.prototype.go=function(n){this.history.go(n)},Fs.prototype.back=function(){this.go(-1)},Fs.prototype.forward=function(){this.go(1)},Fs.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Fs.prototype.resolve=function(n,e,t){var r=Fo(n,e=e||this.history.current,t,this),a=this.match(r,e),o=a.redirectedFrom||a.fullPath;return{location:r,route:a,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?_o(n+"/"+r):r}(this.history.base,o,this.mode),normalizedTo:r,resolved:a}},Fs.prototype.getRoutes=function(){return this.matcher.getRoutes()},Fs.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==ho&&this.history.transitionTo(this.history.getCurrentLocation())},Fs.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==ho&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Fs.prototype,Vs);var Hs=Fs;function Ws(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Fs.install=function n(e){if(!n.installed||Vo!==e){n.installed=!0,Vo=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",ko),e.component("RouterLink",Wo);var a=e.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},Fs.version="3.6.5",Fs.isNavigationFailure=_s,Fs.NavigationFailureType=bs,Fs.START_LOCATION=ho,Go&&window.Vue&&window.Vue.use(Fs);t(107);t(129),t(25);var Js={"components/AlgoliaSearchBox":()=>Promise.all([t.e(0),t.e(14)]).then(t.bind(null,378)),"components/ArchivesPage":()=>Promise.all([t.e(0),t.e(17)]).then(t.bind(null,335)),"components/ArticleInfo":()=>Promise.all([t.e(0),t.e(20)]).then(t.bind(null,336)),"components/BloggerBar":()=>Promise.all([t.e(0),t.e(21)]).then(t.bind(null,337)),"components/BodyBgImg":()=>Promise.all([t.e(0),t.e(22)]).then(t.bind(null,338)),"components/Buttons":()=>Promise.all([t.e(0),t.e(18)]).then(t.bind(null,339)),"components/Catalogue":()=>Promise.all([t.e(0),t.e(23)]).then(t.bind(null,340)),"components/CategoriesBar":()=>Promise.all([t.e(0),t.e(24)]).then(t.bind(null,300)),"components/CategoriesPage":()=>Promise.all([t.e(0),t.e(11)]).then(t.bind(null,341)),"components/DropdownLink":()=>Promise.all([t.e(0),t.e(15)]).then(t.bind(null,278)),"components/DropdownTransition":()=>Promise.all([t.e(0),t.e(25)]).then(t.bind(null,256)),"components/Footer":()=>Promise.all([t.e(0),t.e(26)]).then(t.bind(null,342)),"components/Home":()=>Promise.all([t.e(0),t.e(2),t.e(38)]).then(t.bind(null,371)),"components/MainLayout":()=>Promise.all([t.e(0),t.e(27)]).then(t.bind(null,270)),"components/NavLink":()=>t.e(39).then(t.bind(null,255)),"components/NavLinks":()=>Promise.all([t.e(0),t.e(13)]).then(t.bind(null,302)),"components/Navbar":()=>Promise.all([t.e(0),t.e(1)]).then(t.bind(null,370)),"components/Page":()=>Promise.all([t.e(0),t.e(3),t.e(34)]).then(t.bind(null,372)),"components/PageEdit":()=>Promise.all([t.e(0),t.e(19)]).then(t.bind(null,343)),"components/PageNav":()=>Promise.all([t.e(0),t.e(16)]).then(t.bind(null,344)),"components/Pagination":()=>Promise.all([t.e(0),t.e(28)]).then(t.bind(null,269)),"components/PostList":()=>Promise.all([t.e(0),t.e(29)]).then(t.bind(null,268)),"components/RightMenu":()=>Promise.all([t.e(0),t.e(30)]).then(t.bind(null,345)),"components/Sidebar":()=>Promise.all([t.e(0),t.e(10)]).then(t.bind(null,346)),"components/SidebarButton":()=>Promise.all([t.e(0),t.e(31)]).then(t.bind(null,348)),"components/SidebarGroup":()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,303)),"components/SidebarLink":()=>Promise.all([t.e(0),t.e(32)]).then(t.bind(null,279)),"components/SidebarLinks":()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,276)),"components/TagsBar":()=>Promise.all([t.e(0),t.e(33)]).then(t.bind(null,301)),"components/TagsPage":()=>Promise.all([t.e(0),t.e(12)]).then(t.bind(null,347)),"components/UpdateArticle":()=>Promise.all([t.e(0),t.e(35)]).then(t.bind(null,306)),"global-components/Badge":()=>Promise.all([t.e(0),t.e(6)]).then(t.bind(null,381)),"global-components/CodeBlock":()=>Promise.resolve().then(t.bind(null,95)),"global-components/CodeGroup":()=>Promise.resolve().then(t.bind(null,96)),"layouts/404":()=>Promise.all([t.e(0),t.e(7)]).then(t.bind(null,379)),"layouts/Layout":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(4)]).then(t.bind(null,380)),NotFound:()=>Promise.all([t.e(0),t.e(7)]).then(t.bind(null,379)),Layout:()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(4)]).then(t.bind(null,380))},Gs={"v-3b5d8337":()=>t.e(40).then(t.bind(null,382)),"v-3ebbaadb":()=>t.e(42).then(t.bind(null,383)),"v-0b243e00":()=>t.e(41).then(t.bind(null,384)),"v-9edea330":()=>t.e(43).then(t.bind(null,385)),"v-776f7066":()=>t.e(44).then(t.bind(null,386)),"v-e079fa76":()=>t.e(47).then(t.bind(null,387)),"v-01ac97e2":()=>t.e(46).then(t.bind(null,388)),"v-0ac410c2":()=>t.e(45).then(t.bind(null,389)),"v-896430d0":()=>t.e(50).then(t.bind(null,390)),"v-8bef18fe":()=>t.e(49).then(t.bind(null,391)),"v-12f0f653":()=>t.e(48).then(t.bind(null,392)),"v-284fab67":()=>t.e(53).then(t.bind(null,393)),"v-21037cc0":()=>t.e(52).then(t.bind(null,394)),"v-85da3806":()=>t.e(55).then(t.bind(null,395)),"v-237b056a":()=>t.e(56).then(t.bind(null,396)),"v-7ec46ca2":()=>t.e(51).then(t.bind(null,397)),"v-010c72bd":()=>t.e(58).then(t.bind(null,398)),"v-25969ecc":()=>t.e(57).then(t.bind(null,399)),"v-8d40ad16":()=>t.e(59).then(t.bind(null,400)),"v-31e75d76":()=>t.e(65).then(t.bind(null,401)),"v-5cf8ceef":()=>t.e(66).then(t.bind(null,402)),"v-649d02ba":()=>t.e(63).then(t.bind(null,403)),"v-0e03698e":()=>t.e(69).then(t.bind(null,404)),"v-794c0a92":()=>t.e(70).then(t.bind(null,405)),"v-87620ef4":()=>t.e(72).then(t.bind(null,406)),"v-8259770e":()=>t.e(68).then(t.bind(null,407)),"v-5ca57a3b":()=>t.e(64).then(t.bind(null,408)),"v-7b6f6e1b":()=>t.e(71).then(t.bind(null,409)),"v-2d3557d4":()=>t.e(67).then(t.bind(null,410)),"v-6cfe6b55":()=>t.e(62).then(t.bind(null,411)),"v-22521ed5":()=>t.e(74).then(t.bind(null,412)),"v-323c9456":()=>t.e(60).then(t.bind(null,413)),"v-cd1bf684":()=>t.e(76).then(t.bind(null,414)),"v-5afc0b22":()=>t.e(54).then(t.bind(null,415)),"v-b8bdf9b0":()=>t.e(79).then(t.bind(null,416)),"v-70dd7e02":()=>t.e(77).then(t.bind(null,417)),"v-f68dfbdc":()=>t.e(81).then(t.bind(null,418)),"v-f57d762a":()=>t.e(78).then(t.bind(null,419)),"v-4b103e52":()=>t.e(82).then(t.bind(null,420)),"v-bafcd148":()=>t.e(80).then(t.bind(null,421)),"v-51ebefb8":()=>t.e(75).then(t.bind(null,422)),"v-157e2a4c":()=>t.e(84).then(t.bind(null,423)),"v-d1164148":()=>t.e(85).then(t.bind(null,424)),"v-0e56de60":()=>t.e(83).then(t.bind(null,425)),"v-f4442e50":()=>t.e(86).then(t.bind(null,426)),"v-d4d2438e":()=>t.e(88).then(t.bind(null,427)),"v-92062b1e":()=>t.e(37).then(t.bind(null,428)),"v-cfc880be":()=>t.e(87).then(t.bind(null,429)),"v-2b4726f4":()=>t.e(89).then(t.bind(null,430)),"v-0b57bbc2":()=>t.e(36).then(t.bind(null,431)),"v-16738502":()=>t.e(92).then(t.bind(null,432)),"v-6b223d4e":()=>t.e(90).then(t.bind(null,433)),"v-4a82f017":()=>t.e(94).then(t.bind(null,434)),"v-7a1fa96d":()=>t.e(93).then(t.bind(null,435)),"v-10cc7a82":()=>t.e(91).then(t.bind(null,436)),"v-a99d4dc2":()=>t.e(98).then(t.bind(null,437)),"v-126035b2":()=>t.e(99).then(t.bind(null,438)),"v-3ae7c090":()=>t.e(100).then(t.bind(null,439)),"v-46f6b44c":()=>t.e(101).then(t.bind(null,440)),"v-17889702":()=>t.e(102).then(t.bind(null,441)),"v-6242d2ea":()=>t.e(96).then(t.bind(null,442)),"v-1267ca51":()=>t.e(95).then(t.bind(null,443)),"v-058fed96":()=>t.e(61).then(t.bind(null,444)),"v-aeeee3d6":()=>t.e(103).then(t.bind(null,445)),"v-7431bba6":()=>t.e(105).then(t.bind(null,446)),"v-ef68ffac":()=>t.e(106).then(t.bind(null,447)),"v-3bf85657":()=>t.e(97).then(t.bind(null,448)),"v-61f38f29":()=>t.e(107).then(t.bind(null,449)),"v-dadd89f2":()=>t.e(108).then(t.bind(null,450)),"v-1635394c":()=>t.e(110).then(t.bind(null,451)),"v-084f1662":()=>t.e(113).then(t.bind(null,452)),"v-e48af10a":()=>t.e(104).then(t.bind(null,453)),"v-ccf187c2":()=>t.e(114).then(t.bind(null,454)),"v-14a81e9c":()=>t.e(115).then(t.bind(null,455)),"v-51e34ce2":()=>t.e(117).then(t.bind(null,456)),"v-34b807f3":()=>t.e(111).then(t.bind(null,457)),"v-4f9e9097":()=>t.e(118).then(t.bind(null,458)),"v-fbcea828":()=>t.e(116).then(t.bind(null,459)),"v-14faef13":()=>t.e(119).then(t.bind(null,460)),"v-1eda0c4c":()=>t.e(109).then(t.bind(null,461)),"v-3ef19a12":()=>t.e(121).then(t.bind(null,462)),"v-be0ed572":()=>t.e(122).then(t.bind(null,463)),"v-0e93f0aa":()=>t.e(124).then(t.bind(null,464)),"v-742054b3":()=>t.e(123).then(t.bind(null,465)),"v-b763c544":()=>t.e(112).then(t.bind(null,466)),"v-d7e22d48":()=>t.e(125).then(t.bind(null,467)),"v-25645ad7":()=>t.e(120).then(t.bind(null,468)),"v-ae666c46":()=>t.e(128).then(t.bind(null,469)),"v-fecec612":()=>t.e(129).then(t.bind(null,470)),"v-381ec16a":()=>t.e(126).then(t.bind(null,471)),"v-1507f304":()=>t.e(131).then(t.bind(null,472)),"v-08a1cbcd":()=>t.e(130).then(t.bind(null,473)),"v-4690c124":()=>t.e(135).then(t.bind(null,474)),"v-34bd4ee4":()=>t.e(136).then(t.bind(null,475)),"v-7da5161e":()=>t.e(137).then(t.bind(null,476)),"v-5cf9b43e":()=>t.e(138).then(t.bind(null,477)),"v-1be43b76":()=>t.e(132).then(t.bind(null,478)),"v-205e5ac6":()=>t.e(139).then(t.bind(null,479)),"v-e94a252a":()=>t.e(142).then(t.bind(null,480)),"v-5edd67ee":()=>t.e(73).then(t.bind(null,481)),"v-032a5082":()=>t.e(143).then(t.bind(null,482)),"v-7527acb6":()=>t.e(140).then(t.bind(null,483)),"v-7f3ad0a8":()=>t.e(127).then(t.bind(null,484)),"v-7cab3a1e":()=>t.e(141).then(t.bind(null,485)),"v-1bfa6712":()=>t.e(147).then(t.bind(null,486)),"v-4ef7f0c7":()=>t.e(146).then(t.bind(null,487)),"v-b2180af4":()=>t.e(148).then(t.bind(null,488)),"v-3314645a":()=>t.e(144).then(t.bind(null,489)),"v-2b48a6f6":()=>t.e(145).then(t.bind(null,490)),"v-232e62ea":()=>t.e(133).then(t.bind(null,491)),"v-0e4cbbff":()=>t.e(134).then(t.bind(null,492))};function Qs(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Zs=/-(\w)/g,Ks=Qs(n=>n.replace(Zs,(n,e)=>e?e.toUpperCase():"")),Xs=/\B([A-Z])/g,Ys=Qs(n=>n.replace(Xs,"-$1").toLowerCase()),ni=Qs(n=>n.charAt(0).toUpperCase()+n.slice(1));function ei(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(ni(Ks(e))):n(ni(e))||n(Ys(e))}const ti=Object.assign({},Js,Gs),ri=n=>ti[n],ai=n=>Gs[n],oi=n=>Js[n],si=n=>Jt.component(n);function ii(n){return ei(ai,n)}function li(n){return ei(oi,n)}function ci(n){return ei(ri,n)}function pi(n){return ei(si,n)}function ui(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!pi(n)&&ci(n)){const e=await ci(n)();Jt.component(n,e.default)}}))}function di(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var mi=t(92),fi=t.n(mi),hi=t(93),gi=t.n(hi),vi={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${gi()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=yi(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=xi(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return fi()([{name:"description",content:this.$description}],n,this.siteMeta,ki)},updateCanonicalLink(){bi(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",yi(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){xi(null,this.currentMetaTags),bi()}};function bi(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function yi(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function xi(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function ki(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var Ei=t(48),wi={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(Ei)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),a=window.innerHeight+t;for(let n=0;n<e.length;n++){const o=e[n],s=e[n+1],i=0===n&&0===t||t>=o.parentElement.offsetTop+10&&(!s||t<s.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(i&&l!==decodeURIComponent(o.hash)){const t=o;if(a===r)for(let t=n+1;t<e.length;t++)if(l===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},_i=t(23),ji=t.n(_i),Ai={mounted(){ji.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Jt.component(n.name)||ji.a.start(),t()}),this.$router.afterEach(()=>{ji.a.done(),this.isSidebarOpen=!1})}};t(241),t(242);class Ri{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:n="",duration:e=3e3}){let t=document.createElement("div");t.className="message move-in",t.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${n}</div>\n    `,this.containerEl.appendChild(t),e>0&&setTimeout(()=>{this.close(t)},e)}close(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",()=>{n.remove()})}}var Si={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(n=>{document.querySelectorAll(n).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(n){if(n.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(n.innerText)}),n.appendChild(e),n.classList.add("codecopy-enabled")},copyToClipboard(n){const e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new Ri).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}},Ci="auto",Pi="zoom-in",Ti="zoom-out",Bi="grab",qi="move";function Ii(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a={passive:!1};r?n.addEventListener(e,t,a):n.removeEventListener(e,t,a)}function Li(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function zi(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Ni(n,e,t){!function(n){var e=Oi,t=Mi;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var a=n.transform;delete n.transform,n[t]=a}}(e);var r=n.style,a={};for(var o in e)t&&(a[o]=r[o]||""),r[o]=e[o];return a}var Oi="transition",Mi="transform",Di="transform",$i="transitionend";var Ui=function(){},Fi={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Ui,onClose:Ui,onGrab:Ui,onMove:Ui,onRelease:Ui,onBeforeOpen:Ui,onBeforeClose:Ui,onBeforeGrab:Ui,onBeforeRelease:Ui,onImageLoading:Ui,onImageLoaded:Ui},Vi={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),Wi(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,a=this.lastScrollPosition.y-t,o=this.options.scrollThreshold;(Math.abs(a)>=o||Math.abs(r)>=o)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(Hi(n)&&!Wi(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){Hi(n)&&!Wi(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function Hi(n){return 0===n.button}function Wi(n){return n.metaKey||n.ctrlKey}var Ji={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Ni(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Ii(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Ni(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},Gi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Qi=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),Zi=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},Ki={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=zi(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,a=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Bi:Ti,transition:Di+"\n        "+r+"s\n        "+a,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Ni(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Ni(this.el,{transform:"none"})},grab:function(n,e,t){var r=Xi(),a=r.x-n,o=r.y-e;Ni(this.el,{cursor:qi,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=Xi(),a=r.x-n,o=r.y-e;Ni(this.el,{transition:Di,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Ni(this.el,this.styleClose)},restoreOpenStyle:function(){Ni(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=Xi(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,a=r.customSize,o=r.scaleBase;if(!a&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(a&&"object"===(void 0===a?"undefined":Gi(a)))return{x:a.width/this.rect.width,y:a.height/this.rect.height};var s=this.rect.width/2,i=this.rect.height/2,l=Xi(),c={x:l.x-s,y:l.y-i},p=c.x/s,u=c.y/i,d=o+Math.min(p,u);if(a&&"string"==typeof a){var m=t||this.el.naturalWidth,f=e||this.el.naturalHeight,h=parseFloat(a)*m/(100*this.rect.width),g=parseFloat(a)*f/(100*this.rect.height);if(d>h||d>g)return{x:h,y:g}}return{x:d,y:d}}};function Xi(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function Yi(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){Ii(n,r,e[r],t)}))}var nl=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(Ki),this.overlay=Object.create(Ji),this.handler=Object.create(Vi),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=Zi({},Fi,e),this.overlay.init(this),this.handler.init(this)}return Qi(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Pi,Ii(n,"click",this.handler.click),this.options.preloadImage&&Li(zi(n)));return this}},{key:"config",value:function(n){return n?(Zi(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var a=this.target.srcOriginal;null!=a&&(this.options.onImageLoading(r),Li(a,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Ii(document,"scroll",this.handler.scroll),Ii(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Ii(window,"resize",this.handler.resizeWindow);var o=function n(){Ii(r,$i,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&Yi(document,e.handler,!0),t(r)};return Ii(r,$i,o),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Ci,this.overlay.fadeOut(),this.target.zoomOut(),Ii(document,"scroll",this.handler.scroll,!1),Ii(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Ii(window,"resize",this.handler.resizeWindow,!1);var r=function r(){Ii(t,$i,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&Yi(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Ii(t,$i,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var a=this.target.el;this.options.onBeforeGrab(a),this.released=!1,this.target.grab(n,e,t);var o=function n(){Ii(a,$i,n,!1),r(a)};return Ii(a,$i,o),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=qi,this.target.move(n,e,t);var a=this.target.el,o=function n(){Ii(a,$i,n,!1),r(a)};return Ii(a,$i,o),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Ci,this.target.restoreOpenStyle();var r=function r(){Ii(t,$i,r,!1),n.lock=!1,n.released=!0,e(t)};return Ii(t,$i,r),this}}}]),n}();const el=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),tl=Number("500");class rl{constructor(){this.instance=new nl(el)}update(n=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(n)}updateDelay(n=".theme-vdoing-content img:not(.no-zoom)",e=tl){setTimeout(()=>this.update(n),e)}}var al=[vi,wi,Ai,Si,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new rl,this.$vuepress.zooming.updateDelay()}}],ol={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return di("layout",n),Jt.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},sl=t(4),il=Object(sl.a)(ol,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(il,"mixins",al);const ll=[{name:"v-3b5d8337",path:"/web/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-3b5d8337").then(t)}},{path:"/web/index.html",redirect:"/web/"},{path:"/00.目录页/01.前端.html",redirect:"/web/"},{name:"v-3ebbaadb",path:"/movie/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-3ebbaadb").then(t)}},{path:"/movie/index.html",redirect:"/movie/"},{path:"/00.目录页/03.影音.html",redirect:"/movie/"},{name:"v-0b243e00",path:"/random/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-0b243e00").then(t)}},{path:"/random/index.html",redirect:"/random/"},{path:"/00.目录页/02.随笔.html",redirect:"/random/"},{name:"v-9edea330",path:"/collect/website/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-9edea330").then(t)}},{path:"/collect/website/index.html",redirect:"/collect/website/"},{path:"/00.目录页/04.收藏.html",redirect:"/collect/website/"},{name:"v-776f7066",path:"/harmony/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-776f7066").then(t)}},{path:"/harmony/index.html",redirect:"/harmony/"},{path:"/00.目录页/05.HarmonyOS.html",redirect:"/harmony/"},{name:"v-e079fa76",path:"/note/node/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-e079fa76").then(t)}},{path:"/note/node/index.html",redirect:"/note/node/"},{path:"/01.前端/00.学习笔记/03.《NodeJs》笔记.html",redirect:"/note/node/"},{name:"v-01ac97e2",path:"/note/react/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-01ac97e2").then(t)}},{path:"/note/react/index.html",redirect:"/note/react/"},{path:"/01.前端/00.学习笔记/02.《React》笔记.html",redirect:"/note/react/"},{name:"v-0ac410c2",path:"/note/vue/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-0ac410c2").then(t)}},{path:"/note/vue/index.html",redirect:"/note/vue/"},{path:"/01.前端/00.学习笔记/01.《Vue》笔记.html",redirect:"/note/vue/"},{name:"v-896430d0",path:"/random/mock/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-896430d0").then(t)}},{path:"/random/mock/index.html",redirect:"/random/mock/"},{path:"/02.随笔/00.随性之笔/01.Mock使用.html",redirect:"/random/mock/"},{name:"v-8bef18fe",path:"/note/redis/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-8bef18fe").then(t)}},{path:"/note/redis/index.html",redirect:"/note/redis/"},{path:"/01.前端/00.学习笔记/05.《Redis》笔记.html",redirect:"/note/redis/"},{name:"v-12f0f653",path:"/note/css/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-12f0f653").then(t)}},{path:"/note/css/index.html",redirect:"/note/css/"},{path:"/01.前端/00.学习笔记/04.《CSS》笔记.html",redirect:"/note/css/"},{name:"v-284fab67",path:"/pages/a7d3bf/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-284fab67").then(t)}},{path:"/pages/a7d3bf/index.html",redirect:"/pages/a7d3bf/"},{path:"/02.随笔/00.随性之笔/05.在TypeScript中,import type和import的区别.html",redirect:"/pages/a7d3bf/"},{name:"v-21037cc0",path:"/random/git/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-21037cc0").then(t)}},{path:"/random/git/index.html",redirect:"/random/git/"},{path:"/02.随笔/00.随性之笔/03.Git相关.html",redirect:"/random/git/"},{name:"v-85da3806",path:"/pages/12eb8f/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-85da3806").then(t)}},{path:"/pages/12eb8f/index.html",redirect:"/pages/12eb8f/"},{path:"/02.随笔/00.随性之笔/07.vscode之vue项目中实现@路径提示.html",redirect:"/pages/12eb8f/"},{name:"v-237b056a",path:"/pages/b1603a/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-237b056a").then(t)}},{path:"/pages/b1603a/index.html",redirect:"/pages/b1603a/"},{path:"/02.随笔/00.随性之笔/08.使用vite构建js库并发布到npm.html",redirect:"/pages/b1603a/"},{name:"v-7ec46ca2",path:"/random/mysql/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-7ec46ca2").then(t)}},{path:"/random/mysql/index.html",redirect:"/random/mysql/"},{path:"/02.随笔/00.随性之笔/02.MySQL.html",redirect:"/random/mysql/"},{name:"v-010c72bd",path:"/harmony/base/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-010c72bd").then(t)}},{path:"/harmony/base/index.html",redirect:"/harmony/base/"},{path:"/03.HarmonyOS相关/01.基础入门/01.基础入门.html",redirect:"/harmony/base/"},{name:"v-25969ecc",path:"/pages/15c17d/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-25969ecc").then(t)}},{path:"/pages/15c17d/index.html",redirect:"/pages/15c17d/"},{path:"/02.随笔/00.随性之笔/09.vite构建js库兼容传统浏览器.html",redirect:"/pages/15c17d/"},{name:"v-8d40ad16",path:"/pages/5699bd/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-8d40ad16").then(t)}},{path:"/pages/5699bd/index.html",redirect:"/pages/5699bd/"},{path:"/04.about/01.about.html",redirect:"/pages/5699bd/"},{name:"v-31e75d76",path:"/pages/6085ec/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-31e75d76").then(t)}},{path:"/pages/6085ec/index.html",redirect:"/pages/6085ec/"},{path:"/HarmonyOS/01.基础入门/02.ArkTS基础之自定义组件.html",redirect:"/pages/6085ec/"},{name:"v-5cf8ceef",path:"/pages/b80833/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-5cf8ceef").then(t)}},{path:"/pages/b80833/index.html",redirect:"/pages/b80833/"},{path:"/HarmonyOS/01.基础入门/03.ArkTS基础之页面与自定义组件生命周期.html",redirect:"/pages/b80833/"},{name:"v-649d02ba",path:"/pages/60613a/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-649d02ba").then(t)}},{path:"/pages/60613a/index.html",redirect:"/pages/60613a/"},{path:"/Git/01.Git相关/01.本地仓库关联远程仓库，拉取代码及提交.html",redirect:"/pages/60613a/"},{name:"v-0e03698e",path:"/pages/2403dc/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-0e03698e").then(t)}},{path:"/pages/2403dc/index.html",redirect:"/pages/2403dc/"},{path:"/Mock/01.mock/02.Mock的基本使用及拦截axios请求.html",redirect:"/pages/2403dc/"},{name:"v-794c0a92",path:"/pages/dba329/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-794c0a92").then(t)}},{path:"/pages/dba329/index.html",redirect:"/pages/dba329/"},{path:"/MySQL/01.MySQL/01.Mac上安装MySQL以及MySQL基本操作.html",redirect:"/pages/dba329/"},{name:"v-87620ef4",path:"/pages/beb076/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-87620ef4").then(t)}},{path:"/pages/beb076/index.html",redirect:"/pages/beb076/"},{path:"/MySQL/01.MySQL/03.本地数据库导出然后上传到服务器，并访问服务器数据库.html",redirect:"/pages/beb076/"},{name:"v-8259770e",path:"/pages/6b9001/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-8259770e").then(t)}},{path:"/pages/6b9001/index.html",redirect:"/pages/6b9001/"},{path:"/HarmonyOS/01.基础入门/05.ohpm安装及配置.html",redirect:"/pages/6b9001/"},{name:"v-5ca57a3b",path:"/pages/65340b/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-5ca57a3b").then(t)}},{path:"/pages/65340b/index.html",redirect:"/pages/65340b/"},{path:"/HarmonyOS/01.基础入门/01.项目简介.html",redirect:"/pages/65340b/"},{name:"v-7b6f6e1b",path:"/pages/f179f3/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-7b6f6e1b").then(t)}},{path:"/pages/f179f3/index.html",redirect:"/pages/f179f3/"},{path:"/MySQL/01.MySQL/02.DBeaver导出sql.html",redirect:"/pages/f179f3/"},{name:"v-2d3557d4",path:"/pages/add86b/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-2d3557d4").then(t)}},{path:"/pages/add86b/index.html",redirect:"/pages/add86b/"},{path:"/HarmonyOS/01.基础入门/04.Column&Row组件的使用.html",redirect:"/pages/add86b/"},{name:"v-6cfe6b55",path:"/tags/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-6cfe6b55").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-22521ed5",path:"/pages/dcaaea/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-22521ed5").then(t)}},{path:"/pages/dcaaea/index.html",redirect:"/pages/dcaaea/"},{path:"/《CSS》笔记/01.Less/01.Less基本用法.html",redirect:"/pages/dcaaea/"},{name:"v-323c9456",path:"/archives/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-323c9456").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-cd1bf684",path:"/pages/7a2ad5/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-cd1bf684").then(t)}},{path:"/pages/7a2ad5/index.html",redirect:"/pages/7a2ad5/"},{path:"/《CSS》笔记/02.CSS/02.switch效果实现.html",redirect:"/pages/7a2ad5/"},{name:"v-5afc0b22",path:"/pages/245711/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-5afc0b22").then(t)}},{path:"/pages/245711/index.html",redirect:"/pages/245711/"},{path:"/02.随笔/00.随性之笔/06.vscode之代码跳转到定义(vue文件和js文件).html",redirect:"/pages/245711/"},{name:"v-b8bdf9b0",path:"/pages/2dd5ad/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-b8bdf9b0").then(t)}},{path:"/pages/2dd5ad/index.html",redirect:"/pages/2dd5ad/"},{path:"/《NodeJs》笔记/01.Express/01.使用Express搭建服务器.html",redirect:"/pages/2dd5ad/"},{name:"v-70dd7e02",path:"/pages/20cc42/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-70dd7e02").then(t)}},{path:"/pages/20cc42/index.html",redirect:"/pages/20cc42/"},{path:"/《CSS》笔记/02.CSS/03.甜甜圈加载效果.html",redirect:"/pages/20cc42/"},{name:"v-f68dfbdc",path:"/pages/a2dc8a/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-f68dfbdc").then(t)}},{path:"/pages/a2dc8a/index.html",redirect:"/pages/a2dc8a/"},{path:"/《NodeJs》笔记/01.Express/03.Express之get请求与post请求.html",redirect:"/pages/a2dc8a/"},{name:"v-f57d762a",path:"/pages/50dc5b/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-f57d762a").then(t)}},{path:"/pages/50dc5b/index.html",redirect:"/pages/50dc5b/"},{path:"/《CSS》笔记/03.瀑布流布局/01.瀑布流布局.html",redirect:"/pages/50dc5b/"},{name:"v-4b103e52",path:"/pages/79f61e/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-4b103e52").then(t)}},{path:"/pages/79f61e/index.html",redirect:"/pages/79f61e/"},{path:"/《NodeJs》笔记/01.Express/04.Node多环境配置(开发环境、生产环境).html",redirect:"/pages/79f61e/"},{name:"v-bafcd148",path:"/pages/dfd853/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-bafcd148").then(t)}},{path:"/pages/dfd853/index.html",redirect:"/pages/dfd853/"},{path:"/《NodeJs》笔记/01.Express/02.Express连接数据库MySQL.html",redirect:"/pages/dfd853/"},{name:"v-51ebefb8",path:"/pages/6ee7ee/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-51ebefb8").then(t)}},{path:"/pages/6ee7ee/index.html",redirect:"/pages/6ee7ee/"},{path:"/《CSS》笔记/02.CSS/01.自定义复选框checkbox样式.html",redirect:"/pages/6ee7ee/"},{name:"v-157e2a4c",path:"/pages/eb12e5/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-157e2a4c").then(t)}},{path:"/pages/eb12e5/index.html",redirect:"/pages/eb12e5/"},{path:"/《NodeJs》笔记/02.Koa/02.koa连接数据库.html",redirect:"/pages/eb12e5/"},{name:"v-d1164148",path:"/pages/0de10f/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-d1164148").then(t)}},{path:"/pages/0de10f/index.html",redirect:"/pages/0de10f/"},{path:"/《NodeJs》笔记/02.Koa/03.用户认证之jsonwebtoken.html",redirect:"/pages/0de10f/"},{name:"v-0e56de60",path:"/pages/ccb7df/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-0e56de60").then(t)}},{path:"/pages/ccb7df/index.html",redirect:"/pages/ccb7df/"},{path:"/《NodeJs》笔记/02.Koa/01.koa应用搭建与路由配置.html",redirect:"/pages/ccb7df/"},{name:"v-f4442e50",path:"/pages/ec6b29/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-f4442e50").then(t)}},{path:"/pages/ec6b29/index.html",redirect:"/pages/ec6b29/"},{path:"/《NodeJs》笔记/03.Egg/01.使用脚手架快速初始化Egg项目.html",redirect:"/pages/ec6b29/"},{name:"v-d4d2438e",path:"/pages/1d8e0d/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-d4d2438e").then(t)}},{path:"/pages/1d8e0d/index.html",redirect:"/pages/1d8e0d/"},{path:"/《NodeJs》笔记/03.Egg/03.Egg之数据库的基本操作，增、删、改、查.html",redirect:"/pages/1d8e0d/"},{name:"v-92062b1e",path:"/pages/858357/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-92062b1e").then(t)}},{path:"/pages/858357/index.html",redirect:"/pages/858357/"},{path:"/《NodeJs》笔记/03.Egg/05.上传图片到项目指定文件夹下.html",redirect:"/pages/858357/"},{name:"v-cfc880be",path:"/pages/d9909a/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-cfc880be").then(t)}},{path:"/pages/d9909a/index.html",redirect:"/pages/d9909a/"},{path:"/《NodeJs》笔记/03.Egg/02.Egg之实现接口API并连接mysql数据库.html",redirect:"/pages/d9909a/"},{name:"v-2b4726f4",path:"/pages/2bef2d/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-2b4726f4").then(t)}},{path:"/pages/2bef2d/index.html",redirect:"/pages/2bef2d/"},{path:"/《NodeJs》笔记/03.Egg/04.egg-jwt登录鉴权.html",redirect:"/pages/2bef2d/"},{name:"v-0b57bbc2",path:"/pages/40bfee/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-0b57bbc2").then(t)}},{path:"/pages/40bfee/index.html",redirect:"/pages/40bfee/"},{path:"/《NodeJs》笔记/03.Egg/07.使用ApiDoc生成接口文档.html",redirect:"/pages/40bfee/"},{name:"v-16738502",path:"/pages/157510/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-16738502").then(t)}},{path:"/pages/157510/index.html",redirect:"/pages/157510/"},{path:"/《NodeJs》笔记/04.Node相关/02.Node升级后，项目运行或打包报错.html",redirect:"/pages/157510/"},{name:"v-6b223d4e",path:"/pages/c045b4/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-6b223d4e").then(t)}},{path:"/pages/c045b4/index.html",redirect:"/pages/c045b4/"},{path:"/《NodeJs》笔记/03.Egg/06.上传图片到七牛云.html",redirect:"/pages/c045b4/"},{name:"v-4a82f017",path:"/pages/a6152f/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-4a82f017").then(t)}},{path:"/pages/a6152f/index.html",redirect:"/pages/a6152f/"},{path:"/《React》笔记/01.React/02.hook-useEffect.html",redirect:"/pages/a6152f/"},{name:"v-7a1fa96d",path:"/pages/2be28a/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-7a1fa96d").then(t)}},{path:"/pages/2be28a/index.html",redirect:"/pages/2be28a/"},{path:"/《React》笔记/01.React/01.create-react-app.html",redirect:"/pages/2be28a/"},{name:"v-10cc7a82",path:"/pages/1f73d1/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-10cc7a82").then(t)}},{path:"/pages/1f73d1/index.html",redirect:"/pages/1f73d1/"},{path:"/《NodeJs》笔记/04.Node相关/01.npm、nvm、nrm相关知识.html",redirect:"/pages/1f73d1/"},{name:"v-a99d4dc2",path:"/pages/81ee3b/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-a99d4dc2").then(t)}},{path:"/pages/81ee3b/index.html",redirect:"/pages/81ee3b/"},{path:"/《React》笔记/01.React/06.React之生命周期钩子.html",redirect:"/pages/81ee3b/"},{name:"v-126035b2",path:"/pages/a9fc09/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-126035b2").then(t)}},{path:"/pages/a9fc09/index.html",redirect:"/pages/a9fc09/"},{path:"/《React》笔记/01.React/07.React之key的使用.html",redirect:"/pages/a9fc09/"},{name:"v-3ae7c090",path:"/pages/c59606/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-3ae7c090").then(t)}},{path:"/pages/c59606/index.html",redirect:"/pages/c59606/"},{path:"/《React》笔记/01.React/08.React之代理服务器配置.html",redirect:"/pages/c59606/"},{name:"v-46f6b44c",path:"/pages/266ff7/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-46f6b44c").then(t)}},{path:"/pages/266ff7/index.html",redirect:"/pages/266ff7/"},{path:"/《React》笔记/01.React/09.React之封装全局Loading组件.html",redirect:"/pages/266ff7/"},{name:"v-17889702",path:"/pages/dcc0fa/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-17889702").then(t)}},{path:"/pages/dcc0fa/index.html",redirect:"/pages/dcc0fa/"},{path:"/《React》笔记/01.React/10.React之消息的发布-订阅(pubsub-js).html",redirect:"/pages/dcc0fa/"},{name:"v-6242d2ea",path:"/pages/ca05b9/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-6242d2ea").then(t)}},{path:"/pages/ca05b9/index.html",redirect:"/pages/ca05b9/"},{path:"/《React》笔记/01.React/04.React之props传值并对其进行限制.html",redirect:"/pages/ca05b9/"},{name:"v-1267ca51",path:"/pages/517c91/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-1267ca51").then(t)}},{path:"/pages/517c91/index.html",redirect:"/pages/517c91/"},{path:"/《React》笔记/01.React/03.React之事件绑定及简写方式.html",redirect:"/pages/517c91/"},{name:"v-058fed96",path:"/categories/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-058fed96").then(t)}},{path:"/categories/index.html",redirect:"/categories/"},{path:"/@pages/categoriesPage.html",redirect:"/categories/"},{name:"v-aeeee3d6",path:"/pages/707c70/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-aeeee3d6").then(t)}},{path:"/pages/707c70/index.html",redirect:"/pages/707c70/"},{path:"/《React》笔记/01.React/11.React之Redux的基本使用.html",redirect:"/pages/707c70/"},{name:"v-7431bba6",path:"/pages/424f92/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-7431bba6").then(t)}},{path:"/pages/424f92/index.html",redirect:"/pages/424f92/"},{path:"/《React》笔记/01.React/13.React之redux的数据持久化存储.html",redirect:"/pages/424f92/"},{name:"v-ef68ffac",path:"/pages/13dc2b/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-ef68ffac").then(t)}},{path:"/pages/13dc2b/index.html",redirect:"/pages/13dc2b/"},{path:"/《React》笔记/01.React/14.React之路由懒加载.html",redirect:"/pages/13dc2b/"},{name:"v-3bf85657",path:"/pages/d89cab/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-3bf85657").then(t)}},{path:"/pages/d89cab/index.html",redirect:"/pages/d89cab/"},{path:"/《React》笔记/01.React/05.React之Refs的基本使用.html",redirect:"/pages/d89cab/"},{name:"v-61f38f29",path:"/pages/e3496f/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-61f38f29").then(t)}},{path:"/pages/e3496f/index.html",redirect:"/pages/e3496f/"},{path:"/《React》笔记/01.React/15.React之Render Props的使用.html",redirect:"/pages/e3496f/"},{name:"v-dadd89f2",path:"/pages/a729d6/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-dadd89f2").then(t)}},{path:"/pages/a729d6/index.html",redirect:"/pages/a729d6/"},{path:"/《React》笔记/01.React/16.React之createBrowserRouter.html",redirect:"/pages/a729d6/"},{name:"v-1635394c",path:"/pages/9c12e8/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-1635394c").then(t)}},{path:"/pages/9c12e8/index.html",redirect:"/pages/9c12e8/"},{path:"/《React》笔记/01.React/18.React之craco打包优化配置.html",redirect:"/pages/9c12e8/"},{name:"v-084f1662",path:"/pages/a51345/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-084f1662").then(t)}},{path:"/pages/a51345/index.html",redirect:"/pages/a51345/"},{path:"/《React》笔记/01.React/21.React之使用vite创建项目.html",redirect:"/pages/a51345/"},{name:"v-e48af10a",path:"/pages/82cb44/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-e48af10a").then(t)}},{path:"/pages/82cb44/index.html",redirect:"/pages/82cb44/"},{path:"/《React》笔记/01.React/12.React之react-redux的基本使用.html",redirect:"/pages/82cb44/"},{name:"v-ccf187c2",path:"/pages/255759/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-ccf187c2").then(t)}},{path:"/pages/255759/index.html",redirect:"/pages/255759/"},{path:"/《React》笔记/01.React/22.React之ts类型标注汇总.html",redirect:"/pages/255759/"},{name:"v-14a81e9c",path:"/pages/982518/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-14a81e9c").then(t)}},{path:"/pages/982518/index.html",redirect:"/pages/982518/"},{path:"/《React》笔记/01.React/23.React之使用 ant design搭建后台管理.html",redirect:"/pages/982518/"},{name:"v-51e34ce2",path:"/pages/918a62/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-51e34ce2").then(t)}},{path:"/pages/918a62/index.html",redirect:"/pages/918a62/"},{path:"/《React》笔记/01.React/25.React之使用vite创建组件库并发布到npm.html",redirect:"/pages/918a62/"},{name:"v-34b807f3",path:"/pages/dd9ea5/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-34b807f3").then(t)}},{path:"/pages/dd9ea5/index.html",redirect:"/pages/dd9ea5/"},{path:"/《React》笔记/01.React/19.React之项目国际化.html",redirect:"/pages/dd9ea5/"},{name:"v-4f9e9097",path:"/pages/127ba0/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-4f9e9097").then(t)}},{path:"/pages/127ba0/index.html",redirect:"/pages/127ba0/"},{path:"/《React》笔记/01.React/26.React之项目打包部署到nginx.html",redirect:"/pages/127ba0/"},{name:"v-fbcea828",path:"/pages/7e1b82/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-fbcea828").then(t)}},{path:"/pages/7e1b82/index.html",redirect:"/pages/7e1b82/"},{path:"/《React》笔记/01.React/24.React之路由切换动画.html",redirect:"/pages/7e1b82/"},{name:"v-14faef13",path:"/pages/9266a7/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-14faef13").then(t)}},{path:"/pages/9266a7/index.html",redirect:"/pages/9266a7/"},{path:"/《React》笔记/01.React/27.React之自定义组件添加className与style.html",redirect:"/pages/9266a7/"},{name:"v-1eda0c4c",path:"/pages/c4a432/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-1eda0c4c").then(t)}},{path:"/pages/c4a432/index.html",redirect:"/pages/c4a432/"},{path:"/《React》笔记/01.React/17.React之路径别名@配置.html",redirect:"/pages/c4a432/"},{name:"v-3ef19a12",path:"/pages/643cae/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-3ef19a12").then(t)}},{path:"/pages/643cae/index.html",redirect:"/pages/643cae/"},{path:"/《React》笔记/02.React Native/02.React Native之安卓apk架构区别解析.html",redirect:"/pages/643cae/"},{name:"v-be0ed572",path:"/pages/3ca574/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-be0ed572").then(t)}},{path:"/pages/3ca574/index.html",redirect:"/pages/3ca574/"},{path:"/《React》笔记/02.React Native/03.React Native之打包安卓修改Apk文件名.html",redirect:"/pages/3ca574/"},{name:"v-0e93f0aa",path:"/pages/6f6b6c/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-0e93f0aa").then(t)}},{path:"/pages/6f6b6c/index.html",redirect:"/pages/6f6b6c/"},{path:"/《React》笔记/02.React Native/05.React Native之h5唤起APP配置.html",redirect:"/pages/6f6b6c/"},{name:"v-742054b3",path:"/pages/3210df/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-742054b3").then(t)}},{path:"/pages/3210df/index.html",redirect:"/pages/3210df/"},{path:"/《React》笔记/02.React Native/04.React Native之项目创建以及路由配置.html",redirect:"/pages/3210df/"},{name:"v-b763c544",path:"/pages/2e5144/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-b763c544").then(t)}},{path:"/pages/2e5144/index.html",redirect:"/pages/2e5144/"},{path:"/《React》笔记/01.React/20.React之postcss-pxtorem移动端适配.html",redirect:"/pages/2e5144/"},{name:"v-d7e22d48",path:"/pages/1b0979/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-d7e22d48").then(t)}},{path:"/pages/1b0979/index.html",redirect:"/pages/1b0979/"},{path:"/《React》笔记/02.React Native/06.React Native之保存图片到相册.html",redirect:"/pages/1b0979/"},{name:"v-25645ad7",path:"/pages/1d91bb/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-25645ad7").then(t)}},{path:"/pages/1d91bb/index.html",redirect:"/pages/1d91bb/"},{path:"/《React》笔记/02.React Native/01.React Native之打包安卓apk优化.html",redirect:"/pages/1d91bb/"},{name:"v-ae666c46",path:"/pages/b3075a/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-ae666c46").then(t)}},{path:"/pages/b3075a/index.html",redirect:"/pages/b3075a/"},{path:"/《Redis》笔记/01.Redis/02.Redis 字符串(String).html",redirect:"/pages/b3075a/"},{name:"v-fecec612",path:"/pages/8080fa/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-fecec612").then(t)}},{path:"/pages/8080fa/index.html",redirect:"/pages/8080fa/"},{path:"/《Redis》笔记/01.Redis/03.Express+Redis使用.html",redirect:"/pages/8080fa/"},{name:"v-381ec16a",path:"/pages/2ddb27/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-381ec16a").then(t)}},{path:"/pages/2ddb27/index.html",redirect:"/pages/2ddb27/"},{path:"/《React》笔记/02.React Native/07.React Native之路径别名配置.html",redirect:"/pages/2ddb27/"},{name:"v-1507f304",path:"/pages/6b2dfb/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-1507f304").then(t)}},{path:"/pages/6b2dfb/index.html",redirect:"/pages/6b2dfb/"},{path:"/《Redis》笔记/01.Redis/05.Redis与MySQL的区别以及搭配使用.html",redirect:"/pages/6b2dfb/"},{name:"v-08a1cbcd",path:"/pages/fcc805/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-08a1cbcd").then(t)}},{path:"/pages/fcc805/index.html",redirect:"/pages/fcc805/"},{path:"/《Redis》笔记/01.Redis/04.Redis key命令.html",redirect:"/pages/fcc805/"},{name:"v-4690c124",path:"/pages/3a53e1/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-4690c124").then(t)}},{path:"/pages/3a53e1/index.html",redirect:"/pages/3a53e1/"},{path:"/《Vue》笔记/01.Vue2/03.element ui之图片上传到阿里云oss上.html",redirect:"/pages/3a53e1/"},{name:"v-34bd4ee4",path:"/pages/109b92/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-34bd4ee4").then(t)}},{path:"/pages/109b92/index.html",redirect:"/pages/109b92/"},{path:"/《Vue》笔记/01.Vue2/04.element ui之表格拖拽排序.html",redirect:"/pages/109b92/"},{name:"v-7da5161e",path:"/pages/289945/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-7da5161e").then(t)}},{path:"/pages/289945/index.html",redirect:"/pages/289945/"},{path:"/《Vue》笔记/01.Vue2/05.vue动态添加路由后刷新页面白屏问题.html",redirect:"/pages/289945/"},{name:"v-5cf9b43e",path:"/pages/2e5ed7/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-5cf9b43e").then(t)}},{path:"/pages/2e5ed7/index.html",redirect:"/pages/2e5ed7/"},{path:"/《Vue》笔记/01.Vue2/06.vue安装依赖报错.html",redirect:"/pages/2e5ed7/"},{name:"v-1be43b76",path:"/pages/e7f710/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-1be43b76").then(t)}},{path:"/pages/e7f710/index.html",redirect:"/pages/e7f710/"},{path:"/《Redis》笔记/01.Redis/06.Redis 哈希(hash).html",redirect:"/pages/e7f710/"},{name:"v-205e5ac6",path:"/pages/1cca7c/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-205e5ac6").then(t)}},{path:"/pages/1cca7c/index.html",redirect:"/pages/1cca7c/"},{path:"/《Vue》笔记/01.Vue2/07.vue项目使用postcss-pxtorem来实现移动端适配.html",redirect:"/pages/1cca7c/"},{name:"v-e94a252a",path:"/pages/0856ce/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-e94a252a").then(t)}},{path:"/pages/0856ce/index.html",redirect:"/pages/0856ce/"},{path:"/《Vue》笔记/02.Vue3/01.navigation-guard.html",redirect:"/pages/0856ce/"},{name:"v-5edd67ee",path:"/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-5edd67ee").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-032a5082",path:"/pages/0856be/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-032a5082").then(t)}},{path:"/pages/0856be/index.html",redirect:"/pages/0856be/"},{path:"/《Vue》笔记/02.Vue3/02.vue3setup函数与语法糖对比.html",redirect:"/pages/0856be/"},{name:"v-7527acb6",path:"/pages/d607c0/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-7527acb6").then(t)}},{path:"/pages/d607c0/index.html",redirect:"/pages/d607c0/"},{path:"/《Vue》笔记/01.Vue2/08.vue之低版本浏览器兼容.html",redirect:"/pages/d607c0/"},{name:"v-7f3ad0a8",path:"/pages/c63b43/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-7f3ad0a8").then(t)}},{path:"/pages/c63b43/index.html",redirect:"/pages/c63b43/"},{path:"/《Redis》笔记/01.Redis/01.Redis安装与基本使用.html",redirect:"/pages/c63b43/"},{name:"v-7cab3a1e",path:"/pages/040685/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-7cab3a1e").then(t)}},{path:"/pages/040685/index.html",redirect:"/pages/040685/"},{path:"/《Vue》笔记/01.Vue2/09.eslint报错汇总.html",redirect:"/pages/040685/"},{name:"v-1bfa6712",path:"/pages/64779d/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-1bfa6712").then(t)}},{path:"/pages/64779d/index.html",redirect:"/pages/64779d/"},{path:"/《Vue》笔记/02.Vue3/06.使用vue-cli脚手架搭建vue3项目踩坑.html",redirect:"/pages/64779d/"},{name:"v-4ef7f0c7",path:"/pages/273d1e/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-4ef7f0c7").then(t)}},{path:"/pages/273d1e/index.html",redirect:"/pages/273d1e/"},{path:"/《Vue》笔记/02.Vue3/05.使用vite搭建vue3+TS项目及基础配置.html",redirect:"/pages/273d1e/"},{name:"v-b2180af4",path:"/pages/7009d7/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-b2180af4").then(t)}},{path:"/pages/7009d7/index.html",redirect:"/pages/7009d7/"},{path:"/《Vue》笔记/02.Vue3/07.vue3之使用vite搭建组件库.html",redirect:"/pages/7009d7/"},{name:"v-3314645a",path:"/pages/c18c83/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-3314645a").then(t)}},{path:"/pages/c18c83/index.html",redirect:"/pages/c18c83/"},{path:"/《Vue》笔记/02.Vue3/03.状态管理Pinia.html",redirect:"/pages/c18c83/"},{name:"v-2b48a6f6",path:"/pages/2c51f3/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-2b48a6f6").then(t)}},{path:"/pages/2c51f3/index.html",redirect:"/pages/2c51f3/"},{path:"/《Vue》笔记/02.Vue3/04.项目国际化.html",redirect:"/pages/2c51f3/"},{name:"v-232e62ea",path:"/pages/10d64c/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-232e62ea").then(t)}},{path:"/pages/10d64c/index.html",redirect:"/pages/10d64c/"},{path:"/《Vue》笔记/01.Vue2/01.项目国际化.html",redirect:"/pages/10d64c/"},{name:"v-0e4cbbff",path:"/pages/679367/",component:il,beforeEnter:(n,e,t)=>{ui("Layout","v-0e4cbbff").then(t)}},{path:"/pages/679367/index.html",redirect:"/pages/679367/"},{path:"/《Vue》笔记/01.Vue2/02.element ui之图片预览.html",redirect:"/pages/679367/"},{path:"*",component:il}],cl={title:"leiwuhen-67's blog",description:"web前端技术博客,专注web前端学习与总结。JavaScript,js,ES6,TypeScript,vue,React,css3,html5,Node,git,github等技术文章。",base:"/",headTags:[["link",{rel:"icon",href:"/favicon.ico"}],["meta",{name:"viewport",content:"width=device-width,initial-scale=1,user-scalable=no"}]],pages:[{title:"前端",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"01.前端",imgUrl:"/assets/img/web.png",description:"JavaScript、Vue、React框架等前端技术"}},title:"前端",date:"2022-05-19T15:02:35.000Z",permalink:"/web",sidebar:!1,article:!1,comment:!0,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/01.%E5%89%8D%E7%AB%AF.html",relativePath:"00.目录页/01.前端.md",key:"v-3b5d8337",path:"/web/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"影音视听",frontmatter:{title:"影音视听",permalink:"/movie",sidebar:!1,article:!1,comment:!0,editLink:!1,date:"2022-05-20T10:53:56.000Z"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/03.%E5%BD%B1%E9%9F%B3.html",relativePath:"00.目录页/03.影音.md",key:"v-3ebbaadb",path:"/movie/",headers:[{level:2,title:"影视",slug:"影视",normalizedTitle:"影视",charIndex:2},{level:2,title:"视频在线解析",slug:"视频在线解析",normalizedTitle:"视频在线解析",charIndex:76},{level:2,title:"音乐",slug:"音乐",normalizedTitle:"音乐",charIndex:104}],lastUpdated:"6/13/2025, 4:49:21 PM",lastUpdatedTimestamp:1749804561e3,headersStr:"影视 视频在线解析 音乐",content:"# 影视\n\n * 蛋蛋趣\n * 达达龟\n * LIBVIO 影视\n * APP 影院\n * 电影港网\n * 晨羽影视\n * 搜片\n * 剧哈哈\n\n\n# 视频在线解析\n\n * 冰豆解析\n * 爱豆解析\n\n\n# 音乐\n\n * GD 音乐台\n * XCloud 音乐\n * 泡椒音乐\n * 闪闪音乐\n * 米兔音乐",normalizedContent:"# 影视\n\n * 蛋蛋趣\n * 达达龟\n * libvio 影视\n * app 影院\n * 电影港网\n * 晨羽影视\n * 搜片\n * 剧哈哈\n\n\n# 视频在线解析\n\n * 冰豆解析\n * 爱豆解析\n\n\n# 音乐\n\n * gd 音乐台\n * xcloud 音乐\n * 泡椒音乐\n * 闪闪音乐\n * 米兔音乐",charsets:{cjk:!0}},{title:"随性之笔",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"02.随笔",imgUrl:"/assets/img/ui.png",description:"随笔"}},title:"随性之笔",date:"2022-05-19T15:02:35.000Z",permalink:"/random",sidebar:!1,article:!1,comment:!0,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/02.%E9%9A%8F%E7%AC%94.html",relativePath:"00.目录页/02.随笔.md",key:"v-0b243e00",path:"/random/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"网站收藏",frontmatter:{title:"网站收藏",permalink:"/collect/website",sidebar:!0,article:!1,comment:!0,editLink:!1,date:"2022-05-20T11:25:57.000Z"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/04.%E6%94%B6%E8%97%8F.html",relativePath:"00.目录页/04.收藏.md",key:"v-9edea330",path:"/collect/website/",headers:[{level:2,title:"在线学习",slug:"在线学习",normalizedTitle:"在线学习",charIndex:2},{level:2,title:"JS框架",slug:"js框架",normalizedTitle:"js 框架",charIndex:67},{level:2,title:"CSS",slug:"css",normalizedTitle:"css",charIndex:193},{level:2,title:"NodeJs",slug:"nodejs",normalizedTitle:"nodejs",charIndex:239},{level:2,title:"前端插件(类库)",slug:"前端插件-类库",normalizedTitle:"前端插件 (类库)",charIndex:353},{level:2,title:"移动端UI框架",slug:"移动端ui框架",normalizedTitle:"移动端 ui 框架",charIndex:576},{level:2,title:"混合开发框架：",slug:"混合开发框架",normalizedTitle:"混合开发框架：",charIndex:787},{level:2,title:"工具",slug:"工具",normalizedTitle:"工具",charIndex:846},{level:2,title:"后台管理框架：",slug:"后台管理框架",normalizedTitle:"后台管理框架：",charIndex:1092},{level:2,title:"小程序",slug:"小程序",normalizedTitle:"小程序",charIndex:1393},{level:2,title:"图片处理",slug:"图片处理",normalizedTitle:"图片处理",charIndex:1561},{level:2,title:"Emoji表情",slug:"emoji表情",normalizedTitle:"emoji 表情",charIndex:1672},{level:2,title:"生成器",slug:"生成器",normalizedTitle:"生成器",charIndex:1808},{level:2,title:"Mac版破解软件下载",slug:"mac版破解软件下载",normalizedTitle:"mac 版破解软件下载",charIndex:1828},{level:2,title:"机场推荐",slug:"机场推荐",normalizedTitle:"机场推荐",charIndex:1924}],lastUpdated:"6/13/2025, 4:49:21 PM",lastUpdatedTimestamp:1749804561e3,headersStr:"在线学习 JS框架 CSS NodeJs 前端插件(类库) 移动端UI框架 混合开发框架： 工具 后台管理框架： 小程序 图片处理 Emoji表情 生成器 Mac版破解软件下载 机场推荐",content:"# 在线学习\n\n * w3school\n * w3cschool\n * 菜鸟教程\n * MDN Web 文档\n * 在线文档\n\n\n# JS 框架\n\n * Vue2 中文网\n * Vue3 中文网\n * React 中文网\n * Svelte 中文网\n * Nuxt.js 中文网 基于 Vue 的服务端渲染框架\n * Next.js 中文网 基于 React 的服务端渲染框架\n\n\n# CSS\n\n * You-need-to-know-css 常用的 CSS Demo\n\n\n# NodeJs\n\n * Express 官方文档\n * Koa 官方文档\n * Egg.js 基于 Node.js 和 Koa 的一个 Nodejs 的企业级应用开发框架\n * NestJS 中文文档 英文文档 (很慢)\n\n\n# 前端插件 (类库)\n\n * Echarts （开源）\n * Highcharts (非开源，免费提供给个人学习、个人网站和非商业用途使用)\n * Swiper 开源、免费、强大的触摸滑动插件\n * Moment.js JavaScript 日期处理类库\n * Day.js 极简的 JavaScript 库，解析、验证、操作和显示日期和时间。\n * axios\n * Animate.css CSS3 动画库\n * Jquery 插件库\n\n\n# 移动端 UI 框架\n\n * Vant (支持 vue2.x 与 3.x)\n * Varlet 基于 Vue3 开发的 Material 风格移动端组件库\n * Arco Design Mobile 基于 React 的移动端 UI 框架\n * Ant Design Mobile 基于 React 的移动端组件库\n * NutUI Vue3 文档，，NutUI Vue2 文档\n * NutUI-React 文档\n\n\n# 混合开发框架：\n\n * uni-app 官方文档\n * uView 开发框架 uni-app 的 UI 框架\n\n\n# 工具\n\n * VueUse 基于 Vue 组合式 API 的实用工具集 (适用于 vue3 和 2)\n * RBG 颜色值与十六进制颜色码转换\n * 进制转换\n * 时间戳转换\n * css3 动画代码\n * 30 seconds of code 实用的代码小片段（CSS、JavaScript、React）\n * 1 LOC 有用的 js 代码小片段\n * 制作 ico 图标\n * 在线代码格式化\n * clippy 在线帮你使用 css clip-path 做出各种形状的图形\n\n\n# 后台管理框架：\n\n * Layui 免费的开源 Web UI 组件库\n * layui-vue 基于 Vue 3.0 的 桌 面 端 组 件 库\n * Naive UI 基于 Vue3 的组件库\n * Element 基于 vue2.x\n * Element Plus 基于 vue3.x\n * Ant Design of Vue\n * Ant Design of React 基于 React\n * view-design 原 iview, 基于 vue2.x\n * View UI Plus 基于 vue3.\n * arco-design react\n * arco-design vue\n\n\n# 小程序\n\n * 微信小程序官方文档\n * Vant Weapp (轻量、可靠的小程序 UI 组件库)\n * Taro 官方文档 (跨端跨框架)\n * mpvue (貌似已经 3 年没维护了)\n * iView Weapp (微信小程序 UI 组件库，貌似 2 年前也没维护了)\n * wepy 文档 (貌似有时候需要科学上网)\n\n\n# 图片处理\n\n * tinypng 图片压缩\n * picdiet 图片压缩\n * ImgURL 图床\n * 微博图床\n * removeAI 抠图 (抠背景)\n * magic eraserAI 抠图 (抠前景)\n\n\n# Emoji 表情\n\n * emoji 表情\n * emoji 表情备忘录\n * 根据文本匹配表情\n\n提示\n\n在任意输入框快速打开 emoji 表情方法：\n\nWindows 系统下按 Win + .\n\nMac 系统下按 Control + Command + 空格\n\n\n# 生成器\n\n * 卡通头像生成器\n\n\n# Mac 版破解软件下载\n\n * 知您网\n * 小番茄盒子 收费\n * 苹果系统之家 收费\n * Xclient\n * 马可菠萝\n * MACMJ 收费\n * 麦氪派\n * MacWK\n\n\n# 机场推荐\n\n * AntLink\n * TaiShan Net\n * 魔戒\n * 智连云\n * 飞鸟云\n * Xiuiu\n * Xgogo",normalizedContent:"# 在线学习\n\n * w3school\n * w3cschool\n * 菜鸟教程\n * mdn web 文档\n * 在线文档\n\n\n# js 框架\n\n * vue2 中文网\n * vue3 中文网\n * react 中文网\n * svelte 中文网\n * nuxt.js 中文网 基于 vue 的服务端渲染框架\n * next.js 中文网 基于 react 的服务端渲染框架\n\n\n# css\n\n * you-need-to-know-css 常用的 css demo\n\n\n# nodejs\n\n * express 官方文档\n * koa 官方文档\n * egg.js 基于 node.js 和 koa 的一个 nodejs 的企业级应用开发框架\n * nestjs 中文文档 英文文档 (很慢)\n\n\n# 前端插件 (类库)\n\n * echarts （开源）\n * highcharts (非开源，免费提供给个人学习、个人网站和非商业用途使用)\n * swiper 开源、免费、强大的触摸滑动插件\n * moment.js javascript 日期处理类库\n * day.js 极简的 javascript 库，解析、验证、操作和显示日期和时间。\n * axios\n * animate.css css3 动画库\n * jquery 插件库\n\n\n# 移动端 ui 框架\n\n * vant (支持 vue2.x 与 3.x)\n * varlet 基于 vue3 开发的 material 风格移动端组件库\n * arco design mobile 基于 react 的移动端 ui 框架\n * ant design mobile 基于 react 的移动端组件库\n * nutui vue3 文档，，nutui vue2 文档\n * nutui-react 文档\n\n\n# 混合开发框架：\n\n * uni-app 官方文档\n * uview 开发框架 uni-app 的 ui 框架\n\n\n# 工具\n\n * vueuse 基于 vue 组合式 api 的实用工具集 (适用于 vue3 和 2)\n * rbg 颜色值与十六进制颜色码转换\n * 进制转换\n * 时间戳转换\n * css3 动画代码\n * 30 seconds of code 实用的代码小片段（css、javascript、react）\n * 1 loc 有用的 js 代码小片段\n * 制作 ico 图标\n * 在线代码格式化\n * clippy 在线帮你使用 css clip-path 做出各种形状的图形\n\n\n# 后台管理框架：\n\n * layui 免费的开源 web ui 组件库\n * layui-vue 基于 vue 3.0 的 桌 面 端 组 件 库\n * naive ui 基于 vue3 的组件库\n * element 基于 vue2.x\n * element plus 基于 vue3.x\n * ant design of vue\n * ant design of react 基于 react\n * view-design 原 iview, 基于 vue2.x\n * view ui plus 基于 vue3.\n * arco-design react\n * arco-design vue\n\n\n# 小程序\n\n * 微信小程序官方文档\n * vant weapp (轻量、可靠的小程序 ui 组件库)\n * taro 官方文档 (跨端跨框架)\n * mpvue (貌似已经 3 年没维护了)\n * iview weapp (微信小程序 ui 组件库，貌似 2 年前也没维护了)\n * wepy 文档 (貌似有时候需要科学上网)\n\n\n# 图片处理\n\n * tinypng 图片压缩\n * picdiet 图片压缩\n * imgurl 图床\n * 微博图床\n * removeai 抠图 (抠背景)\n * magic eraserai 抠图 (抠前景)\n\n\n# emoji 表情\n\n * emoji 表情\n * emoji 表情备忘录\n * 根据文本匹配表情\n\n提示\n\n在任意输入框快速打开 emoji 表情方法：\n\nwindows 系统下按 win + .\n\nmac 系统下按 control + command + 空格\n\n\n# 生成器\n\n * 卡通头像生成器\n\n\n# mac 版破解软件下载\n\n * 知您网\n * 小番茄盒子 收费\n * 苹果系统之家 收费\n * xclient\n * 马可菠萝\n * macmj 收费\n * 麦氪派\n * macwk\n\n\n# 机场推荐\n\n * antlink\n * taishan net\n * 魔戒\n * 智连云\n * 飞鸟云\n * xiuiu\n * xgogo",charsets:{cjk:!0}},{title:"HarmonyOS相关",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"HarmonyOS",imgUrl:"/assets/img/ui.png",description:"HarmonyOS"}},title:"HarmonyOS相关",permalink:"/harmony",sidebar:!1,article:!1,comment:!0,editLink:!1,date:"2023-09-25T11:22:24.000Z"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/05.HarmonyOS.html",relativePath:"00.目录页/05.HarmonyOS.md",key:"v-776f7066",path:"/harmony/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"《NodeJs》笔记",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"《NodeJs》笔记",description:"NodeJs(Express、Koa、Koa2)相关的知识点，特此记录下。"}},title:"《NodeJs》笔记",permalink:"/note/node/",article:!1,comment:!0,editLink:!1,date:"2022-05-19T15:35:39.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/00.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03.%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0.html",relativePath:"01.前端/00.学习笔记/03.《NodeJs》笔记.md",key:"v-e079fa76",path:"/note/node/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"《React》笔记",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"《React》笔记",description:"学习或工作中遇到的React相关的知识点，特此记录下。"}},title:"《React》笔记",permalink:"/note/react/",article:!1,comment:!0,editLink:!1,date:"2022-05-19T15:26:53.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/00.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02.%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0.html",relativePath:"01.前端/00.学习笔记/02.《React》笔记.md",key:"v-01ac97e2",path:"/note/react/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"《Vue》笔记",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"《Vue》笔记",description:"学习或工作中遇到的vue相关的知识点，特此记录下。"}},title:"《Vue》笔记",permalink:"/note/vue/",article:!1,comment:!0,editLink:!1,date:"2022-05-19T15:24:40.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/00.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0.html",relativePath:"01.前端/00.学习笔记/01.《Vue》笔记.md",key:"v-0ac410c2",path:"/note/vue/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"《Mock》",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"Mock",description:"Mock相关的知识。"}},title:"《Mock》",permalink:"/random/mock/",article:!1,comment:!0,editLink:!1,date:"2022-05-19T15:57:56.000Z"},regularPath:"/02.%E9%9A%8F%E7%AC%94/00.%E9%9A%8F%E6%80%A7%E4%B9%8B%E7%AC%94/01.Mock%E4%BD%BF%E7%94%A8.html",relativePath:"02.随笔/00.随性之笔/01.Mock使用.md",key:"v-896430d0",path:"/random/mock/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"《Redis》笔记",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"《Redis》笔记",description:"Redis相关知识点。"}},title:"《Redis》笔记",permalink:"/note/redis/",article:!1,comment:!0,editLink:!1,date:"2023-12-12T18:31:31.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/00.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.%E3%80%8ARedis%E3%80%8B%E7%AC%94%E8%AE%B0.html",relativePath:"01.前端/00.学习笔记/05.《Redis》笔记.md",key:"v-8bef18fe",path:"/note/redis/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"《CSS》笔记",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"《CSS》笔记",description:"CSS相关知识点，含布局，动画效果、css预处理器等。"}},title:"《CSS》笔记",permalink:"/note/css/",article:!1,comment:!0,editLink:!1,date:"2022-05-19T16:34:12.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/00.%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04.%E3%80%8ACSS%E3%80%8B%E7%AC%94%E8%AE%B0.html",relativePath:"01.前端/00.学习笔记/04.《CSS》笔记.md",key:"v-12f0f653",path:"/note/css/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"在TypeScript中,import type和import的区别",frontmatter:{title:"在TypeScript中,import type和import的区别",date:"2023-08-24T10:33:55.000Z",permalink:"/pages/a7d3bf/",categories:["随笔"],tags:[null]},regularPath:"/02.%E9%9A%8F%E7%AC%94/00.%E9%9A%8F%E6%80%A7%E4%B9%8B%E7%AC%94/05.%E5%9C%A8TypeScript%E4%B8%AD,import%20type%E5%92%8Cimport%E7%9A%84%E5%8C%BA%E5%88%AB.html",relativePath:"02.随笔/00.随性之笔/05.在TypeScript中,import type和import的区别.md",key:"v-284fab67",path:"/pages/a7d3bf/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"在项目中使用 ts 时，无意间看到别人用 import type，有些不解，想到自己都是 import 一把梭，于是特地了解下这两者间的区别。\n\n1、import 可以用于导入值、函数、类等任何东西；import type 只能用于导入类型声明，例如接口、类型别名、枚举等。\n\n2、import 会引入实际的 JavaScript 对象，编译后是实实在在存在的；import type 仅引入类型信息、用于类型校验，不会引入实际的 JavaScript 对象，也就是编译后，import type 引入的东西不会存在于新生成的 JavaScript 文件中。\n\nps：当你仅仅只是需要做类型校验的时候，使用import type就行，这样可以避免引入多余的代码。当需要实际的JavaScript对象，则需要使用import",normalizedContent:"在项目中使用 ts 时，无意间看到别人用 import type，有些不解，想到自己都是 import 一把梭，于是特地了解下这两者间的区别。\n\n1、import 可以用于导入值、函数、类等任何东西；import type 只能用于导入类型声明，例如接口、类型别名、枚举等。\n\n2、import 会引入实际的 javascript 对象，编译后是实实在在存在的；import type 仅引入类型信息、用于类型校验，不会引入实际的 javascript 对象，也就是编译后，import type 引入的东西不会存在于新生成的 javascript 文件中。\n\nps：当你仅仅只是需要做类型校验的时候，使用import type就行，这样可以避免引入多余的代码。当需要实际的javascript对象，则需要使用import",charsets:{cjk:!0}},{title:"《Git相关》",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"Git",description:"Git操作相关的知识。"}},title:"《Git相关》",date:"2022-08-25T18:00:02.000Z",permalink:"/random/git/",article:!1,comment:!0,editLink:!1},regularPath:"/02.%E9%9A%8F%E7%AC%94/00.%E9%9A%8F%E6%80%A7%E4%B9%8B%E7%AC%94/03.Git%E7%9B%B8%E5%85%B3.html",relativePath:"02.随笔/00.随性之笔/03.Git相关.md",key:"v-21037cc0",path:"/random/git/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"vscode之vue项目中实现@路径提示",frontmatter:{title:"vscode之vue项目中实现@路径提示",date:"2023-12-19T12:10:22.000Z",permalink:"/pages/12eb8f/",categories:["随笔"],tags:[null]},regularPath:"/02.%E9%9A%8F%E7%AC%94/00.%E9%9A%8F%E6%80%A7%E4%B9%8B%E7%AC%94/07.vscode%E4%B9%8Bvue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AE%9E%E7%8E%B0@%E8%B7%AF%E5%BE%84%E6%8F%90%E7%A4%BA.html",relativePath:"02.随笔/00.随性之笔/07.vscode之vue项目中实现@路径提示.md",key:"v-85da3806",path:"/pages/12eb8f/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'在开发 vue 项目中时，我们经常会使用 @别名，然而，在使用别名的时候，却没有路径提示，这就很不方便了，对于引入文件或者图片的时候没有路径提示就很头大。\n\n解决办法是先安装插件，然后简单配置下即可。\n\n1、安装插件 Path Autocomplete。\n\n2、在 vscode 设置中打开 settings.json 文件，添加如下配置。\n\n\n\n//导入文件时是否携带文件的扩展名\n"path-autocomplete.extensionOnlmport": true,\n//配置@的路径提示\n"path-autocomplete.pathMappings": {\n    "@": "${folder}/src"\n},\n\n\n1\n2\n3\n4\n5\n6\n\n\n至此，就可以愉快地玩耍了',normalizedContent:'在开发 vue 项目中时，我们经常会使用 @别名，然而，在使用别名的时候，却没有路径提示，这就很不方便了，对于引入文件或者图片的时候没有路径提示就很头大。\n\n解决办法是先安装插件，然后简单配置下即可。\n\n1、安装插件 path autocomplete。\n\n2、在 vscode 设置中打开 settings.json 文件，添加如下配置。\n\n\n\n//导入文件时是否携带文件的扩展名\n"path-autocomplete.extensiononlmport": true,\n//配置@的路径提示\n"path-autocomplete.pathmappings": {\n    "@": "${folder}/src"\n},\n\n\n1\n2\n3\n4\n5\n6\n\n\n至此，就可以愉快地玩耍了',charsets:{cjk:!0}},{title:"使用vite构建js库并发布到npm",frontmatter:{title:"使用vite构建js库并发布到npm",date:"2024-08-15T14:09:23.000Z",permalink:"/pages/b1603a/",categories:["随笔"],tags:[null]},regularPath:"/02.%E9%9A%8F%E7%AC%94/00.%E9%9A%8F%E6%80%A7%E4%B9%8B%E7%AC%94/08.%E4%BD%BF%E7%94%A8vite%E6%9E%84%E5%BB%BAjs%E5%BA%93%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0npm.html",relativePath:"02.随笔/00.随性之笔/08.使用vite构建js库并发布到npm.md",key:"v-237b056a",path:"/pages/b1603a/",lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:null,content:'每次开始新项目的时候，总是需要把老项目中封装的各种工具函数 copy 一份，为了省点事儿，索性封装了一个 js 库，发布到 npm 上，这样以后需要使用时，直接安装一下然后引入就行了。\n\n这里以 vite 为例:\n\nnpm create vite@latest jsTool\n\n// Select a framework这一步选择Others\n// Select a variant这里选择 create-vite-extra\n// Select a template这里选择 library\n// Select a variant这里选择JavaScript或TypeScript均可\n\n\n1\n2\n3\n4\n5\n6\n\n\n到这里，一个基础的框架就搭建好了，进入项目\n\ncd jsTool\nnpm install\n\n\n1\n2\n\n\n现在修改 vite.config.js 配置文件如下：\n\nimport { defineConfig } from \'vite\'\n\nexport default defineConfig({\n  build: {\n    lib: {\n      entry: \'./lib/main.js\',\n      name: \'jsTool\',\n      fileName: \'jsTool\'\n    }\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n修改 package.json 文件：\n\n{\n  "name": "lei-js-tool",\n  "version": "0.0.4",\n  "type": "module",\n  "files": [\n    "dist"\n  ],\n  "main": "./dist/jsTool.umd.cjs",\n  "module": "./dist/jsTool.js",\n  "types": "./dist/index.d.ts",\n  "scripts": {\n    "dev": "vite",\n    "build": "vite build"\n  },\n  "devDependencies": {\n    "vite": "^5.2.10"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n现在就可以在 lib 目录下的 main.js 中编写工具函数了。如：\n\nexport function getDecimalPlaces(a) {\n  if (Number.isInteger(a)) {\n    return 0;\n  }\n  const parts = a.toString().split(".");\n  return parts[1] ? parts[1].length : 0;\n}\n\n// 加法运算\nexport function add(a, b) {\n  const baseNum1 = getDecimalPlaces(a);\n  const baseNum2 = getDecimalPlaces(b);\n  const baseNum = Math.pow(10, Math.max(baseNum1, baseNum2));\n  return (a * baseNum + b * baseNum) / baseNum;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n虽然是用 js 写的工具函数，但是想在编辑器中给出 ts 类型提示，因此需要写一个类型声明文件\n在 index.d.ts 中编写类型声明\n\nexport function add(a: number, b: number): number;\n\n\n1\n\n\n现在执行 npm run build 打包，然后手动将 index.d.ts 文件移到 dist 目录下，然后执行发布到 npm 的流程即可.\n\n发布完后，在项目中使用如下\n\n// 安装\nnpm install lei-js-tool\n\n// 引入\nimport { add } from "lei-js-tool"\n\n// 使用\nconsole.log(add(0.1, 0.2))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n',normalizedContent:'每次开始新项目的时候，总是需要把老项目中封装的各种工具函数 copy 一份，为了省点事儿，索性封装了一个 js 库，发布到 npm 上，这样以后需要使用时，直接安装一下然后引入就行了。\n\n这里以 vite 为例:\n\nnpm create vite@latest jstool\n\n// select a framework这一步选择others\n// select a variant这里选择 create-vite-extra\n// select a template这里选择 library\n// select a variant这里选择javascript或typescript均可\n\n\n1\n2\n3\n4\n5\n6\n\n\n到这里，一个基础的框架就搭建好了，进入项目\n\ncd jstool\nnpm install\n\n\n1\n2\n\n\n现在修改 vite.config.js 配置文件如下：\n\nimport { defineconfig } from \'vite\'\n\nexport default defineconfig({\n  build: {\n    lib: {\n      entry: \'./lib/main.js\',\n      name: \'jstool\',\n      filename: \'jstool\'\n    }\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n修改 package.json 文件：\n\n{\n  "name": "lei-js-tool",\n  "version": "0.0.4",\n  "type": "module",\n  "files": [\n    "dist"\n  ],\n  "main": "./dist/jstool.umd.cjs",\n  "module": "./dist/jstool.js",\n  "types": "./dist/index.d.ts",\n  "scripts": {\n    "dev": "vite",\n    "build": "vite build"\n  },\n  "devdependencies": {\n    "vite": "^5.2.10"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n现在就可以在 lib 目录下的 main.js 中编写工具函数了。如：\n\nexport function getdecimalplaces(a) {\n  if (number.isinteger(a)) {\n    return 0;\n  }\n  const parts = a.tostring().split(".");\n  return parts[1] ? parts[1].length : 0;\n}\n\n// 加法运算\nexport function add(a, b) {\n  const basenum1 = getdecimalplaces(a);\n  const basenum2 = getdecimalplaces(b);\n  const basenum = math.pow(10, math.max(basenum1, basenum2));\n  return (a * basenum + b * basenum) / basenum;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n虽然是用 js 写的工具函数，但是想在编辑器中给出 ts 类型提示，因此需要写一个类型声明文件\n在 index.d.ts 中编写类型声明\n\nexport function add(a: number, b: number): number;\n\n\n1\n\n\n现在执行 npm run build 打包，然后手动将 index.d.ts 文件移到 dist 目录下，然后执行发布到 npm 的流程即可.\n\n发布完后，在项目中使用如下\n\n// 安装\nnpm install lei-js-tool\n\n// 引入\nimport { add } from "lei-js-tool"\n\n// 使用\nconsole.log(add(0.1, 0.2))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n',charsets:{cjk:!0}},{title:"《MySQL》",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"MySQL",description:"MySQL相关的知识。"}},title:"《MySQL》",permalink:"/random/mysql/",article:!1,comment:!0,editLink:!1,date:"2022-05-19T16:18:07.000Z"},regularPath:"/02.%E9%9A%8F%E7%AC%94/00.%E9%9A%8F%E6%80%A7%E4%B9%8B%E7%AC%94/02.MySQL.html",relativePath:"02.随笔/00.随性之笔/02.MySQL.md",key:"v-7ec46ca2",path:"/random/mysql/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"HarmonyOS之基础入门",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"HarmonyOS",description:"记录学习HarmonyOS相关知识点。"}},title:"HarmonyOS之基础入门",permalink:"/harmony/base/",article:!1,comment:!0,editLink:!1,date:"2023-09-25T15:52:12.000Z"},regularPath:"/03.HarmonyOS%E7%9B%B8%E5%85%B3/01.%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/01.%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8.html",relativePath:"03.HarmonyOS相关/01.基础入门/01.基础入门.md",key:"v-010c72bd",path:"/harmony/base/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"vite构建js库兼容传统浏览器",frontmatter:{title:"vite构建js库兼容传统浏览器",date:"2024-08-23T17:42:16.000Z",permalink:"/pages/15c17d/",categories:["随笔"],tags:[null]},regularPath:"/02.%E9%9A%8F%E7%AC%94/00.%E9%9A%8F%E6%80%A7%E4%B9%8B%E7%AC%94/09.vite%E6%9E%84%E5%BB%BAjs%E5%BA%93%E5%85%BC%E5%AE%B9%E4%BC%A0%E7%BB%9F%E6%B5%8F%E8%A7%88%E5%99%A8.html",relativePath:"02.随笔/00.随性之笔/09.vite构建js库兼容传统浏览器.md",key:"v-25969ecc",path:"/pages/15c17d/",lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:null,content:"在搭建 js 库的时候，想着能不能也兼容下传统浏览器，于是研究了下，大致步骤是这样的，需要借助 Babel 及相关的插件来解决。\n\n1、安装相关依赖\n\nnpm install --save-dev @babel/core @babel/preset-env @rollup/plugin-babel\n\n\n\n1\n2\n\n\n2、配置，创建 babel.config.js 文件，配置如下：\n\nmodule.exports = {\n    presets: [\n        ['@babel/preset-env', {\n            targets: {\n                browsers: ['> 1%', 'last 20 versions', 'ie >= 11'],\n            },\n            useBuiltIns: 'usage',\n            corejs: 3,\n        }],\n    ],\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n3、在 vite.config.js 中配置 Babel 插件，让 Vite 在构建过程中使用 Babel 将代码转换为 ES5\n\nimport { defineConfig } from 'vite';\nimport vue from '@vitejs/plugin-vue';\nimport babel from '@rollup/plugin-babel';\n\nexport default defineConfig({\n  plugins: [\n    babel({\n      babelHelpers: 'bundled',\n      exclude: 'node_modules/**',\n      extensions: ['.js', '.ts'],\n    }),\n  ],\n  build: {\n    target: ['es2015'],\n    rollupOptions: {\n      output: {\n        format: 'cjs',\n      },\n    },\n  },\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n配置完成，执行打包时，报错了，类似这种， module is not defined in ES module scope\nThis file is being treated as an ES module because it has a '.js' file extension。\n于是，将 babel.config.js 文件的后缀名改成.cjs，及 babel.config.cjs，再执行打包后正常了。\n\n查看打包后的文件，发现 promise 并没有被转换，因为 Babel 默认只处理语法转换，不会自动引入 polyfill。\n\n解决方案：手动引入 polyfill\n\n1、安装 core-js 和 regenerator-runtime\n\nnpm install --save core-js regenerator-runtime\n\n\n1\n\n\n2、如果 babel.config.cjs 中设置了 useBuiltIns: 'entry'，则需要在入口文件中引入 polyfill\n\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\n\n1\n2\n\n\nps： babel.config.cjs 中的 useBuiltIns 有两种取值，usage 和 entry\n区别：\n当 useBuiltIns 设置为 'usage' 时，Babel 会根据代码中实际使用的 API 和目标浏览器的支持情况自动引入必要的 polyfill\nuseBuiltIns: 'entry' 时，Babel 不会根据实际使用的 API 自动引入 polyfill，而是需要在项目的入口文件中手动引入所需的 polyfill\n\n实践证明，使用 useBuiltIns: 'entry' 时，打包出来的体积偏大，建议使用 useBuiltIns: 'usage'",normalizedContent:"在搭建 js 库的时候，想着能不能也兼容下传统浏览器，于是研究了下，大致步骤是这样的，需要借助 babel 及相关的插件来解决。\n\n1、安装相关依赖\n\nnpm install --save-dev @babel/core @babel/preset-env @rollup/plugin-babel\n\n\n\n1\n2\n\n\n2、配置，创建 babel.config.js 文件，配置如下：\n\nmodule.exports = {\n    presets: [\n        ['@babel/preset-env', {\n            targets: {\n                browsers: ['> 1%', 'last 20 versions', 'ie >= 11'],\n            },\n            usebuiltins: 'usage',\n            corejs: 3,\n        }],\n    ],\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n3、在 vite.config.js 中配置 babel 插件，让 vite 在构建过程中使用 babel 将代码转换为 es5\n\nimport { defineconfig } from 'vite';\nimport vue from '@vitejs/plugin-vue';\nimport babel from '@rollup/plugin-babel';\n\nexport default defineconfig({\n  plugins: [\n    babel({\n      babelhelpers: 'bundled',\n      exclude: 'node_modules/**',\n      extensions: ['.js', '.ts'],\n    }),\n  ],\n  build: {\n    target: ['es2015'],\n    rollupoptions: {\n      output: {\n        format: 'cjs',\n      },\n    },\n  },\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n配置完成，执行打包时，报错了，类似这种， module is not defined in es module scope\nthis file is being treated as an es module because it has a '.js' file extension。\n于是，将 babel.config.js 文件的后缀名改成.cjs，及 babel.config.cjs，再执行打包后正常了。\n\n查看打包后的文件，发现 promise 并没有被转换，因为 babel 默认只处理语法转换，不会自动引入 polyfill。\n\n解决方案：手动引入 polyfill\n\n1、安装 core-js 和 regenerator-runtime\n\nnpm install --save core-js regenerator-runtime\n\n\n1\n\n\n2、如果 babel.config.cjs 中设置了 usebuiltins: 'entry'，则需要在入口文件中引入 polyfill\n\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\n\n1\n2\n\n\nps： babel.config.cjs 中的 usebuiltins 有两种取值，usage 和 entry\n区别：\n当 usebuiltins 设置为 'usage' 时，babel 会根据代码中实际使用的 api 和目标浏览器的支持情况自动引入必要的 polyfill\nusebuiltins: 'entry' 时，babel 不会根据实际使用的 api 自动引入 polyfill，而是需要在项目的入口文件中手动引入所需的 polyfill\n\n实践证明，使用 usebuiltins: 'entry' 时，打包出来的体积偏大，建议使用 usebuiltins: 'usage'",charsets:{cjk:!0}},{title:"关于",frontmatter:{title:"关于",date:"2022-03-21T15:25:19.000Z",permalink:"/pages/5699bd/",sidebar:!1,article:!1,editLink:!1},regularPath:"/04.about/01.about.html",relativePath:"04.about/01.about.md",key:"v-8d40ad16",path:"/pages/5699bd/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"# 介绍\n\n----------------------------------------\n\n初衷\n\n用博客记录一下自己平时工作或学习中遇到的知识点或难点。\n\n生命不息，折腾不止，从最初的博客园到后来的用Hexo + GitHub Pages搭建博客，再到现在的 vuepress + GitHub Pages 搭建博客，虽说博客不常写，但是该有的咱还是得有。\n\n写博客其实好处还挺多的：\n\n1、可以整理自己的知识体系。在记录的过程中帮助我们理清头绪，理清思路，加深理解与记忆，就算过一段时间忘了，再次遇到同样的问题，可以看一遍文章，能少走许多弯路，亦可节省时间。\n\n2、记录。记录一个新奇的技术点，一个 bug 的解决，亦或是一段生活经历，在以后的某个时间段再回过头来看会有别样的感触。",normalizedContent:"# 介绍\n\n----------------------------------------\n\n初衷\n\n用博客记录一下自己平时工作或学习中遇到的知识点或难点。\n\n生命不息，折腾不止，从最初的博客园到后来的用hexo + github pages搭建博客，再到现在的 vuepress + github pages 搭建博客，虽说博客不常写，但是该有的咱还是得有。\n\n写博客其实好处还挺多的：\n\n1、可以整理自己的知识体系。在记录的过程中帮助我们理清头绪，理清思路，加深理解与记忆，就算过一段时间忘了，再次遇到同样的问题，可以看一遍文章，能少走许多弯路，亦可节省时间。\n\n2、记录。记录一个新奇的技术点，一个 bug 的解决，亦或是一段生活经历，在以后的某个时间段再回过头来看会有别样的感触。",charsets:{cjk:!0}},{title:"ArkTS基础之自定义组件",frontmatter:{title:"ArkTS基础之自定义组件",date:"2023-09-25T14:29:14.000Z",permalink:"/pages/6085ec/",categories:["HarmonyOS"],tags:[null]},regularPath:"/HarmonyOS/01.%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/02.ArkTS%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6.html",relativePath:"HarmonyOS/01.基础入门/02.ArkTS基础之自定义组件.md",key:"v-31e75d76",path:"/pages/6085ec/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"官方文档\n\n在 ArkTS 中，我们可以自定义组件，例如：\n\n// 定义名为TitleComponent的自定义组件\n@Component\nstruct TitleComponent {\n\t...\n\tbuild () {}\n}\n\n// 定义名为RankPage的自定义组件，在其中使用TitleComponent组件\n@Entry\n@Component\nstruct RankPage {\n\t@State myText: string = 'hello harmonyOs';\n\t...\n\tbuild () {\n\t\tColumn () {\n\t\t\tTitleComponent()\n\t\t}\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * @Component 装饰的 struct 表示该结构体具有组件化能力，能够成为一个独立的组件\n * @Entry 表示该自定义组件为入口组件，即页面的根节点，一个页面有且仅能有一个 @Entry。只有被 @Entry 装饰的组件才可以调用页面的生命周期。\n * @State 表示组件中的状态变量，状态变量变化会触发 UI 刷新\n * build () 函数：用于定义自定义组件的声明式 UI 描述，自定义组件必须定义 build () 函数。\n * @Prop：与 @State 有相同的语义，但初始化方式不同，@Porp 装饰的变量必须使用其父组件提供的 @State 变量进行初始化，允许组件内部修改 @Prop 变量，但更改不会通知给父组件，即 @Prop 属于单向数据绑定。\n * @Link：使用 @Link 装饰的变量可以和父组件的 @State 变量建立双向数据绑定，需要注意的是：@Link 变量不能在组件内部进行初始化。\n * @Builder：用于定义组件的声明式 UI 描述，在一个自定义组件内快速生成多个布局内容。\n * @Watch：监听状态变化\n\n所有声明在 build () 函数的语言，统称为 UI 描述语言，UI 描述语言需要遵循以下规则：\n\n * @Entry 装饰的自定义组件，其 build () 函数下的根节点唯一且必要，且必须为容器组件，其中 ForEach 禁止作为根节点。\n * @Component 装饰的自定义组件，其 build () 函数下的根节点唯一且必要，可以为非容器组件，其中 ForEach 禁止作为根节点。\n\n@Entry\n@Component\nstruct MyComponent {\n  build() {\n    // 根节点唯一且必要，必须为容器组件\n    Row() {\n      ChildComponent() \n    }\n  }\n}\n\n@Component\nstruct ChildComponent {\n  build() {\n    // 根节点唯一且必要，可为非容器组件\n    Image('test.jpg')\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 不允许声明本地变量，反例：\n\nbuild() {\n  // 反例：不允许声明本地变量\n  let a: number = 1;\n}\n\n\n1\n2\n3\n4\n\n * 不允许在 UI 描述里直接使用 console.info，但允许在方法或函数里使用，反例：\n\nbuild() {\n  // 反例：不允许console.info\n  console.info('print debug log');\n}\n\n\n1\n2\n3\n4\n\n * 不允许创建本地的作用于，反例：\n\nbuild() {\n  // 反例：不允许本地作用域\n  {\n    ...\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n * 不允许调用除了被 @Builder 装饰以外的方法，允许系统组件的参数是 TS 方法的返回值\n\n@Component\nstruct ParentComponent {\n  doSomeCalculations() {\n  }\n\n  calcTextValue(): string {\n    return 'Hello World';\n  }\n\n  @Builder doSomeRender() {\n    Text(`Hello World`)\n  }\n\n  build() {\n    Column() {\n      // 反例：不能调用没有用@Builder装饰的方法\n      this.doSomeCalculations();\n      // 正例：可以调用\n      this.doSomeRender();\n      // 正例：参数可以为调用TS方法的返回值\n      Text(this.calcTextValue())\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * 不允许 switch 语法，如果需要使用条件判断，请使用 if。反例：\n\nbuild() {\n  Column() {\n    // 反例：不允许使用switch语法\n    switch (expression) {\n      case 1:\n        Text('...')\n        break;\n      case 2:\n        Image('...')\n        break;\n      default:\n        Text('...')\n        break;\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * 不允许使用表达式，反例：\n\nbuild() {\n  Column() {\n    // 反例：不允许使用表达式\n    (this.aVar > 10) ? Text('...') : Image('...')\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n",normalizedContent:"官方文档\n\n在 arkts 中，我们可以自定义组件，例如：\n\n// 定义名为titlecomponent的自定义组件\n@component\nstruct titlecomponent {\n\t...\n\tbuild () {}\n}\n\n// 定义名为rankpage的自定义组件，在其中使用titlecomponent组件\n@entry\n@component\nstruct rankpage {\n\t@state mytext: string = 'hello harmonyos';\n\t...\n\tbuild () {\n\t\tcolumn () {\n\t\t\ttitlecomponent()\n\t\t}\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * @component 装饰的 struct 表示该结构体具有组件化能力，能够成为一个独立的组件\n * @entry 表示该自定义组件为入口组件，即页面的根节点，一个页面有且仅能有一个 @entry。只有被 @entry 装饰的组件才可以调用页面的生命周期。\n * @state 表示组件中的状态变量，状态变量变化会触发 ui 刷新\n * build () 函数：用于定义自定义组件的声明式 ui 描述，自定义组件必须定义 build () 函数。\n * @prop：与 @state 有相同的语义，但初始化方式不同，@porp 装饰的变量必须使用其父组件提供的 @state 变量进行初始化，允许组件内部修改 @prop 变量，但更改不会通知给父组件，即 @prop 属于单向数据绑定。\n * @link：使用 @link 装饰的变量可以和父组件的 @state 变量建立双向数据绑定，需要注意的是：@link 变量不能在组件内部进行初始化。\n * @builder：用于定义组件的声明式 ui 描述，在一个自定义组件内快速生成多个布局内容。\n * @watch：监听状态变化\n\n所有声明在 build () 函数的语言，统称为 ui 描述语言，ui 描述语言需要遵循以下规则：\n\n * @entry 装饰的自定义组件，其 build () 函数下的根节点唯一且必要，且必须为容器组件，其中 foreach 禁止作为根节点。\n * @component 装饰的自定义组件，其 build () 函数下的根节点唯一且必要，可以为非容器组件，其中 foreach 禁止作为根节点。\n\n@entry\n@component\nstruct mycomponent {\n  build() {\n    // 根节点唯一且必要，必须为容器组件\n    row() {\n      childcomponent() \n    }\n  }\n}\n\n@component\nstruct childcomponent {\n  build() {\n    // 根节点唯一且必要，可为非容器组件\n    image('test.jpg')\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 不允许声明本地变量，反例：\n\nbuild() {\n  // 反例：不允许声明本地变量\n  let a: number = 1;\n}\n\n\n1\n2\n3\n4\n\n * 不允许在 ui 描述里直接使用 console.info，但允许在方法或函数里使用，反例：\n\nbuild() {\n  // 反例：不允许console.info\n  console.info('print debug log');\n}\n\n\n1\n2\n3\n4\n\n * 不允许创建本地的作用于，反例：\n\nbuild() {\n  // 反例：不允许本地作用域\n  {\n    ...\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n * 不允许调用除了被 @builder 装饰以外的方法，允许系统组件的参数是 ts 方法的返回值\n\n@component\nstruct parentcomponent {\n  dosomecalculations() {\n  }\n\n  calctextvalue(): string {\n    return 'hello world';\n  }\n\n  @builder dosomerender() {\n    text(`hello world`)\n  }\n\n  build() {\n    column() {\n      // 反例：不能调用没有用@builder装饰的方法\n      this.dosomecalculations();\n      // 正例：可以调用\n      this.dosomerender();\n      // 正例：参数可以为调用ts方法的返回值\n      text(this.calctextvalue())\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * 不允许 switch 语法，如果需要使用条件判断，请使用 if。反例：\n\nbuild() {\n  column() {\n    // 反例：不允许使用switch语法\n    switch (expression) {\n      case 1:\n        text('...')\n        break;\n      case 2:\n        image('...')\n        break;\n      default:\n        text('...')\n        break;\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * 不允许使用表达式，反例：\n\nbuild() {\n  column() {\n    // 反例：不允许使用表达式\n    (this.avar > 10) ? text('...') : image('...')\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n",charsets:{cjk:!0}},{title:"ArkTS基础之页面与自定义组件生命周期",frontmatter:{title:"ArkTS基础之页面与自定义组件生命周期",date:"2023-09-25T16:09:46.000Z",permalink:"/pages/b80833/",categories:["HarmonyOS"],tags:[null]},regularPath:"/HarmonyOS/01.%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/03.ArkTS%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%A1%B5%E9%9D%A2%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html",relativePath:"HarmonyOS/01.基础入门/03.ArkTS基础之页面与自定义组件生命周期.md",key:"v-5cf8ceef",path:"/pages/b80833/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"官方文档\n\n自定义组件与页面：\n\n * 自定义组件：@Component 装饰的 UI 单元，可以与多个系统组件组合使用以实现 UI 复用。\n * 页面：即应用的 UI 页面，可以由一个或多个自定义组件组成，@Entry 装饰的自定义组件为页面的入口组件，即页面的根节点，一个页面有且仅能有一个 @Entry。只有被 @Entry 装饰的组件才可以调用页面的生命周期。\n\n页面生命周期，即被 @Entry 装饰的组件生命周期有：\n\n * onPageShow：页面每次显示时触发。\n * onPageHide：页面每次隐藏时触发一次。\n * onBackPress：当用户点击返回按钮时触发。\n\n组件生命周期，即一般用 @Component 装饰的自定义组件生命周期有：\n\n * aboutToAppear：组件即将出现时触发，具体时机为在创建自定义组件的新实例后，在执行其 build () 函数之前执行。\n * aboutToDisappear：在自定义组件即将销毁时执行。\n\n生命周期流程如下：\n\n\n\n示例：\n\n// Index.ets\nimport router from '@ohos.router';\n\n@Entry\n@Component\nstruct MyComponent {\n  @State showChild: boolean = true;\n\n  // 只有被@Entry装饰的组件才可以调用页面的生命周期\n  onPageShow() {\n    console.info('Index onPageShow');\n  }\n  // 只有被@Entry装饰的组件才可以调用页面的生命周期\n  onPageHide() {\n    console.info('Index onPageHide');\n  }\n\n  // 只有被@Entry装饰的组件才可以调用页面的生命周期\n  onBackPress() {\n    console.info('Index onBackPress');\n  }\n\n  // 组件生命周期\n  aboutToAppear() {\n    console.info('MyComponent aboutToAppear');\n  }\n\n  // 组件生命周期\n  aboutToDisappear() {\n    console.info('MyComponent aboutToDisappear');\n  }\n\n  build() {\n    Column() {\n      // this.showChild为true，创建Child子组件，执行Child aboutToAppear\n      if (this.showChild) {\n        Child()\n      }\n      // this.showChild为false，删除Child子组件，执行Child aboutToDisappear\n      Button('create or delete Child').onClick(() => {\n        this.showChild = false;\n      })\n      // push到Page2页面，执行onPageHide\n      Button('push to next page')\n        .onClick(() => {\n          router.pushUrl({ url: 'pages/Page2' });\n        })\n    }\n\n  }\n}\n\n@Component\nstruct Child {\n  @State title: string = 'Hello World';\n  // 组件生命周期\n  aboutToDisappear() {\n    console.info('[lifeCycle] Child aboutToDisappear')\n  }\n  // 组件生命周期\n  aboutToAppear() {\n    console.info('[lifeCycle] Child aboutToAppear')\n  }\n\n  build() {\n    Text(this.title).fontSize(50).onClick(() => {\n      this.title = 'Hello ArkUI';\n    })\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n\n\n以上示例中，Index 页面包含两个自定义组件，一个是被 @Entry 装饰的 MyComponent，也是页面的入口组件，即页面的根节点；一个是 Child，是 MyComponent 的子组件。只有 @Entry 装饰的节点才可以生效页面的生命周期方法，所以 MyComponent 中声明了当前 Index 页面的页面生命周期函数。MyComponent 和其子组件 Child 也同时也声明了组件的生命周期函数。\n\n * 应用冷启动的初始化流程为：MyComponent aboutToAppear --\x3e MyComponent build --\x3e Child aboutToAppear --\x3e Child build --\x3e Child build 执行完毕 --\x3e MyComponent build 执行完毕 --\x3e Index onPageShow。\n\n * 点击 “delete Child”，if 绑定的 this.showChild 变成 false，删除 Child 组件，会执行 Child aboutToDisappear 方法。\n\n * 点击 “push to next page”，调用 router.pushUrl 接口，跳转到另外一个页面，当前 Index 页面隐藏，执行页面生命周期 Index onPageHide。此处调用的是 router.pushUrl 接口，Index 页面被隐藏，并没有销毁，所以只调用 onPageHide。跳转到新页面后，执行初始化新页面的生命周期的流程。\n\n * 如果调用的是 router.replaceUrl，则当前 Index 页面被销毁，执行的生命周期流程将变为：Index onPageHide --\x3e MyComponent aboutToDisappear --\x3e Child aboutToDisappear。上文已经提到，组件的销毁是从组件树上直接摘下子树，所以先调用父组件的 aboutToDisappear，再调用子组件的 aboutToDisappear，然后执行初始化新页面的生命周期流程。\n\n * 点击返回按钮，触发页面生命周期 Index onBackPress，且触发返回一个页面后会导致当前 Index 页面被销毁。\n\n * 最小化应用或者应用进入后台，触发 Index onPageHide。当前 Index 页面没有被销毁，所以并不会执行组件的 aboutToDisappear。应用回到前台，执行 Index onPageShow。\n\n * 退出应用，执行 Index onPageHide --\x3e MyComponent aboutToDisappear --\x3e Child aboutToDisappear。",normalizedContent:"官方文档\n\n自定义组件与页面：\n\n * 自定义组件：@component 装饰的 ui 单元，可以与多个系统组件组合使用以实现 ui 复用。\n * 页面：即应用的 ui 页面，可以由一个或多个自定义组件组成，@entry 装饰的自定义组件为页面的入口组件，即页面的根节点，一个页面有且仅能有一个 @entry。只有被 @entry 装饰的组件才可以调用页面的生命周期。\n\n页面生命周期，即被 @entry 装饰的组件生命周期有：\n\n * onpageshow：页面每次显示时触发。\n * onpagehide：页面每次隐藏时触发一次。\n * onbackpress：当用户点击返回按钮时触发。\n\n组件生命周期，即一般用 @component 装饰的自定义组件生命周期有：\n\n * abouttoappear：组件即将出现时触发，具体时机为在创建自定义组件的新实例后，在执行其 build () 函数之前执行。\n * abouttodisappear：在自定义组件即将销毁时执行。\n\n生命周期流程如下：\n\n\n\n示例：\n\n// index.ets\nimport router from '@ohos.router';\n\n@entry\n@component\nstruct mycomponent {\n  @state showchild: boolean = true;\n\n  // 只有被@entry装饰的组件才可以调用页面的生命周期\n  onpageshow() {\n    console.info('index onpageshow');\n  }\n  // 只有被@entry装饰的组件才可以调用页面的生命周期\n  onpagehide() {\n    console.info('index onpagehide');\n  }\n\n  // 只有被@entry装饰的组件才可以调用页面的生命周期\n  onbackpress() {\n    console.info('index onbackpress');\n  }\n\n  // 组件生命周期\n  abouttoappear() {\n    console.info('mycomponent abouttoappear');\n  }\n\n  // 组件生命周期\n  abouttodisappear() {\n    console.info('mycomponent abouttodisappear');\n  }\n\n  build() {\n    column() {\n      // this.showchild为true，创建child子组件，执行child abouttoappear\n      if (this.showchild) {\n        child()\n      }\n      // this.showchild为false，删除child子组件，执行child abouttodisappear\n      button('create or delete child').onclick(() => {\n        this.showchild = false;\n      })\n      // push到page2页面，执行onpagehide\n      button('push to next page')\n        .onclick(() => {\n          router.pushurl({ url: 'pages/page2' });\n        })\n    }\n\n  }\n}\n\n@component\nstruct child {\n  @state title: string = 'hello world';\n  // 组件生命周期\n  abouttodisappear() {\n    console.info('[lifecycle] child abouttodisappear')\n  }\n  // 组件生命周期\n  abouttoappear() {\n    console.info('[lifecycle] child abouttoappear')\n  }\n\n  build() {\n    text(this.title).fontsize(50).onclick(() => {\n      this.title = 'hello arkui';\n    })\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n\n\n以上示例中，index 页面包含两个自定义组件，一个是被 @entry 装饰的 mycomponent，也是页面的入口组件，即页面的根节点；一个是 child，是 mycomponent 的子组件。只有 @entry 装饰的节点才可以生效页面的生命周期方法，所以 mycomponent 中声明了当前 index 页面的页面生命周期函数。mycomponent 和其子组件 child 也同时也声明了组件的生命周期函数。\n\n * 应用冷启动的初始化流程为：mycomponent abouttoappear --\x3e mycomponent build --\x3e child abouttoappear --\x3e child build --\x3e child build 执行完毕 --\x3e mycomponent build 执行完毕 --\x3e index onpageshow。\n\n * 点击 “delete child”，if 绑定的 this.showchild 变成 false，删除 child 组件，会执行 child abouttodisappear 方法。\n\n * 点击 “push to next page”，调用 router.pushurl 接口，跳转到另外一个页面，当前 index 页面隐藏，执行页面生命周期 index onpagehide。此处调用的是 router.pushurl 接口，index 页面被隐藏，并没有销毁，所以只调用 onpagehide。跳转到新页面后，执行初始化新页面的生命周期的流程。\n\n * 如果调用的是 router.replaceurl，则当前 index 页面被销毁，执行的生命周期流程将变为：index onpagehide --\x3e mycomponent abouttodisappear --\x3e child abouttodisappear。上文已经提到，组件的销毁是从组件树上直接摘下子树，所以先调用父组件的 abouttodisappear，再调用子组件的 abouttodisappear，然后执行初始化新页面的生命周期流程。\n\n * 点击返回按钮，触发页面生命周期 index onbackpress，且触发返回一个页面后会导致当前 index 页面被销毁。\n\n * 最小化应用或者应用进入后台，触发 index onpagehide。当前 index 页面没有被销毁，所以并不会执行组件的 abouttodisappear。应用回到前台，执行 index onpageshow。\n\n * 退出应用，执行 index onpagehide --\x3e mycomponent abouttodisappear --\x3e child abouttodisappear。",charsets:{cjk:!0}},{title:"本地仓库关联远程仓库，拉取代码及提交",frontmatter:{title:"本地仓库关联远程仓库，拉取代码及提交",date:"2022-08-25T18:02:57.000Z",permalink:"/pages/60613a/",categories:["Git"],tags:[null]},regularPath:"/Git/01.Git%E7%9B%B8%E5%85%B3/01.%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%EF%BC%8C%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%E5%8F%8A%E6%8F%90%E4%BA%A4.html",relativePath:"Git/01.Git相关/01.本地仓库关联远程仓库，拉取代码及提交.md",key:"v-649d02ba",path:"/pages/60613a/",lastUpdated:"8/7/2025, 5:34:41 PM",lastUpdatedTimestamp:1754559281e3,headersStr:null,content:"在项目中经常会遇到这种情况，由于时间紧急，自己本地先开发了，而后远程 git 上建立了新的仓库，这时候本地仓库需要与远程仓库关联起来，不然没法拉取和提交代码。\n\n这里主要有这几个步骤：\n\n1、本地仓库与远程仓库关联起来：\n\ngit remote add origin '远程仓库地址'\n\n\n1\n\n\n2、关联远程分支：\n\ngit branch --set-upstream-to=origin/分支名称 master\n\n\n1\n\n\n3、拉取远程仓库代码到本地：\n\ngit pull\n\n\n1\n\n\n这时候可能会报如下错误：fatal: refusing to merge unrelated histories\n\n解决方案：\n\ngit pull origin master --allow-unrelated-histories\n\n\n1\n\n\n至此，现在就可以愉快地执行 push 操作和 pull 操作",normalizedContent:"在项目中经常会遇到这种情况，由于时间紧急，自己本地先开发了，而后远程 git 上建立了新的仓库，这时候本地仓库需要与远程仓库关联起来，不然没法拉取和提交代码。\n\n这里主要有这几个步骤：\n\n1、本地仓库与远程仓库关联起来：\n\ngit remote add origin '远程仓库地址'\n\n\n1\n\n\n2、关联远程分支：\n\ngit branch --set-upstream-to=origin/分支名称 master\n\n\n1\n\n\n3、拉取远程仓库代码到本地：\n\ngit pull\n\n\n1\n\n\n这时候可能会报如下错误：fatal: refusing to merge unrelated histories\n\n解决方案：\n\ngit pull origin master --allow-unrelated-histories\n\n\n1\n\n\n至此，现在就可以愉快地执行 push 操作和 pull 操作",charsets:{cjk:!0}},{title:"Mock的基本使用及拦截axios请求",frontmatter:{title:"Mock的基本使用及拦截axios请求",date:"2022-04-07T11:25:57.000Z",permalink:"/pages/2403dc/",categories:["Mock"],tags:[null]},regularPath:"/Mock/01.mock/02.Mock%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%8B%A6%E6%88%AAaxios%E8%AF%B7%E6%B1%82.html",relativePath:"Mock/01.mock/02.Mock的基本使用及拦截axios请求.md",key:"v-0e03698e",path:"/pages/2403dc/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"在项目中经常会遇到这种情况，前端页面写完了，服务端接口还没弄好，没有数据没法看页面具体的效果，贼尴尬，总不能说让后端小哥哥先给造点数据吧，人家这会儿忙着了，哪有空搭理你啊。\n\n这时候 Mock 派上用场了，我们可以使用 Mock 来拦截 axios 请求，模拟出我们需要的数据。\n\n先来说说它的基本用法：\n\n比如要随机生成一个列表，返回 5-10 条数据，可以这样：\n\n{\n\t\"list|5-10\": [\n\t\t{\n\t\t\t\"id|+1\": 1,          \n\t\t\tname: \"@cname\",             // 生成一个中文名字\n\t\t\tage: \"@integer(10-20)\",     // 返回10-20间的整数\n\t\t}\n\t]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n数据占位符：\n\n// 随机返回一个布尔值\n@boolean(min?, max?, current?)     \n\n// 返回一个随机自然数（大于等于0的整数）\n@natural(min?, max?)               \n\n// 返回一个随机的整数\n@integer(min?, max?)               \n\n/*\n返回一个随机的浮点数\nmin：整数部分的最小值；\nmax：整数部分的最大值；\ndmin：小数部分位数的最小值，默认为0；\ndmax：小数部分位数的最大值，默认值17\n*/\n@float(min?, max?, dmin?, dmax?)   \n\n/* \n返回一个随机字符。pool表示字符池，将从中选择一个字符返回，如果传入了 'lower' 或 'upper'、'number'、'symbol'，表示从内置的字符池从选取\n{\n    lower: \"abcdefghijklmnopqrstuvwxyz\",\n    upper: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n    number: \"0123456789\",\n    symbol: \"!@#$%^&*()[]\"\n}\n*/\n@character(pool?)   \n\n/*\n返回一个随机字符串\npool表示字符池，\nmin表示随机字符串最小长度，默认3。\nmax表示随机字符串的最大长度，默认为7\n*/\n@string(pool?, min?, max?)        \n\n/*\n返回一个整型数组\nstart表示数组的起始值\nstop表示数组的结束值（不包含在返回值中），必选值。\nstep表示整数间的步长，默认为1\n*/\n@range(start?, stop, step?)      \n\n\n/* \n返回一个随机的日期字符。\nformat表示生成的日期字符串的格式，默认格式yyyy-MM-dd    \n*/\n@date(format?)                      \n\n// 返回一个随机的时间字符串，默认格式HH:mm:ss\n@time(format?)                  \n\n// 返回一个随机的日期和时间字符串,默认格式yyyy-MM-dd HH:mm:ss\n@datetime(format?)              \n\n/* \n返回当前的日期和时间字符串。\nunit：时间单位，用于对当前日期和时间进行格式化。可选值有：year、month、day、hour、minute、second、week，默认不会格式化。\nformat：生成的日期和时间字符串的格式。默认值为 yyyy-MM-dd HH:mm:ss\n*/\n@now(unit?, format?)            \n\n\n/*\n生成一个随机的图片地址。\nsize：指示图片的宽高，格式为 '宽x高'\nbackground：指示图片的背景色\nforeground：指示图片的前景色\nformat：指示图片的格式。默认值为 'png'，可选值包括：'png'、'gif'、'jpg'\ntext：指示图片上的文字。默认值为参数 size。\n*/\n@image(size?, background?, foreground?, format?, text?) \n\n/*\n生成一段随机的 Base64 图片编码。\nsize：指示图片的宽高，格式为 '宽x高'\ntext：指示图片上的文字。默认值为参数 size。\n*/\n@dataImage(size?, text?)\n\n@color()                   // 随机生成一个有吸引力的颜色，格式为 '#RRGGBB'。\n\n@hex()                     // 随机生成一个有吸引力的颜色，格式为 '#RRGGBB'。\n\n@rgb()                     // 随机生成一个有吸引力的颜色，格式为 'rgb(r, g, b)'。\n\n@rgba()                    // 随机生成一个有吸引力的颜色，格式为 'rgba(r, g, b, a)'。\n\n@hsl()                     // 随机生成一个有吸引力的颜色，格式为 'hsl(h, s, l)'。\n\n\n/*\n随机生成一段英文文本\n@paragraph()\n@paragraph(len)\n@paragraph(min, max)\nlen：指示文本中句子的个数。默认值为 3 到 7 之间的随机数。\nmin：指示文本中句子的最小个数。默认值为 3。\nmax：指示文本中句子的最大个数。默认值为 7。\n*/\n@paragraph(min?, max?)\n\n/*\n随机生成一段中文文本。\n@cparagraph()\n@cparagraph(len)\n@cparagraph(min, max)\n*/\n@cparagraph(min?, max?)\n\n/*\n随机生成一个英文句子，第一个单词的首字母大写。\n@sentence()\n@sentence(len)\n@sentence(min, max)\nlen：指示句子中单词的个数。默认值为 12 到 18 之间的随机数。\nmin：指示句子中单词的最小个数。默认值为 12。\nmax：指示句子中单词的最大个数。默认值为 18。\n*/\n@sentence(min?, max?)\n\n/*\n随机生成一句中文文本。\n@csentence()\n@csentence(len)\n@csentence(min, max)\n*/\n@csentence(ming?, max?)\n\n/*\n随机生成一个单词\n@word()\n@word(len)\n@word(min, max)\nlen：指示单词中字符的个数。默认值为 3 到 10 之间的随机数。\nmin：指示单词中字符的最小个数，默认为3\nmax：指示单词中字符的最大个数，默认为10\n*/\n@word(min?, max?)\n\n/*\n随机生成一个汉字\n@cword()\n@cword(pool)\n@cword(length)\n@cword(pool, length)\n@cword(min, max)\n@cword(pool, min, max)\npool：汉字字符串。表示汉字字符池，将从中选择一个汉字字符返回。\nmin：随机汉字字符串的最小长度。默认值为 1。\nmax：随机汉字字符串的最大长度。默认值为 1。\n*/\n@cword(pool?, min?, max?)\n\n/*\n随机生成一个英文标题，每个单词的首字母大写。\n@title()\n@tilte(len)\n@title(min, max)\nlen：指示单词中字符的个数。默认值为 3 到 7 之间的随机数。\nmin：指示单词中字符的最小个数。默认值为 3。\nmax：指示单词中字符的最大个数。默认为7.\n*/\n@title(min?, max?)\n\n/*\n随机生成一句中文标题。\n@ctitle()\n@ctitle(len)\n@ctitle(min, max)\nlen：指示字数。默认值为 3 到 7 之间的随机数。\nmin：指示标题中字的最小个数。默认值为 3。\nmax：指示标题中字的最大个数。默认为7.\n*/\n@ctitle(min?, max?)\n\n// 随机生成一个常见的中文姓名。\n@cname()\n\n// 随机生成一个常见的中文姓。\n@cfirst()\n\n// 随机生成一个常见的中文名。\n@clast()\n\n// 随机生成一个常见的英文名。middle可选，布尔值。指示是否生成中间名。\n@name(middle?)\n\n// 随机生成一个常见的英文名。\n@first()\n\n// 随机生成一个常见的英文姓。\n@last()\n\n/*\n随机生成一个 URL。\n@url()\n@url(protocol, host)\nprotocol：指定 URL 协议。例如 http\nhost：指定 URL 域名和端口号。例如 nuysoft.com。\n*/\n@url(protocol?, host?)\n\n/*\n随机生成一个 URL 协议。返回以下值之一：'http'、'ftp'、'gopher'、'mailto'、'mid'、'cid'、'news'、'nntp'、'prospero'、'telnet'、'rlogin'、'tn3270'、'wais'。\n*/\n@protocol()\n\n// 随机生成一个域名\n@domain()\n\n// 随机生成一个顶级域名\n@tld()\n\n/*\n随机生成一个邮件地址。\n@email()\n@email(domain)\ndomain：指定邮件地址的域名。例如 qq.com。h.pqpneix@qq.com\"\n*/\n@email( domain? )\n\n// 随机生成一个IP地址\n@ip()\n\n// 随机生成一个（中国）大区。如，华中、华北\n@region()\n\n// 随机生成一个（中国）省（或直辖市、自治区、特别行政区）。\n@province()\n\n/*\n随机生成一个（中国）市。\n@city()\n@city(prefix)\nprefix：布尔值。指示是否生成所属的省。\n*/\n@city(prefix?)\n\n/*\n随机生成一个（中国）县。\nprefix：布尔值。指示是否生成所属的省、市。\n*/\n@county(prefix?)\n\n// 随机生成一个邮政编码（六位数字）。\n@zip()\n\n// 把字符串的第一个字母转换为大写。\n@capitalize(word)\n\n// 把字符串转换为大写\n@upper(str)\n\n// 把字符串转换为小写\n@lower(str)\n\n// 从数组中随机选取一个元素，并返回。\n@pick(arr)\n\n// 打乱数组中元素的顺序，并返回。\n@shuffle(arr)\n\n// 随机生成一个GUID。如662C63B4-FD43-66F4-3328-C54E3FF0D56E\n@guid()\n\n// 随机生成一个 18 位身份证。\n@ID()\n\n// 生成一个全局的自增整数。step可选，整数自增步长，默认为1\n@increment(step?)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n\n\n使用 mock 拦截 axios 请求：\n\nimport Mock from 'mockjs'\nimport axios from 'axios'\naxios.get('http://192.168.10.187:8089/api/mg/mall/goods', {}).then(res => {\n  console.log('res', res)\n})\nMock.mock('http://192.168.10.187:8089/api/mg/mall/goods', {\n  \"list|5-10\": [\n    {\n      \"suid|+1\": 1,\n      name: \"@cname\",\n      age: \"@integer(10-20)\",\n      address: \"@province @city @county\",\n      id: \"@ID\",\n      img: \"@image(100x100, #eee)\",\n      text: \"@cparagraph\"\n    }\n  ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n结果如下：\n\n",normalizedContent:"在项目中经常会遇到这种情况，前端页面写完了，服务端接口还没弄好，没有数据没法看页面具体的效果，贼尴尬，总不能说让后端小哥哥先给造点数据吧，人家这会儿忙着了，哪有空搭理你啊。\n\n这时候 mock 派上用场了，我们可以使用 mock 来拦截 axios 请求，模拟出我们需要的数据。\n\n先来说说它的基本用法：\n\n比如要随机生成一个列表，返回 5-10 条数据，可以这样：\n\n{\n\t\"list|5-10\": [\n\t\t{\n\t\t\t\"id|+1\": 1,          \n\t\t\tname: \"@cname\",             // 生成一个中文名字\n\t\t\tage: \"@integer(10-20)\",     // 返回10-20间的整数\n\t\t}\n\t]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n数据占位符：\n\n// 随机返回一个布尔值\n@boolean(min?, max?, current?)     \n\n// 返回一个随机自然数（大于等于0的整数）\n@natural(min?, max?)               \n\n// 返回一个随机的整数\n@integer(min?, max?)               \n\n/*\n返回一个随机的浮点数\nmin：整数部分的最小值；\nmax：整数部分的最大值；\ndmin：小数部分位数的最小值，默认为0；\ndmax：小数部分位数的最大值，默认值17\n*/\n@float(min?, max?, dmin?, dmax?)   \n\n/* \n返回一个随机字符。pool表示字符池，将从中选择一个字符返回，如果传入了 'lower' 或 'upper'、'number'、'symbol'，表示从内置的字符池从选取\n{\n    lower: \"abcdefghijklmnopqrstuvwxyz\",\n    upper: \"abcdefghijklmnopqrstuvwxyz\",\n    number: \"0123456789\",\n    symbol: \"!@#$%^&*()[]\"\n}\n*/\n@character(pool?)   \n\n/*\n返回一个随机字符串\npool表示字符池，\nmin表示随机字符串最小长度，默认3。\nmax表示随机字符串的最大长度，默认为7\n*/\n@string(pool?, min?, max?)        \n\n/*\n返回一个整型数组\nstart表示数组的起始值\nstop表示数组的结束值（不包含在返回值中），必选值。\nstep表示整数间的步长，默认为1\n*/\n@range(start?, stop, step?)      \n\n\n/* \n返回一个随机的日期字符。\nformat表示生成的日期字符串的格式，默认格式yyyy-mm-dd    \n*/\n@date(format?)                      \n\n// 返回一个随机的时间字符串，默认格式hh:mm:ss\n@time(format?)                  \n\n// 返回一个随机的日期和时间字符串,默认格式yyyy-mm-dd hh:mm:ss\n@datetime(format?)              \n\n/* \n返回当前的日期和时间字符串。\nunit：时间单位，用于对当前日期和时间进行格式化。可选值有：year、month、day、hour、minute、second、week，默认不会格式化。\nformat：生成的日期和时间字符串的格式。默认值为 yyyy-mm-dd hh:mm:ss\n*/\n@now(unit?, format?)            \n\n\n/*\n生成一个随机的图片地址。\nsize：指示图片的宽高，格式为 '宽x高'\nbackground：指示图片的背景色\nforeground：指示图片的前景色\nformat：指示图片的格式。默认值为 'png'，可选值包括：'png'、'gif'、'jpg'\ntext：指示图片上的文字。默认值为参数 size。\n*/\n@image(size?, background?, foreground?, format?, text?) \n\n/*\n生成一段随机的 base64 图片编码。\nsize：指示图片的宽高，格式为 '宽x高'\ntext：指示图片上的文字。默认值为参数 size。\n*/\n@dataimage(size?, text?)\n\n@color()                   // 随机生成一个有吸引力的颜色，格式为 '#rrggbb'。\n\n@hex()                     // 随机生成一个有吸引力的颜色，格式为 '#rrggbb'。\n\n@rgb()                     // 随机生成一个有吸引力的颜色，格式为 'rgb(r, g, b)'。\n\n@rgba()                    // 随机生成一个有吸引力的颜色，格式为 'rgba(r, g, b, a)'。\n\n@hsl()                     // 随机生成一个有吸引力的颜色，格式为 'hsl(h, s, l)'。\n\n\n/*\n随机生成一段英文文本\n@paragraph()\n@paragraph(len)\n@paragraph(min, max)\nlen：指示文本中句子的个数。默认值为 3 到 7 之间的随机数。\nmin：指示文本中句子的最小个数。默认值为 3。\nmax：指示文本中句子的最大个数。默认值为 7。\n*/\n@paragraph(min?, max?)\n\n/*\n随机生成一段中文文本。\n@cparagraph()\n@cparagraph(len)\n@cparagraph(min, max)\n*/\n@cparagraph(min?, max?)\n\n/*\n随机生成一个英文句子，第一个单词的首字母大写。\n@sentence()\n@sentence(len)\n@sentence(min, max)\nlen：指示句子中单词的个数。默认值为 12 到 18 之间的随机数。\nmin：指示句子中单词的最小个数。默认值为 12。\nmax：指示句子中单词的最大个数。默认值为 18。\n*/\n@sentence(min?, max?)\n\n/*\n随机生成一句中文文本。\n@csentence()\n@csentence(len)\n@csentence(min, max)\n*/\n@csentence(ming?, max?)\n\n/*\n随机生成一个单词\n@word()\n@word(len)\n@word(min, max)\nlen：指示单词中字符的个数。默认值为 3 到 10 之间的随机数。\nmin：指示单词中字符的最小个数，默认为3\nmax：指示单词中字符的最大个数，默认为10\n*/\n@word(min?, max?)\n\n/*\n随机生成一个汉字\n@cword()\n@cword(pool)\n@cword(length)\n@cword(pool, length)\n@cword(min, max)\n@cword(pool, min, max)\npool：汉字字符串。表示汉字字符池，将从中选择一个汉字字符返回。\nmin：随机汉字字符串的最小长度。默认值为 1。\nmax：随机汉字字符串的最大长度。默认值为 1。\n*/\n@cword(pool?, min?, max?)\n\n/*\n随机生成一个英文标题，每个单词的首字母大写。\n@title()\n@tilte(len)\n@title(min, max)\nlen：指示单词中字符的个数。默认值为 3 到 7 之间的随机数。\nmin：指示单词中字符的最小个数。默认值为 3。\nmax：指示单词中字符的最大个数。默认为7.\n*/\n@title(min?, max?)\n\n/*\n随机生成一句中文标题。\n@ctitle()\n@ctitle(len)\n@ctitle(min, max)\nlen：指示字数。默认值为 3 到 7 之间的随机数。\nmin：指示标题中字的最小个数。默认值为 3。\nmax：指示标题中字的最大个数。默认为7.\n*/\n@ctitle(min?, max?)\n\n// 随机生成一个常见的中文姓名。\n@cname()\n\n// 随机生成一个常见的中文姓。\n@cfirst()\n\n// 随机生成一个常见的中文名。\n@clast()\n\n// 随机生成一个常见的英文名。middle可选，布尔值。指示是否生成中间名。\n@name(middle?)\n\n// 随机生成一个常见的英文名。\n@first()\n\n// 随机生成一个常见的英文姓。\n@last()\n\n/*\n随机生成一个 url。\n@url()\n@url(protocol, host)\nprotocol：指定 url 协议。例如 http\nhost：指定 url 域名和端口号。例如 nuysoft.com。\n*/\n@url(protocol?, host?)\n\n/*\n随机生成一个 url 协议。返回以下值之一：'http'、'ftp'、'gopher'、'mailto'、'mid'、'cid'、'news'、'nntp'、'prospero'、'telnet'、'rlogin'、'tn3270'、'wais'。\n*/\n@protocol()\n\n// 随机生成一个域名\n@domain()\n\n// 随机生成一个顶级域名\n@tld()\n\n/*\n随机生成一个邮件地址。\n@email()\n@email(domain)\ndomain：指定邮件地址的域名。例如 qq.com。h.pqpneix@qq.com\"\n*/\n@email( domain? )\n\n// 随机生成一个ip地址\n@ip()\n\n// 随机生成一个（中国）大区。如，华中、华北\n@region()\n\n// 随机生成一个（中国）省（或直辖市、自治区、特别行政区）。\n@province()\n\n/*\n随机生成一个（中国）市。\n@city()\n@city(prefix)\nprefix：布尔值。指示是否生成所属的省。\n*/\n@city(prefix?)\n\n/*\n随机生成一个（中国）县。\nprefix：布尔值。指示是否生成所属的省、市。\n*/\n@county(prefix?)\n\n// 随机生成一个邮政编码（六位数字）。\n@zip()\n\n// 把字符串的第一个字母转换为大写。\n@capitalize(word)\n\n// 把字符串转换为大写\n@upper(str)\n\n// 把字符串转换为小写\n@lower(str)\n\n// 从数组中随机选取一个元素，并返回。\n@pick(arr)\n\n// 打乱数组中元素的顺序，并返回。\n@shuffle(arr)\n\n// 随机生成一个guid。如662c63b4-fd43-66f4-3328-c54e3ff0d56e\n@guid()\n\n// 随机生成一个 18 位身份证。\n@id()\n\n// 生成一个全局的自增整数。step可选，整数自增步长，默认为1\n@increment(step?)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n\n\n使用 mock 拦截 axios 请求：\n\nimport mock from 'mockjs'\nimport axios from 'axios'\naxios.get('http://192.168.10.187:8089/api/mg/mall/goods', {}).then(res => {\n  console.log('res', res)\n})\nmock.mock('http://192.168.10.187:8089/api/mg/mall/goods', {\n  \"list|5-10\": [\n    {\n      \"suid|+1\": 1,\n      name: \"@cname\",\n      age: \"@integer(10-20)\",\n      address: \"@province @city @county\",\n      id: \"@id\",\n      img: \"@image(100x100, #eee)\",\n      text: \"@cparagraph\"\n    }\n  ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n结果如下：\n\n",charsets:{cjk:!0}},{title:"Mac上安装MySQL以及MySQL基本操作",frontmatter:{title:"Mac上安装MySQL以及MySQL基本操作",date:"2022-04-16T10:38:33.000Z",permalink:"/pages/dba329/",categories:["MySQL"],tags:[null]},regularPath:"/MySQL/01.MySQL/01.Mac%E4%B8%8A%E5%AE%89%E8%A3%85MySQL%E4%BB%A5%E5%8F%8AMySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html",relativePath:"MySQL/01.MySQL/01.Mac上安装MySQL以及MySQL基本操作.md",key:"v-794c0a92",path:"/pages/dba329/",headers:[{level:2,title:"一、MySQL安装",slug:"一、mysql安装",normalizedTitle:"一、mysql 安装",charIndex:2},{level:3,title:"1、安装mysql",slug:"_1、安装mysql",normalizedTitle:"1、安装 mysql",charIndex:17},{level:3,title:"2、启动、关闭、重启mysql",slug:"_2、启动、关闭、重启mysql",normalizedTitle:"2、启动、关闭、重启 mysql",charIndex:57},{level:3,title:"3、执行安全设置",slug:"_3、执行安全设置",normalizedTitle:"3、执行安全设置",charIndex:172},{level:3,title:"4、登录mysql",slug:"_4、登录mysql",normalizedTitle:"4、登录 mysql",charIndex:241},{level:2,title:"二、MySQL基本操作",slug:"二、mysql基本操作",normalizedTitle:"二、mysql 基本操作",charIndex:479},{level:3,title:"1、创建数据库",slug:"_1、创建数据库",normalizedTitle:"1、创建数据库",charIndex:496},{level:3,title:"2、删除数据库",slug:"_2、删除数据库",normalizedTitle:"2、删除数据库",charIndex:726},{level:3,title:"3、选择数据库",slug:"_3、选择数据库",normalizedTitle:"3、选择数据库",charIndex:966},{level:3,title:"4、创建表",slug:"_4、创建表",normalizedTitle:"4、创建表",charIndex:1096},{level:3,title:"5、删除表",slug:"_5、删除表",normalizedTitle:"5、删除表",charIndex:1836},{level:3,title:"6、查看表",slug:"_6、查看表",normalizedTitle:"6、查看表",charIndex:1875},{level:3,title:"7、插入数据",slug:"_7、插入数据",normalizedTitle:"7、插入数据",charIndex:1904},{level:3,title:"8、查询数据",slug:"_8、查询数据",normalizedTitle:"8、查询数据",charIndex:2112},{level:3,title:"9、删除数据",slug:"_9、删除数据",normalizedTitle:"9、删除数据",charIndex:2272},{level:3,title:"10、更新数据",slug:"_10、更新数据",normalizedTitle:"10、更新数据",charIndex:2385},{level:3,title:"11、修改表，添加字段",slug:"_11、修改表-添加字段",normalizedTitle:"11、修改表，添加字段",charIndex:2479},{level:3,title:"12、修改表，修改字段",slug:"_12、修改表-修改字段",normalizedTitle:"12、修改表，修改字段",charIndex:2660},{level:3,title:"13、查询表结构",slug:"_13、查询表结构",normalizedTitle:"13、查询表结构",charIndex:2851},{level:3,title:"14、修改表，删除字段",slug:"_14、修改表-删除字段",normalizedTitle:"14、修改表，删除字段",charIndex:2887},{level:3,title:"15、多表查询",slug:"_15、多表查询",normalizedTitle:"15、多表查询",charIndex:3019},{level:3,title:"16、聚合查询",slug:"_16、聚合查询",normalizedTitle:"16、聚合查询",charIndex:3701}],lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:"一、MySQL安装 1、安装mysql 2、启动、关闭、重启mysql 3、执行安全设置 4、登录mysql 二、MySQL基本操作 1、创建数据库 2、删除数据库 3、选择数据库 4、创建表 5、删除表 6、查看表 7、插入数据 8、查询数据 9、删除数据 10、更新数据 11、修改表，添加字段 12、修改表，修改字段 13、查询表结构 14、修改表，删除字段 15、多表查询 16、聚合查询",content:"# 一、MySQL 安装\n\n\n# 1、安装 mysql\n\nbrew install mysql\n\n\n1\n\n\n\n# 2、启动、关闭、重启 mysql\n\nmysql.server start    #启动\n\nmysql.server stop     #关闭\n\nmysql.server restart  #重启\n\n\n1\n2\n3\n4\n5\n\n\n\n# 3、执行安全设置\n\nmysql_secure_installation\n\n\n1\n\n\n按照提示选择密码等级并设置 root 密码。\n\n\n# 4、登录 mysql\n\n#登录本机的MySQL数据库\nmysql -u root -p\n\n/*\n-h : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;\n-u : 登录的用户名;\n-p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。\n*/\nmysql -h 主机名 -u 用户名 -p\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n按提示输入 root 密码\n\n\n# 二、MySQL 基本操作\n\n\n# 1、创建数据库\n\nCREATE DATABASE 数据库名;\n\n\n1\n\n\n如果数据库已存在，则会创建失败，创建时，一般会先判断数据库是否存在，如不存在再创建\n\n#创建一个数据库，指定默认字符集为utf8，默认校对规则为utf8_chinese_ci（简体中文，不区分大小写）\nCREATE DATABASE IF NOT EXISTS 数据库名 DEFAULT CHARSET utf8 COLLATE utf8_chinese_ci;\n\n\n1\n2\n\n\n\n# 2、删除数据库\n\nDROP DATABASE 数据库名;\n\n\n1\n\n\n如果数据库不存在，执行上面操作会报错，此时可以使用 IF EXISTS，判断是否存在，如存在再进行删除操作\n\nDROP DATABASE IF EXISTS 数据库名;\n\n\n1\n\n\nps：此操作慎用，在执行该命令后，MySQL 不会给出任何提示确认信息。DROP DATABASE 删除数据库后，数据库中存储的所有数据表和数据也将一同被删除，而且不能恢复。因此最好在删除数据库之前先将数据库进行备份。\n\n\n# 3、选择数据库\n\n在 MySQL 中有许多系统自带的数据库，因此在操作前需要确定是哪一个数据库，当用 CREATE DATABASE 语句创建数据库后，该数据库不会自动成为当前数据库，需要使用 USE 来指定当前数据库\n\nuse 数据库名;\n\n\n1\n\n\n\n# 4、创建表\n\nCREATE TABLE table_name (column_name column_type);\n\n示例代码：\nroot@host# mysql -u root -p\nEnter password:*******\nmysql> use RUNOOB;\nDatabase changed\nmysql> CREATE TABLE runoob_tbl(\n   -> runoob_id INT NOT NULL AUTO_INCREMENT,\n   -> runoob_title VARCHAR(100) NOT NULL,\n   -> runoob_author VARCHAR(40) NOT NULL,\n   -> submission_date DATE,\n   -> PRIMARY KEY ( runoob_id )\n   -> )ENGINE=InnoDB DEFAULT CHARSET=utf8;\nQuery OK, 0 rows affected (0.16 sec)\nmysql>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n说明：\n\n如果你不想字段为 NULL 可以设置字段的属性为 NOT NULL， 在操作数据库时如果输入该字段的数据为 NULL ，就会报错。\n\nAUTO_INCREMENT 定义列为自增的属性，一般用于主键，数值会自动加 1。\n\nPRIMARY KEY 关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。\n\nENGINE 设置存储引擎，CHARSET 设置编码。\n\n注意：MySQL 命令终止符为分号；。\n\n注意： -> 是换行符标识，不要复制。\n\n\n# 5、删除表\n\nDROP TABLE table_name;\n\n\n1\n\n\n\n# 6、查看表\n\nSHOW TABLES;\n\n\n1\n\n\n\n# 7、插入数据\n\nINSERT INTO table_name （field1, field2, ...fieldN）\nVALUES\n(value1, value2, ...valueN);\n\n\n1\n2\n3\n\n\nps：注意： 使用箭头标记 -> 不是 SQL 语句的一部分，它仅仅表示一个新行，如果一条SQL语句太长，我们可以通过回车键来创建一个新行来编写 SQL 语句，SQL 语句的命令结束符为分号 ;。\n\n\n# 8、查询数据\n\nSELECT column_name,column_name\nFROM table_name\n[WHERE Clause]\n[LIMIT N][ OFFSET M]\n\n#例如：读取user_list表中所有数据\nselect * from user_list;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 9、删除数据\n\nDELETE FROM table_name [WHERE Clause]\n\n\n1\n\n\n如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。\n\n你可以在 WHERE 子句中指定任何条件\n\n\n# 10、更新数据\n\nUPDATE table_name SET field1=new-value1, field2=new-value2\n[WHERE Clause]\n\n\n1\n2\n\n\n\n# 11、修改表，添加字段\n\nALTER TABLE table_name ADD column_name  column_type;\n\n-- 例如，如下语句将为user_list表添加一个新字段id_card，为char类型，可存储20个字符。\nALTER TABLE user_list ADD id_card char(20);\n\n\n1\n2\n3\n4\n\n\n\n# 12、修改表，修改字段\n\nALTER TABLE table_name CHANGE column_name1 column_name2 column_type;\n\n-- 例如，将user_list表中id_card字段修改为idCard字段\nALTER TABLE user_list CHANGE id_card idCard char(20);\n\n\n1\n2\n3\n4\n\n\n\n# 13、查询表结构\n\nDESC table_name;\n\n\n1\n\n\n\n# 14、修改表，删除字段\n\nALTER TABLE table_name DROP column_name;\n\n# 删除user_list表中的id_card字段\nALTER TABLE user_list DROP id_card;\n\n\n1\n2\n3\n4\n\n\n\n# 15、多表查询\n\n# 例如，同时从students表和classes表中查询\nSELECT * FROM students, classes;\n\n/* \n当上述表查询结果中有两个id，两个name的时候，在结果集中不好区分，\n这时候可以利用投影查询的“设置列别名”来给两个表各自的id和name起别名\n*/\nSELECT \n  students.id sid, \n  students.name, \n  students.gender, \n  students.score, \n  classes.id cid, \n  classes.name cname \nFROM students, classes;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n注意：多表查询时，要使用 表名。列名 这样的方式来引用列和设置别名，这样避免了结果集的列名重复问题。可能你发现了，使用 表名。列名 这种方式来列举两个表所有列很繁琐，MySQL 考虑到了这点，贴心的提供了给表设置别名的功能。\n\nSELECT \n  s.id sid, \n  s.name, \n  s.gender, \n  s.score, \n  c.id cid, \n  c.name cname \nFROM students s, classes c;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n注意：FROM 子句给表设置别名的语法是 FROM 表名 1 别名 1, 表名 2 别名 2。这样用别名 s 和 c 分别表示 students 和 classes 表。\n\n\n# 16、聚合查询\n\n# 查询表总条数\nSELECT COUNT(*) FROM students;\n\n# 查询的时候可以给列起个别名，便于处理结果, COUNT(*)和COUNT(id)效果一样\nSELECT COUNT(*) num FROM students;\n\n\n1\n2\n3\n4\n5\n\n\n常用聚合函数：\n\n函数      说明\nCOUNT   计算所有列的行数\nSUM     计算某一列的合计值，该列必须为数值类型\nAVG     计算某一列的平均值，该列必须为数值类型\nMAX     计算某一列的最大值\nMIN     计算某一列的最小值",normalizedContent:"# 一、mysql 安装\n\n\n# 1、安装 mysql\n\nbrew install mysql\n\n\n1\n\n\n\n# 2、启动、关闭、重启 mysql\n\nmysql.server start    #启动\n\nmysql.server stop     #关闭\n\nmysql.server restart  #重启\n\n\n1\n2\n3\n4\n5\n\n\n\n# 3、执行安全设置\n\nmysql_secure_installation\n\n\n1\n\n\n按照提示选择密码等级并设置 root 密码。\n\n\n# 4、登录 mysql\n\n#登录本机的mysql数据库\nmysql -u root -p\n\n/*\n-h : 指定客户端所要登录的 mysql 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;\n-u : 登录的用户名;\n-p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。\n*/\nmysql -h 主机名 -u 用户名 -p\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n按提示输入 root 密码\n\n\n# 二、mysql 基本操作\n\n\n# 1、创建数据库\n\ncreate database 数据库名;\n\n\n1\n\n\n如果数据库已存在，则会创建失败，创建时，一般会先判断数据库是否存在，如不存在再创建\n\n#创建一个数据库，指定默认字符集为utf8，默认校对规则为utf8_chinese_ci（简体中文，不区分大小写）\ncreate database if not exists 数据库名 default charset utf8 collate utf8_chinese_ci;\n\n\n1\n2\n\n\n\n# 2、删除数据库\n\ndrop database 数据库名;\n\n\n1\n\n\n如果数据库不存在，执行上面操作会报错，此时可以使用 if exists，判断是否存在，如存在再进行删除操作\n\ndrop database if exists 数据库名;\n\n\n1\n\n\nps：此操作慎用，在执行该命令后，mysql 不会给出任何提示确认信息。drop database 删除数据库后，数据库中存储的所有数据表和数据也将一同被删除，而且不能恢复。因此最好在删除数据库之前先将数据库进行备份。\n\n\n# 3、选择数据库\n\n在 mysql 中有许多系统自带的数据库，因此在操作前需要确定是哪一个数据库，当用 create database 语句创建数据库后，该数据库不会自动成为当前数据库，需要使用 use 来指定当前数据库\n\nuse 数据库名;\n\n\n1\n\n\n\n# 4、创建表\n\ncreate table table_name (column_name column_type);\n\n示例代码：\nroot@host# mysql -u root -p\nenter password:*******\nmysql> use runoob;\ndatabase changed\nmysql> create table runoob_tbl(\n   -> runoob_id int not null auto_increment,\n   -> runoob_title varchar(100) not null,\n   -> runoob_author varchar(40) not null,\n   -> submission_date date,\n   -> primary key ( runoob_id )\n   -> )engine=innodb default charset=utf8;\nquery ok, 0 rows affected (0.16 sec)\nmysql>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n说明：\n\n如果你不想字段为 null 可以设置字段的属性为 not null， 在操作数据库时如果输入该字段的数据为 null ，就会报错。\n\nauto_increment 定义列为自增的属性，一般用于主键，数值会自动加 1。\n\nprimary key 关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。\n\nengine 设置存储引擎，charset 设置编码。\n\n注意：mysql 命令终止符为分号；。\n\n注意： -> 是换行符标识，不要复制。\n\n\n# 5、删除表\n\ndrop table table_name;\n\n\n1\n\n\n\n# 6、查看表\n\nshow tables;\n\n\n1\n\n\n\n# 7、插入数据\n\ninsert into table_name （field1, field2, ...fieldn）\nvalues\n(value1, value2, ...valuen);\n\n\n1\n2\n3\n\n\nps：注意： 使用箭头标记 -> 不是 sql 语句的一部分，它仅仅表示一个新行，如果一条sql语句太长，我们可以通过回车键来创建一个新行来编写 sql 语句，sql 语句的命令结束符为分号 ;。\n\n\n# 8、查询数据\n\nselect column_name,column_name\nfrom table_name\n[where clause]\n[limit n][ offset m]\n\n#例如：读取user_list表中所有数据\nselect * from user_list;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 9、删除数据\n\ndelete from table_name [where clause]\n\n\n1\n\n\n如果没有指定 where 子句，mysql 表中的所有记录将被删除。\n\n你可以在 where 子句中指定任何条件\n\n\n# 10、更新数据\n\nupdate table_name set field1=new-value1, field2=new-value2\n[where clause]\n\n\n1\n2\n\n\n\n# 11、修改表，添加字段\n\nalter table table_name add column_name  column_type;\n\n-- 例如，如下语句将为user_list表添加一个新字段id_card，为char类型，可存储20个字符。\nalter table user_list add id_card char(20);\n\n\n1\n2\n3\n4\n\n\n\n# 12、修改表，修改字段\n\nalter table table_name change column_name1 column_name2 column_type;\n\n-- 例如，将user_list表中id_card字段修改为idcard字段\nalter table user_list change id_card idcard char(20);\n\n\n1\n2\n3\n4\n\n\n\n# 13、查询表结构\n\ndesc table_name;\n\n\n1\n\n\n\n# 14、修改表，删除字段\n\nalter table table_name drop column_name;\n\n# 删除user_list表中的id_card字段\nalter table user_list drop id_card;\n\n\n1\n2\n3\n4\n\n\n\n# 15、多表查询\n\n# 例如，同时从students表和classes表中查询\nselect * from students, classes;\n\n/* \n当上述表查询结果中有两个id，两个name的时候，在结果集中不好区分，\n这时候可以利用投影查询的“设置列别名”来给两个表各自的id和name起别名\n*/\nselect \n  students.id sid, \n  students.name, \n  students.gender, \n  students.score, \n  classes.id cid, \n  classes.name cname \nfrom students, classes;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n注意：多表查询时，要使用 表名。列名 这样的方式来引用列和设置别名，这样避免了结果集的列名重复问题。可能你发现了，使用 表名。列名 这种方式来列举两个表所有列很繁琐，mysql 考虑到了这点，贴心的提供了给表设置别名的功能。\n\nselect \n  s.id sid, \n  s.name, \n  s.gender, \n  s.score, \n  c.id cid, \n  c.name cname \nfrom students s, classes c;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n注意：from 子句给表设置别名的语法是 from 表名 1 别名 1, 表名 2 别名 2。这样用别名 s 和 c 分别表示 students 和 classes 表。\n\n\n# 16、聚合查询\n\n# 查询表总条数\nselect count(*) from students;\n\n# 查询的时候可以给列起个别名，便于处理结果, count(*)和count(id)效果一样\nselect count(*) num from students;\n\n\n1\n2\n3\n4\n5\n\n\n常用聚合函数：\n\n函数      说明\ncount   计算所有列的行数\nsum     计算某一列的合计值，该列必须为数值类型\navg     计算某一列的平均值，该列必须为数值类型\nmax     计算某一列的最大值\nmin     计算某一列的最小值",charsets:{cjk:!0}},{title:"本地数据库上传到服务器，并访问服务器数据库",frontmatter:{title:"本地数据库上传到服务器，并访问服务器数据库",date:"2022-04-26T10:57:51.000Z",permalink:"/pages/beb076/",categories:["MySQL"],tags:[null]},regularPath:"/MySQL/01.MySQL/03.%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%87%BA%E7%84%B6%E5%90%8E%E4%B8%8A%E4%BC%A0%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%B9%B6%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%B0%E6%8D%AE%E5%BA%93.html",relativePath:"MySQL/01.MySQL/03.本地数据库导出然后上传到服务器，并访问服务器数据库.md",key:"v-87620ef4",path:"/pages/beb076/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"假设 sql 数据已导出。这里通过宝塔 Linux 面板来添加数据库（ps：我用的腾讯云轻量服务器）。\n\n\n\n提交完毕后，列表中就会出现一条数据，然后点击 “管理”，可进入到 phpMyAdmin 中看到刚刚创建的那个数据库了。\n然后点击 “导入”，上传本地的.sql 文件即可。\n\n\n\n这时候本地数据库就上传到远程服务器上了，本地如果要访问服务器数据库，那么本地项目（koa2）的数据库配置文件中就要这样写了。\n\nconst mysql = {\n    host: 'localhost',         // 此处改为远程服务器的公网IP\n    port: '3306',              // 数据库默认端口，不用变\n    user: 'DEMO',              // 上面创建的数据库用户名\n    password: 'RD4bp4tYHwBmMa8s',  // 创建数据库时的密码\n    database: 'demo',             // 创建的数据库名\n}\nmodule.exports = mysql\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n然后启动本地 node 项目，开打前端项目，即可访问远程服务器的数据库，并进行增删改查操作了。\n\nps：宝塔面板中防火墙跟腾讯云轻量服务器中的防火墙都需放行3306端口，否则本地项目连接数据库会被拒绝，报错：‘net::ERR_CONNECTION_REFUSED‘",normalizedContent:"假设 sql 数据已导出。这里通过宝塔 linux 面板来添加数据库（ps：我用的腾讯云轻量服务器）。\n\n\n\n提交完毕后，列表中就会出现一条数据，然后点击 “管理”，可进入到 phpmyadmin 中看到刚刚创建的那个数据库了。\n然后点击 “导入”，上传本地的.sql 文件即可。\n\n\n\n这时候本地数据库就上传到远程服务器上了，本地如果要访问服务器数据库，那么本地项目（koa2）的数据库配置文件中就要这样写了。\n\nconst mysql = {\n    host: 'localhost',         // 此处改为远程服务器的公网ip\n    port: '3306',              // 数据库默认端口，不用变\n    user: 'demo',              // 上面创建的数据库用户名\n    password: 'rd4bp4tyhwbmma8s',  // 创建数据库时的密码\n    database: 'demo',             // 创建的数据库名\n}\nmodule.exports = mysql\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n然后启动本地 node 项目，开打前端项目，即可访问远程服务器的数据库，并进行增删改查操作了。\n\nps：宝塔面板中防火墙跟腾讯云轻量服务器中的防火墙都需放行3306端口，否则本地项目连接数据库会被拒绝，报错：‘net::err_connection_refused‘",charsets:{cjk:!0}},{title:"ohpm安装及配置",frontmatter:{title:"ohpm安装及配置",date:"2023-10-09T18:33:03.000Z",permalink:"/pages/6b9001/",categories:["HarmonyOS"],tags:[null]},regularPath:"/HarmonyOS/01.%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/05.ohpm%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE.html",relativePath:"HarmonyOS/01.基础入门/05.ohpm安装及配置.md",key:"v-8259770e",path:"/pages/6b9001/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"这里均已 Mac 环境为例\n\n\n# 1、安装\n\n1、下载 ohpm 工具包，点击链接获取\n\n2、解压文件后，我将其放到我 sdk 文件同目录下，如我的 sdk 存放路径为 / Users/jiangfeng/Library/Huawei/Sdk\n\n\n3、配置环境变量，在 PATH 路径下添加 HDC 工具路径和添加 HDC_SERVER_PORT 端口信息，在.bash_profile 文件中增加如下配置并保存：\n\nexport PATH=$PATH:/Users/jiangfeng/Library/Huawei/command-line-tools/ohpm/bin\nexport PATH=$PATH:/Users/jiangfeng/Library/Huawei/Sdk/hmscore/3.1.0/toolchains\nexport CLASSPATH\nHDC_SERVER_PORT=7035\nlaunchctl setenv HDC_SERVER_PORT $HDC_SERVER_PORT\nexport HDC_SERVER_PORT\n\n\n1\n2\n3\n4\n5\n6\n\n\n4、执行以下命令，使用配置的环境变量生效。\n\nsource ~/.bash_profile\n// 或者 source /Users/jiangfeng/.bash_profile\n\n\n1\n2\n\n\n5、找到刚存放的 ohpm 工具包，进入 ohpm/bin 目录，双击 init，下图第一个\n\n\n6、然后在命令窗口中查看环境变量，\n\necho $PATH\n\n\n1\n\n\n如果出现有刚配置的内容，则继续执行 ohpm 命令，如果有如下内容，说明配置成功\n\n\n至此，满心欢喜的以为成功了，然而并没有，当我新开窗口后，执行 ohpm，发现找不到 ohpm，原因是我用的 zsh，因此需要在.zshrc 配置文件中增加如下配置，并保存\n\nexport PATH=/Users/jiangfeng/Library/Huawei/command-line-tools/ohpm/bin:$PATH\nexport PATH=/Users/jiangfeng/Library/Huawei/Sdk/hmscore/3.1.0/toolchains:$PATH\nexport CLASSPATH\nHDC_SERVER_PORT=7035\nlaunchctl setenv HDC_SERVER_PORT $HDC_SERVER_PORT\nexport HDC_SERVER_PORT\n\n\n1\n2\n3\n4\n5\n6\n\n\n然后在命令窗口中执行 source ~/.zshrc 查看刚配置的环境变量是否成功，如果成功了，此时可以新开一个命令窗口，然后执行 ohpm，发现是可以的。\n\n如果 DevEco Studio 中执行 ohpm 报查找不到命令错误，则关闭命令窗口标签页重新开一个或者关闭并重启 DevEco Studio 后就可以了",normalizedContent:"这里均已 mac 环境为例\n\n\n# 1、安装\n\n1、下载 ohpm 工具包，点击链接获取\n\n2、解压文件后，我将其放到我 sdk 文件同目录下，如我的 sdk 存放路径为 / users/jiangfeng/library/huawei/sdk\n\n\n3、配置环境变量，在 path 路径下添加 hdc 工具路径和添加 hdc_server_port 端口信息，在.bash_profile 文件中增加如下配置并保存：\n\nexport path=$path:/users/jiangfeng/library/huawei/command-line-tools/ohpm/bin\nexport path=$path:/users/jiangfeng/library/huawei/sdk/hmscore/3.1.0/toolchains\nexport classpath\nhdc_server_port=7035\nlaunchctl setenv hdc_server_port $hdc_server_port\nexport hdc_server_port\n\n\n1\n2\n3\n4\n5\n6\n\n\n4、执行以下命令，使用配置的环境变量生效。\n\nsource ~/.bash_profile\n// 或者 source /users/jiangfeng/.bash_profile\n\n\n1\n2\n\n\n5、找到刚存放的 ohpm 工具包，进入 ohpm/bin 目录，双击 init，下图第一个\n\n\n6、然后在命令窗口中查看环境变量，\n\necho $path\n\n\n1\n\n\n如果出现有刚配置的内容，则继续执行 ohpm 命令，如果有如下内容，说明配置成功\n\n\n至此，满心欢喜的以为成功了，然而并没有，当我新开窗口后，执行 ohpm，发现找不到 ohpm，原因是我用的 zsh，因此需要在.zshrc 配置文件中增加如下配置，并保存\n\nexport path=/users/jiangfeng/library/huawei/command-line-tools/ohpm/bin:$path\nexport path=/users/jiangfeng/library/huawei/sdk/hmscore/3.1.0/toolchains:$path\nexport classpath\nhdc_server_port=7035\nlaunchctl setenv hdc_server_port $hdc_server_port\nexport hdc_server_port\n\n\n1\n2\n3\n4\n5\n6\n\n\n然后在命令窗口中执行 source ~/.zshrc 查看刚配置的环境变量是否成功，如果成功了，此时可以新开一个命令窗口，然后执行 ohpm，发现是可以的。\n\n如果 deveco studio 中执行 ohpm 报查找不到命令错误，则关闭命令窗口标签页重新开一个或者关闭并重启 deveco studio 后就可以了",charsets:{cjk:!0}},{title:"项目简介",frontmatter:{title:"项目简介",date:"2023-09-25T11:17:37.000Z",permalink:"/pages/65340b/",categories:["HarmonyOS"],tags:[null]},regularPath:"/HarmonyOS/01.%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/01.%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B.html",relativePath:"HarmonyOS/01.基础入门/01.项目简介.md",key:"v-5ca57a3b",path:"/pages/65340b/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"安装完 DevEco Studio 工具后，可以按如图示选择 Ohos 项后，IDE 会自动将目录按照类型分类。\n\n分类后目录如下：\n\n\n其中，\n\n * AppScope 主要用于存放整个应用公共的信息与资源；其中有 resources 文件夹和配置文件 app.json5。AppScope>resources>base 中包含 element 和 media 两个文件夹；\n   * element 文件夹主要存放公共的字符串、布局文件等资源。\n   * media 存放全局公共的多媒体资源文件。\n * Entry 是默认的初始模块，ets 文件夹内用于存放编写的代码文件，configuration 则存放相应模块的配置文件，resources 对应模块内的公共资源；\n * configuration 是存放工程应用级的配置文件\n\n完整目录如下：\n\n\n\n * oh_modules 是工程的依赖包，存放工程依赖的源文件。\n * build-profile.json5 是工程级配置信息，包括签名、产品配置等。\n * hvigorfile.ts 是工程级编译构建任务脚本，hvigor 是基于任务管理机制实现的一款全新的自动化构建工具，主要提供任务注册编排，工程模型管理、配置管理等核心能力。\n * oh-package.json5 是工程级依赖配置文件，用于记录引入包的配置信息。\n * app.json5 是应用的全局配置文件，用于存放应用公共的配置信息\n\n\n\n其中配置信息如下：\n\n * bundleName 是包名。\n * vendor 是应用程序供应商。\n * versionCode 是用于区分应用版本。\n * versionName 是版本号。\n * icon 对应于应用的显示图标。\n * label 是应用名。\n\nsrc/main/resources/base/profile/main_pages.json 文件保存的是页面 page 的路径配置信息，所有需要进行路由跳转的 page 页面都要在这里进行配置\n\n我们的开发主要集中在 ets 文件夹中，pages 用于存放页面，index 为初始页面，",normalizedContent:"安装完 deveco studio 工具后，可以按如图示选择 ohos 项后，ide 会自动将目录按照类型分类。\n\n分类后目录如下：\n\n\n其中，\n\n * appscope 主要用于存放整个应用公共的信息与资源；其中有 resources 文件夹和配置文件 app.json5。appscope>resources>base 中包含 element 和 media 两个文件夹；\n   * element 文件夹主要存放公共的字符串、布局文件等资源。\n   * media 存放全局公共的多媒体资源文件。\n * entry 是默认的初始模块，ets 文件夹内用于存放编写的代码文件，configuration 则存放相应模块的配置文件，resources 对应模块内的公共资源；\n * configuration 是存放工程应用级的配置文件\n\n完整目录如下：\n\n\n\n * oh_modules 是工程的依赖包，存放工程依赖的源文件。\n * build-profile.json5 是工程级配置信息，包括签名、产品配置等。\n * hvigorfile.ts 是工程级编译构建任务脚本，hvigor 是基于任务管理机制实现的一款全新的自动化构建工具，主要提供任务注册编排，工程模型管理、配置管理等核心能力。\n * oh-package.json5 是工程级依赖配置文件，用于记录引入包的配置信息。\n * app.json5 是应用的全局配置文件，用于存放应用公共的配置信息\n\n\n\n其中配置信息如下：\n\n * bundlename 是包名。\n * vendor 是应用程序供应商。\n * versioncode 是用于区分应用版本。\n * versionname 是版本号。\n * icon 对应于应用的显示图标。\n * label 是应用名。\n\nsrc/main/resources/base/profile/main_pages.json 文件保存的是页面 page 的路径配置信息，所有需要进行路由跳转的 page 页面都要在这里进行配置\n\n我们的开发主要集中在 ets 文件夹中，pages 用于存放页面，index 为初始页面，",charsets:{cjk:!0}},{title:"DBeaver导出sql",frontmatter:{title:"DBeaver导出sql",date:"2022-04-26T10:48:39.000Z",permalink:"/pages/f179f3/",categories:["MySQL"],tags:[null]},regularPath:"/MySQL/01.MySQL/02.DBeaver%E5%AF%BC%E5%87%BAsql.html",relativePath:"MySQL/01.MySQL/02.DBeaver导出sql.md",key:"v-7b6f6e1b",path:"/pages/f179f3/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"在 DBeaver 中导出 sql 步骤是这样的：\n\n先选择要导出的数据库，鼠标右键，然后选中 “工具”，然后选择 “转储数据库”\n\n如下：\n\n\n\n然后会出现如下图所示界面：\n\n\n\n选择要导出的数据库和表，直接下一步下一步就行。。\n\n如果没有配置过 mysqldump 路径的话，导出会报错的 “Client home is not specified for connection”，提示没有设置连接地址。\n\n这是因为导出 mysql 数据库时，DBeaver 调用了外部 mysqldump 程序，所以需要指定 mysqldump 的路径。\n\n首先找到 mysqldump 的路径：\n\nwhereis mysqldump\n\n\n1\n\n\n\n\n然后在 DBeaver 中操作如下：\n\n\n\n然后出现如下图所示：\n\n\n\n点击浏览，出现下图所示界面：\n\n\n\n点击添加数据库地址，找到刚 mysqldump 的路径，选中即可。\n\n到此 mysqldump 就配置好了，然后继续最开始的 1、2、3 即可导出成功。",normalizedContent:"在 dbeaver 中导出 sql 步骤是这样的：\n\n先选择要导出的数据库，鼠标右键，然后选中 “工具”，然后选择 “转储数据库”\n\n如下：\n\n\n\n然后会出现如下图所示界面：\n\n\n\n选择要导出的数据库和表，直接下一步下一步就行。。\n\n如果没有配置过 mysqldump 路径的话，导出会报错的 “client home is not specified for connection”，提示没有设置连接地址。\n\n这是因为导出 mysql 数据库时，dbeaver 调用了外部 mysqldump 程序，所以需要指定 mysqldump 的路径。\n\n首先找到 mysqldump 的路径：\n\nwhereis mysqldump\n\n\n1\n\n\n\n\n然后在 dbeaver 中操作如下：\n\n\n\n然后出现如下图所示：\n\n\n\n点击浏览，出现下图所示界面：\n\n\n\n点击添加数据库地址，找到刚 mysqldump 的路径，选中即可。\n\n到此 mysqldump 就配置好了，然后继续最开始的 1、2、3 即可导出成功。",charsets:{cjk:!0}},{title:"Column&Row组件的使用",frontmatter:{title:"Column&Row组件的使用",date:"2023-09-27T11:03:08.000Z",permalink:"/pages/add86b/",categories:["HarmonyOS"],tags:[null]},regularPath:"/HarmonyOS/01.%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/04.Column&Row%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8.html",relativePath:"HarmonyOS/01.基础入门/04.Column&Row组件的使用.md",key:"v-2d3557d4",path:"/pages/add86b/",headers:[{level:2,title:"1、主轴方向的对齐（justifyContent）",slug:"_1、主轴方向的对齐-justifycontent",normalizedTitle:"1、主轴方向的对齐（justifycontent）",charIndex:394},{level:2,title:"2、交叉轴方向的对齐（alignItems）",slug:"_2、交叉轴方向的对齐-alignitems",normalizedTitle:"2、交叉轴方向的对齐（alignitems）",charIndex:995},{level:3,title:"1、Column容器交叉轴",slug:"_1、column容器交叉轴",normalizedTitle:"1、column 容器交叉轴",charIndex:1401},{level:3,title:"2、Row容器交叉轴",slug:"_2、row容器交叉轴",normalizedTitle:"2、row 容器交叉轴",charIndex:1514}],lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:"1、主轴方向的对齐（justifyContent） 2、交叉轴方向的对齐（alignItems） 1、Column容器交叉轴 2、Row容器交叉轴",content:"在 ArkTS 中，页面布局使用最多的两种容器组件是 Column 和 Row 容器。\n\n * Column 表示沿垂直方向布局的容器。\n * Row 表示沿水平方向布局的容器。\n\n在布局容器中，存在这两根轴，即主轴和交叉轴，这两个轴是互相垂直的。不同容器中主轴的方向不一样。\n\n * 主轴：在 Column 容器中子组件是按照从上往下的垂直方向布局的，因此其主轴方向是垂直方向；在 Row 容器中的子组件是按照从左到右的水平方向布局的，因此其主轴方向是水平方向。\n   \n * 交叉轴：与主轴垂直相交的轴线，如果主轴是垂直方向，则交叉轴是水平方向，如果主轴是水平方向，则交叉轴是垂直方向。\n   \n\n属性名称             描述\njustifyContent   设置子组件在主轴方向上的对齐格式\nalignItems       设置子组件在交叉轴方向上的对齐格式\n\n\n# 1、主轴方向的对齐（justifyContent）\n\n子组件在主轴方向上的对齐方式使用 justifyContent 属性设置，其参数类型是 FlexAlign 。FlexAlign 定义了这几种类型：\nFlexAlign.Start、FlexAlign.Center、FlexAlign.End、FlexAlign.SpaceBetween、FlexAlign.SpaceAround、FlexAlign.SpaceEvenly。使用方式，如:\n\nRow().justifyContent(FlexAlign.Start)\nColumn().justifyContent(FlexAlign.Center)\n\n\n1\n2\n\n * Start：元素在主轴方向向首端对齐，如：\n   \n * Center：元素在主轴方向中心对齐，如：\n   \n * End：元素在主轴方向尾部对齐\n   \n * SpaceBetween：元素在主轴方向均匀分配，相邻元素之间间距相等，第一个元素与行首对齐，最后一个元素与行尾对齐。\n   \n * SpaceAround：元素在主轴方向均匀分配，相邻呀神农氏之间距离相同，第一个元素到行首的距离和最后一个元素到行尾的距离是相邻元素之间距离的一半。\n   \n * SpaceEvenly：元素在主轴方向间距相等，无论是相邻元素还是边界元素到容器的距离都是一样\n   \n\n\n# 2、交叉轴方向的对齐（alignItems）\n\n子组件在交叉轴方向上的对齐方式使用 alignItems 属性来设置。\n\n * 在 Column 容器中，交叉轴是水平方向，其参数类型为 HorizontalAlign（水平对齐），定义了这几种类型：HorizontalAlign.Start、HorizontalAlign.Center、HorizontalAlign.End。\n\nColumn().alignItems(HorizontalAlign.Start)\n\n\n1\n\n * 在 Row 容器中，交叉轴是垂直方向，其参数类型为 VerticalAlign（垂直对齐），定义了这几种类型：VerticalAlign.Top、VerticalAlign.Center、VerticalAlign.Bottom\n\nRow().alignItems(VerticalAlign.Center)\n\n\n1\n\n\n\n# 1、Column 容器交叉轴\n\n * Start：设置子组件在水平方向上按照起始端对齐。\n\n\n\n * Center（默认值）：设置子组件在水平方向上居中对齐\n\n\n\n * End：设置子组件在水平方向上按照末端对齐\n\n\n\n\n# 2、Row 容器交叉轴\n\n * Top：设置子组件在垂直方向上居顶部对齐\n\n\n\n * Center（默认值）：设置子组件在竖直方向上居中对齐\n\n\n\n * Bottom：设置子组件在竖直方向上居底部对齐\n\n",normalizedContent:"在 arkts 中，页面布局使用最多的两种容器组件是 column 和 row 容器。\n\n * column 表示沿垂直方向布局的容器。\n * row 表示沿水平方向布局的容器。\n\n在布局容器中，存在这两根轴，即主轴和交叉轴，这两个轴是互相垂直的。不同容器中主轴的方向不一样。\n\n * 主轴：在 column 容器中子组件是按照从上往下的垂直方向布局的，因此其主轴方向是垂直方向；在 row 容器中的子组件是按照从左到右的水平方向布局的，因此其主轴方向是水平方向。\n   \n * 交叉轴：与主轴垂直相交的轴线，如果主轴是垂直方向，则交叉轴是水平方向，如果主轴是水平方向，则交叉轴是垂直方向。\n   \n\n属性名称             描述\njustifycontent   设置子组件在主轴方向上的对齐格式\nalignitems       设置子组件在交叉轴方向上的对齐格式\n\n\n# 1、主轴方向的对齐（justifycontent）\n\n子组件在主轴方向上的对齐方式使用 justifycontent 属性设置，其参数类型是 flexalign 。flexalign 定义了这几种类型：\nflexalign.start、flexalign.center、flexalign.end、flexalign.spacebetween、flexalign.spacearound、flexalign.spaceevenly。使用方式，如:\n\nrow().justifycontent(flexalign.start)\ncolumn().justifycontent(flexalign.center)\n\n\n1\n2\n\n * start：元素在主轴方向向首端对齐，如：\n   \n * center：元素在主轴方向中心对齐，如：\n   \n * end：元素在主轴方向尾部对齐\n   \n * spacebetween：元素在主轴方向均匀分配，相邻元素之间间距相等，第一个元素与行首对齐，最后一个元素与行尾对齐。\n   \n * spacearound：元素在主轴方向均匀分配，相邻呀神农氏之间距离相同，第一个元素到行首的距离和最后一个元素到行尾的距离是相邻元素之间距离的一半。\n   \n * spaceevenly：元素在主轴方向间距相等，无论是相邻元素还是边界元素到容器的距离都是一样\n   \n\n\n# 2、交叉轴方向的对齐（alignitems）\n\n子组件在交叉轴方向上的对齐方式使用 alignitems 属性来设置。\n\n * 在 column 容器中，交叉轴是水平方向，其参数类型为 horizontalalign（水平对齐），定义了这几种类型：horizontalalign.start、horizontalalign.center、horizontalalign.end。\n\ncolumn().alignitems(horizontalalign.start)\n\n\n1\n\n * 在 row 容器中，交叉轴是垂直方向，其参数类型为 verticalalign（垂直对齐），定义了这几种类型：verticalalign.top、verticalalign.center、verticalalign.bottom\n\nrow().alignitems(verticalalign.center)\n\n\n1\n\n\n\n# 1、column 容器交叉轴\n\n * start：设置子组件在水平方向上按照起始端对齐。\n\n\n\n * center（默认值）：设置子组件在水平方向上居中对齐\n\n\n\n * end：设置子组件在水平方向上按照末端对齐\n\n\n\n\n# 2、row 容器交叉轴\n\n * top：设置子组件在垂直方向上居顶部对齐\n\n\n\n * center（默认值）：设置子组件在竖直方向上居中对齐\n\n\n\n * bottom：设置子组件在竖直方向上居底部对齐\n\n",charsets:{cjk:!0}},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-6cfe6b55",path:"/tags/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Less基本用法",frontmatter:{title:"Less基本用法",date:"2022-05-11T10:39:17.000Z",permalink:"/pages/dcaaea/",categories:["Less"],tags:[null]},regularPath:"/%E3%80%8ACSS%E3%80%8B%E7%AC%94%E8%AE%B0/01.Less/01.Less%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.html",relativePath:"《CSS》笔记/01.Less/01.Less基本用法.md",key:"v-22521ed5",path:"/pages/dcaaea/",headers:[{level:3,title:"一、混入",slug:"一、混入",normalizedTitle:"一、混入",charIndex:2},{level:4,title:"1、类混入",slug:"_1、类混入",normalizedTitle:"1、类混入",charIndex:72},{level:4,title:"2、函数混入",slug:"_2、函数混入",normalizedTitle:"2、函数混入",charIndex:399},{level:3,title:"二、映射：在函数中定义key和value键值对",slug:"二、映射-在函数中定义key和value键值对",normalizedTitle:"二、映射：在函数中定义 key 和 value 键值对",charIndex:1075},{level:3,title:"三、运算",slug:"三、运算",normalizedTitle:"三、运算",charIndex:1396},{level:3,title:"四、扩展（:extend）",slug:"四、扩展-extend",normalizedTitle:"四、扩展（:extend）",charIndex:1818},{level:3,title:"五、循环",slug:"五、循环",normalizedTitle:"五、循环",charIndex:2337},{level:3,title:"六、extract函数",slug:"六、extract函数",normalizedTitle:"六、extract 函数",charIndex:2705},{level:3,title:"七、range函数",slug:"七、range函数",normalizedTitle:"七、range 函数",charIndex:2802},{level:3,title:"八、each函数",slug:"八、each函数",normalizedTitle:"八、each 函数",charIndex:3e3},{level:3,title:"九、if函数",slug:"九、if函数",normalizedTitle:"九、if 函数",charIndex:3303},{level:3,title:"十、获取图片的宽高",slug:"十、获取图片的宽高",normalizedTitle:"十、获取图片的宽高",charIndex:3620}],lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:"一、混入 1、类混入 2、函数混入 二、映射：在函数中定义key和value键值对 三、运算 四、扩展（:extend） 五、循环 六、extract函数 七、range函数 八、each函数 九、if函数 十、获取图片的宽高",content:"# 一、混入\n\n混入：分为类混入和函数混入。类混入是将若干个类在另一个 {} 中使用 () 调用，使被调用的类的属性代码在新的类中生成。\n\n# 1、类混入\n\n\n.left {\n  text-align: left;\n}\n.txtColor: {\n  color: #eee;\n}\n.box {\n  .left();\n  .txtColor();\n}\n\n// 上面less代码编译成css代码后如下：\n.left {\n  text-align: left;\n}\n.txtColor: {\n  color: #eee;\n}\n.box {\n\ttext-align: left;\n\tcolor: #eee;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n可以看出类混入定义的类会被编译到 css 代码中，造成代码冗余。\n\n# 2、函数混入\n\n\n.函数名(){};\n\n\n1\n\n\n使用时将类定义到函数中，在另一个类中使用时，直接调用函数即可，但是不会在 css 代码中生成类，函数里可以传入参数，定义了参数后就必须传入参数，否则报错，可传默认参数，就是在形参变量后加冒号，冒号后面的值即为默认值。\n\n@left: left;\n@right: right;\n.txtLeft (@pos: left) {\n  text-align: @pos;\n}\n.txtColor () {\n  color: #eee;\n}\n.box {\n  .txtLeft(@right);\n  .txtColor()\n}\n\n// 上面代码编译后生成css代码如下：\n.box {\n  text-align: right;\n  color: #eee;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nps：混入函数定义中 {} 里面可以继续定义类，使用到函数里具体的某个类时，直接通过函数名加类名的方式 (调用时函数名后不能加括号)。如：\n\n.txtStyle() {\n  .color {\n      color: #eee;\n  }\n  .size {\n      font-size: 18px;\n  }\n}\n.box {\n  .txtStyle.size;\n}\n\n// 编译后的css代码如下：\n.box {\n  font-size: 18px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 二、映射：在函数中定义 key 和 value 键值对\n\n使用时，通过 [] 加键拿到具体的 value。如：\n\n.txtStyle () {\n  color: #eee;\n  size: 25px;\n}\n.box {\n  color: .txtStyle[color];\n  font-size: .txtStyle[size]\n}\n\n// 编译后的css代码如下\n.box {\n  color: #eee;\n  font-size: 25px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nps：定义键值对时，value 值不能加引号，调用时方法名不能加括号，[] 中的 key 不能加引号。\n\n\n\n# 三、运算\n\n运算：可进行加减乘除等操作。任何的数字、颜色、变量等都可以参与运算。运算符左右两边须用空格隔开，如果两个变量中只有一个变量有单位或两个变量的单位相同时，则结果的单位就与有单位的那个变量相同。如果两个变量都有单位时，以前面变量为结果的单位。\n\ncalc ()：使用 calc 后，将不再对数学表达式进行计算，但是在嵌套函数中会计算变量和数学公式的值。如:\n\n\n@num: 20px / 2;\n@num2: calc(50px / 2);\n.calcWrapper {\n  width: calc(50% + (@num - 3px));\n  height: @num2;\n}\n\n// 编译后的css代码如下：\n.calcWrapper {\n  width: calc(50% + (10px - 3px));\n  height: calc(50px / 2);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 四、扩展（:extend）\n\n在一个选择其中扩展其他选择器的样式。如：\n\n\nh3 {\n  &:extend(.span);\n  font-size: 18px;\n}\n.span {\n  color: #eee;\n}\n\n// 编译后的css代码如下\nh3 {\n  font-size: 18px;\n}\n.span,\nh3 {\n  color: #eee;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n:extend () 中可包含多个类，如:\n\n\nh3 {\n  &:extend(.span, .opa);\n  background: #666;\n}\n.span {\n  font-size: 18px;\n}\n.opa {\n  opacity: 0.8;\n}\n\n// 编译后的css代码如下：\nh3 {\n  background: #666;\n}\n.span, h3 {\n  font-size: 18px;\n}\n.opa, h3 {\n  opacity: 0.8;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 五、循环\n\n@arr: red, green, blue, orange;\n@len: length(@arr);\n.cont(@count) when (@count <= @len) {\n  .list@{count} {\n    color: extract(@arr, @count)\n  }\n  .cont(@count + 1)\n}\n.cont(0);\n\n// 编译结果如下：\n.list1 {\n  color: red;\n}\n.list2 {\n  color: green;\n}\n.list3 {\n  color: blue;\n}\n.list4 {\n  color: orange;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 六、extract 函数\n\n用法：extract (list, index)\nlist 是一个值列表，值之间可用逗号或空格隔开。\n\nindex 是一个整数，指定要返回的列表元素的位置。\n\n\n# 七、range 函数\n\n/*\n  start：起始值，可选。\n  end：最终值。\n  step：要增加的数量，可选\n*/\n用法：range(start, end, step)\n\nrange(4);                //1 2 3 4\nrange(10px, 40px, 10);   // 10px 20px 30px 40px\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 八、each 函数\n\n/*\neach遍历集合值，value指当前值，index指当前索引。\n*/\n@list: red, green, blue;\neach(@list, {\n  .box@{index} {\n      background: @value;\n  }\n})\n\n// 编译后的css代码如下：\n.box1 {\n  background: red;\n}\n.box2 {\n  background: green;\n}\n.box3 {\n  background: blue;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 九、if 函数\n\n/*\n  有3个参数，\n  第一个参数是一个布尔表达式，\n  第二个参数表示第一个参数为真时返回的值，\n  第三个参数表示第一个参数为假时返回的值\n*/\n@w: 50px;\n@h: 50px;\n@num: 5;\n.box {\n  width: if(@val > 10, @w, calc(@w/2));\n  height: if(@val > 10, @h, calc(@h/2));\n}\n\n// 编译后的css代码如下：\n.box {\n  width: 25px;\n  height: 25px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 十、获取图片的宽高\n\n图片的宽度：image-width (imgUrl)\n\n图片的高度：image-height (imgUrl)",normalizedContent:"# 一、混入\n\n混入：分为类混入和函数混入。类混入是将若干个类在另一个 {} 中使用 () 调用，使被调用的类的属性代码在新的类中生成。\n\n# 1、类混入\n\n\n.left {\n  text-align: left;\n}\n.txtcolor: {\n  color: #eee;\n}\n.box {\n  .left();\n  .txtcolor();\n}\n\n// 上面less代码编译成css代码后如下：\n.left {\n  text-align: left;\n}\n.txtcolor: {\n  color: #eee;\n}\n.box {\n\ttext-align: left;\n\tcolor: #eee;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n可以看出类混入定义的类会被编译到 css 代码中，造成代码冗余。\n\n# 2、函数混入\n\n\n.函数名(){};\n\n\n1\n\n\n使用时将类定义到函数中，在另一个类中使用时，直接调用函数即可，但是不会在 css 代码中生成类，函数里可以传入参数，定义了参数后就必须传入参数，否则报错，可传默认参数，就是在形参变量后加冒号，冒号后面的值即为默认值。\n\n@left: left;\n@right: right;\n.txtleft (@pos: left) {\n  text-align: @pos;\n}\n.txtcolor () {\n  color: #eee;\n}\n.box {\n  .txtleft(@right);\n  .txtcolor()\n}\n\n// 上面代码编译后生成css代码如下：\n.box {\n  text-align: right;\n  color: #eee;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nps：混入函数定义中 {} 里面可以继续定义类，使用到函数里具体的某个类时，直接通过函数名加类名的方式 (调用时函数名后不能加括号)。如：\n\n.txtstyle() {\n  .color {\n      color: #eee;\n  }\n  .size {\n      font-size: 18px;\n  }\n}\n.box {\n  .txtstyle.size;\n}\n\n// 编译后的css代码如下：\n.box {\n  font-size: 18px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 二、映射：在函数中定义 key 和 value 键值对\n\n使用时，通过 [] 加键拿到具体的 value。如：\n\n.txtstyle () {\n  color: #eee;\n  size: 25px;\n}\n.box {\n  color: .txtstyle[color];\n  font-size: .txtstyle[size]\n}\n\n// 编译后的css代码如下\n.box {\n  color: #eee;\n  font-size: 25px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nps：定义键值对时，value 值不能加引号，调用时方法名不能加括号，[] 中的 key 不能加引号。\n\n\n\n# 三、运算\n\n运算：可进行加减乘除等操作。任何的数字、颜色、变量等都可以参与运算。运算符左右两边须用空格隔开，如果两个变量中只有一个变量有单位或两个变量的单位相同时，则结果的单位就与有单位的那个变量相同。如果两个变量都有单位时，以前面变量为结果的单位。\n\ncalc ()：使用 calc 后，将不再对数学表达式进行计算，但是在嵌套函数中会计算变量和数学公式的值。如:\n\n\n@num: 20px / 2;\n@num2: calc(50px / 2);\n.calcwrapper {\n  width: calc(50% + (@num - 3px));\n  height: @num2;\n}\n\n// 编译后的css代码如下：\n.calcwrapper {\n  width: calc(50% + (10px - 3px));\n  height: calc(50px / 2);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 四、扩展（:extend）\n\n在一个选择其中扩展其他选择器的样式。如：\n\n\nh3 {\n  &:extend(.span);\n  font-size: 18px;\n}\n.span {\n  color: #eee;\n}\n\n// 编译后的css代码如下\nh3 {\n  font-size: 18px;\n}\n.span,\nh3 {\n  color: #eee;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n:extend () 中可包含多个类，如:\n\n\nh3 {\n  &:extend(.span, .opa);\n  background: #666;\n}\n.span {\n  font-size: 18px;\n}\n.opa {\n  opacity: 0.8;\n}\n\n// 编译后的css代码如下：\nh3 {\n  background: #666;\n}\n.span, h3 {\n  font-size: 18px;\n}\n.opa, h3 {\n  opacity: 0.8;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 五、循环\n\n@arr: red, green, blue, orange;\n@len: length(@arr);\n.cont(@count) when (@count <= @len) {\n  .list@{count} {\n    color: extract(@arr, @count)\n  }\n  .cont(@count + 1)\n}\n.cont(0);\n\n// 编译结果如下：\n.list1 {\n  color: red;\n}\n.list2 {\n  color: green;\n}\n.list3 {\n  color: blue;\n}\n.list4 {\n  color: orange;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 六、extract 函数\n\n用法：extract (list, index)\nlist 是一个值列表，值之间可用逗号或空格隔开。\n\nindex 是一个整数，指定要返回的列表元素的位置。\n\n\n# 七、range 函数\n\n/*\n  start：起始值，可选。\n  end：最终值。\n  step：要增加的数量，可选\n*/\n用法：range(start, end, step)\n\nrange(4);                //1 2 3 4\nrange(10px, 40px, 10);   // 10px 20px 30px 40px\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 八、each 函数\n\n/*\neach遍历集合值，value指当前值，index指当前索引。\n*/\n@list: red, green, blue;\neach(@list, {\n  .box@{index} {\n      background: @value;\n  }\n})\n\n// 编译后的css代码如下：\n.box1 {\n  background: red;\n}\n.box2 {\n  background: green;\n}\n.box3 {\n  background: blue;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 九、if 函数\n\n/*\n  有3个参数，\n  第一个参数是一个布尔表达式，\n  第二个参数表示第一个参数为真时返回的值，\n  第三个参数表示第一个参数为假时返回的值\n*/\n@w: 50px;\n@h: 50px;\n@num: 5;\n.box {\n  width: if(@val > 10, @w, calc(@w/2));\n  height: if(@val > 10, @h, calc(@h/2));\n}\n\n// 编译后的css代码如下：\n.box {\n  width: 25px;\n  height: 25px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 十、获取图片的宽高\n\n图片的宽度：image-width (imgurl)\n\n图片的高度：image-height (imgurl)",charsets:{cjk:!0}},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-323c9456",path:"/archives/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"switch效果实现",frontmatter:{title:"switch效果实现",date:"2022-05-19T17:04:55.000Z",permalink:"/pages/7a2ad5/",categories:["CSS"],tags:[null]},regularPath:"/%E3%80%8ACSS%E3%80%8B%E7%AC%94%E8%AE%B0/02.CSS/02.switch%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0.html",relativePath:"《CSS》笔记/02.CSS/02.switch效果实现.md",key:"v-cd1bf684",path:"/pages/7a2ad5/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'html 代码：\n\n<input type="checkbox" id="toggle" class="offscreen" />\n<label for="toggle" class="switch"></label>\n\n\n1\n2\n\n\ncss 代码：\n\n.switch {\n  position: relative;\n  display: inline-block;\n  width: 40px;\n  height: 20px;\n  background-color: rgba(0, 0, 0, 0.25);\n  border-radius: 20px;\n  transition: all 0.3s;\n}\n\n.switch:after {\n  content: \'\';\n  position: absolute;\n  width: 18px;\n  height: 18px;\n  border-radius: 18px;\n  background-color: white;\n  top: 1px;\n  left: 1px;\n  transition: all 0.3s;\n}\n\ninput[type=\'checkbox\']:checked + .switch:after {\n  transform: translateX(20px);\n}\n\ninput[type=\'checkbox\']:checked + .switch {\n  background-color: #7983ff;\n}\n\n.offscreen {\n  position: absolute;\n  left: -9999px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n实现效果如下：\n\n未选中：\n\n\n\n选中：\n\n',normalizedContent:'html 代码：\n\n<input type="checkbox" id="toggle" class="offscreen" />\n<label for="toggle" class="switch"></label>\n\n\n1\n2\n\n\ncss 代码：\n\n.switch {\n  position: relative;\n  display: inline-block;\n  width: 40px;\n  height: 20px;\n  background-color: rgba(0, 0, 0, 0.25);\n  border-radius: 20px;\n  transition: all 0.3s;\n}\n\n.switch:after {\n  content: \'\';\n  position: absolute;\n  width: 18px;\n  height: 18px;\n  border-radius: 18px;\n  background-color: white;\n  top: 1px;\n  left: 1px;\n  transition: all 0.3s;\n}\n\ninput[type=\'checkbox\']:checked + .switch:after {\n  transform: translatex(20px);\n}\n\ninput[type=\'checkbox\']:checked + .switch {\n  background-color: #7983ff;\n}\n\n.offscreen {\n  position: absolute;\n  left: -9999px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n实现效果如下：\n\n未选中：\n\n\n\n选中：\n\n',charsets:{cjk:!0}},{title:"vscode之代码跳转到定义(vue文件和js文件)",frontmatter:{title:"vscode之代码跳转到定义(vue文件和js文件)",date:"2023-12-19T11:44:39.000Z",permalink:"/pages/245711/",categories:["随笔"],tags:[null]},regularPath:"/02.%E9%9A%8F%E7%AC%94/00.%E9%9A%8F%E6%80%A7%E4%B9%8B%E7%AC%94/06.vscode%E4%B9%8B%E4%BB%A3%E7%A0%81%E8%B7%B3%E8%BD%AC%E5%88%B0%E5%AE%9A%E4%B9%89(vue%E6%96%87%E4%BB%B6%E5%92%8Cjs%E6%96%87%E4%BB%B6).html",relativePath:"02.随笔/00.随性之笔/06.vscode之代码跳转到定义(vue文件和js文件).md",key:"v-5afc0b22",path:"/pages/245711/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'在项目中经常遇到这种需求，点击某一个方法、api 或者某一个变量或组件，需要快速跳转到其定义的地方，然而在 vscode 中本身并不自带这种功能，需要自行配置。相比而言，webstorm 就强大得多。\n\n以前一直都很头大，也不知道 vscode 其实通过配置也能实现，最近无意间发现原来是可以的。配置好后，开发起来也能得心应手了。特此记录下：\n\n\n1、安装插件 Vue Peek，该插件扩展了 vue 代码编辑，支持转到定义，支持扩展名为.vue 的单文件组件和文件名，允许快速跳转到从模块或模块导入引用的文件。\n\n2、在项目根目录下创建 jsconfig.json 或者 tsconfig.json（取决于你是否使用 ts 开发的），配置如下：\n\n{\n  "compilerOptions": {\n      "allowJs": true,\n      "baseUrl": ".",\n      "paths": {\n          "@/*": [\n              "src/*"\n          ]\n      }\n  },\n  "include": ["src/**/*"],\n  "exclude": ["node_modules"]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * baseUrl：设置项目的基础路径，即项目根目录。\n * paths：设置模块名到文件夹的映射。这里我们使用了 @/* 作为模块名的前缀，并将其映射到 src/* 文件夹。你可以根据你的项目具体配置来设置别名。\n\n至此，就可以愉快的玩耍了，在需要进行代码跳转地方，按下 control 或 option 键的同时，点击需要跳转的地方，即可进行代码跳转了，有的是可以直接跳转到新窗口，有的则是以弹窗的形式来展现，想跳转到新窗口则需要二次点击。',normalizedContent:'在项目中经常遇到这种需求，点击某一个方法、api 或者某一个变量或组件，需要快速跳转到其定义的地方，然而在 vscode 中本身并不自带这种功能，需要自行配置。相比而言，webstorm 就强大得多。\n\n以前一直都很头大，也不知道 vscode 其实通过配置也能实现，最近无意间发现原来是可以的。配置好后，开发起来也能得心应手了。特此记录下：\n\n\n1、安装插件 vue peek，该插件扩展了 vue 代码编辑，支持转到定义，支持扩展名为.vue 的单文件组件和文件名，允许快速跳转到从模块或模块导入引用的文件。\n\n2、在项目根目录下创建 jsconfig.json 或者 tsconfig.json（取决于你是否使用 ts 开发的），配置如下：\n\n{\n  "compileroptions": {\n      "allowjs": true,\n      "baseurl": ".",\n      "paths": {\n          "@/*": [\n              "src/*"\n          ]\n      }\n  },\n  "include": ["src/**/*"],\n  "exclude": ["node_modules"]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * baseurl：设置项目的基础路径，即项目根目录。\n * paths：设置模块名到文件夹的映射。这里我们使用了 @/* 作为模块名的前缀，并将其映射到 src/* 文件夹。你可以根据你的项目具体配置来设置别名。\n\n至此，就可以愉快的玩耍了，在需要进行代码跳转地方，按下 control 或 option 键的同时，点击需要跳转的地方，即可进行代码跳转了，有的是可以直接跳转到新窗口，有的则是以弹窗的形式来展现，想跳转到新窗口则需要二次点击。',charsets:{cjk:!0}},{title:"使用Express搭建服务器",frontmatter:{title:"使用Express搭建服务器",date:"2022-04-13T16:02:01.000Z",permalink:"/pages/2dd5ad/",categories:["《NodeJs》","Express"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/01.Express/01.%E4%BD%BF%E7%94%A8Express%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8.html",relativePath:"《NodeJs》笔记/01.Express/01.使用Express搭建服务器.md",key:"v-b8bdf9b0",path:"/pages/2dd5ad/",headers:[{level:3,title:"牛刀小试",slug:"牛刀小试",normalizedTitle:"牛刀小试",charIndex:2},{level:3,title:"修改代码后自动重启项目",slug:"修改代码后自动重启项目",normalizedTitle:"修改代码后自动重启项目",charIndex:712},{level:3,title:"用模板引擎渲染页面：",slug:"用模板引擎渲染页面",normalizedTitle:"用模板引擎渲染页面：",charIndex:1073},{level:3,title:"添加静态文件服务",slug:"添加静态文件服务",normalizedTitle:"添加静态文件服务",charIndex:1544},{level:3,title:"添加404页面：",slug:"添加404页面",normalizedTitle:"添加 404 页面：",charIndex:2185},{level:3,title:"服务器错误处理：",slug:"服务器错误处理",normalizedTitle:"服务器错误处理：",charIndex:2488},{level:3,title:"实现JSON API:",slug:"实现json-api",normalizedTitle:"实现 json api:",charIndex:3719},{level:3,title:"路由与api拆分：",slug:"路由与api拆分",normalizedTitle:"路由与 api 拆分：",charIndex:4014}],lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:"牛刀小试 修改代码后自动重启项目 用模板引擎渲染页面： 添加静态文件服务 添加404页面： 服务器错误处理： 实现JSON API: 路由与api拆分：",content:"# 牛刀小试\n\n假定已安装 Node.js。在应用中创建一个目录，进入此目录作为当前工作目录。\n\nmkdir express-demo\ncd express-demo\n\n\n1\n2\n\n\n通过 npm init 命令为应用创建一个 package.json 文件。\n\nnpm init\n\n\n1\n\n\n此命令会要求输入几个参数，如应用名、版本号、作者、入口文件等等。输入应用的入口文件，这里我的入口文件是 index.js。如果希望采用默认的 index.js 文件名，直接回车就行。\n\n接下来在 express-demo 目录下安装 Express 并将其保存到依赖列表中，如：\n\nnpm install express -S    // 或npm install express --save\n\n\n1\n\n\n下面写一个简单的 demo 来看下效果，创建 index.js 文件，代码如下：\n\nconst exprerss = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n    res.send('Hello World!')\n})\n\napp.listen(port, () => {\n    console.log('当前运行应用的端口号为' + port)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n然后在终端运行 node index.js 即可看到效果，在浏览器中输入 localhost:3000，就会看到页面会输出 “Hello World!” 这句话。\n\n\n# 修改代码后自动重启项目\n\n现在我们在 index.js 文件中改点东西，发现并没有生效，需要再次运行 node index.js，结果可能会报错，说端口已被占用了，我们总不能每次关闭终端重新打开或者更改端口号吧，，这时候有个好东西就派上用场了，他就是 nodemon，一款很受欢迎的开发服务器，能够检测到工作区代码的变化，并自动重启。\n\nnpm install nodemon -D   // 或npm install nodemon --save-dev\n\n\n1\n\n\n这里我们将 nodemon 安装为开发依赖 devDependencies，因为仅仅只有在开发时才需要用到。同时我们在 package.json 中加入 start 命令，代码如下：\n\n\n\n现在我们更改完代码后，只需要保存后应用就会自动重启。\n\n\n# 用模板引擎渲染页面：\n\nExpress 对当今主流的模板引擎（Pug，Handlebars，EJS 等）提供了很好地支持，这里选择 hbs（Handlebars）作为模板引擎。\n\n首先安装 npm 包：\n\nnpm install hbs\n\n\n1\n\n\n创建 views 文件夹，用于放置所有的模板。创建首页模板 index.hbs。代码如下：\n\n<h1>个人简历</h1>\n<p>我是一名前端攻城狮，正在学习Express中。。。。</p>\n<a href=\"/contact\">联系方式</a>\n\n\n1\n2\n3\n\n\n然后创建联系页面模板 contact.hbs，代码如下：\n\n<h1>联系方式</h1>\n<p>QQ：123456789</p>\n<p>微信：123456789</p>\n<p>邮箱：123456@qq.com</p>\n\n\n1\n2\n3\n4\n\n\n然后在 index.js 中配置和使用模板。\n\napp.set('views', 'views');\napp.set('view engine', 'hbs');\n\n\n1\n2\n\n\n\n# 添加静态文件服务\n\n现在想给 index.hbs 和 contact.hbs 文件添加样式和图片怎么办呢？\n\n这时候就需要添加静态文件服务，在 Express 中已经自带了静态文件服务中间件 express.static。在 index.js 中添加如下代码：\n\napp.use(express.static('public'));\n\n\n1\n\n\n在项目目录下建立 public 文件夹，public 文件夹下建立 imgs 文件夹和 css 文件夹，分别用来存放图片和 css 样式。\n\npublic/css/style.css 文件代码如下：\n\nbody {\n  text-align: center;\n}\n\nh1 {\n  color: blue;\n}\n\nimg {\n  border: 1px dashed grey;\n}\n\na {\n  color: blueviolet;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n然后在 index.hbs 中修改代码如下：\n\n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n<h1>个人简历</h1>\n<img class=\"img\" src=\"/imgs/女帝.jpeg\" alt=\"\">\n<p>我正在学习Express</p>\n<a href=\"/contact\">联系方式</a>\n\n\n1\n2\n3\n4\n5\n6\n\n\n现在就能看到效果了。\n\n\n# 添加 404 页面：\n\n404.hbs。代码如下：\n\n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n<h1>找不到你要的页面了！</h1>\n<p>你所访问的路径{{ url }}不存在</p>\n\n\n1\n2\n3\n4\n\n\n在 index.js 中添加如下代码：\n\napp.use('*', (req, res) => {\n    res.status(404).render('404', {url: req.originalUrl})\n})\n\n\n1\n2\n3\n\n * 表示匹配任何路径。将此中间件放在所有路由后面，即可捕获所有访问路径均匹配失败的请求。\n\n\n# 服务器错误处理：\n\nExpress 自带了错误处理机制，可通过自定义错误处理函数来解决，在 index.js 文件所有路由后面添加如下代码\n\napp.use((err, req, res, next) => {\n    res.status(500).render('500')\n})\n\n\n1\n2\n3\n\n\n添加 500.hbs 页面，代码如下：\n\n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n<h1>糟糕，服务器好像开小差了</h1>\n<p>过一会儿再来试试吧！</p>\n\n\n1\n2\n3\n4\n\n\n现在 index.js 文件完整代码如下：\n\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\n// 指定模板的存放目录\napp.set('views', 'views')\n\n// 指定模板引擎为Handlebars\napp.set('view engine', 'hbs')\n\n// 全局中间件，设置请求头部，跨域处理\napp.use((request, response, next) => {\n    response.header('Access-Control-Allow-Origin', '*')\n    next()\n})\n\napp.use(express.static('public'))\n\napp.get('/', (req, res) => {\n    res.render('index');\n})\n\n// 访问该路径，会抛异常，然后走服务器错误逻辑，跳转到500页面\napp.get('/list', (req, res) => {\n    throw new Error('hello')\n})\n\napp.get('/contact', (req, res) => {\n    res.render('contact')\n})\n\n\napp.use('*', (req, res) => {\n    res.status(404).render('404', {url: req.originalUrl})\n})\n\napp.use((err, req, res, next) => {\n    res.status(500).render('500')\n})\n\napp.listen(port, () => {\n    console.log(`Example app listening on port ${port}`)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n# 实现 JSON API:\n\n在 index.js 中添加如下代码：\n\napp.use('/getList', (req, res) => {\n    res.send({\n        name: '张三',\n        age: 34\n    })\n    // 或者\n    // res.json({=\n    //    name: '张三',\n    //     age: 34\n   // })\n    \n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n现在访问 localhost:3000/getList 时，会返回该 json 数据。\n\n\n# 路由与 api 拆分：\n\n首先创建 routers 目录，用于存放所有的子路由，创建 routes/index.js 文件，代码如下：\n\nconst express = require('express');\nconst router = express.Router();\n\nrouter.get('/', (req, res) => {\n    res.render('index');\n})\n\nrouter.get('/contact', (req, res) => {\n    res.render('contact')\n})\n\nmodule.exports = router;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n创建 routes/api.js 文件，代码如下：\n\nconst express = require('express');\nconst router = express.Router();\n\nrouter.get('/list', (req, res) => {\n    res.json({\n        name: 'Express',\n        desc: 'Express太神奇了'\n    })\n})\n\nrouter.get('/getList', (req, res) => {\n    res.json({\n        title: '随便',\n        id: 14,\n        desc: 'Express太牛叉了'\n    })\n})\n\nmodule.exports = router;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n然后修改 inder.js 文件代码如下：\n\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\nconst indexRouter = require('./routes/index')\nconst apiRouter = require('./routes/api')\n\n// 指定模板的存放目录\napp.set('views', 'views')\n\n// 指定模板引擎为Handlebars\napp.set('view engine', 'hbs')\n\n// 全局中间件\napp.use((request, response, next) => {\n    response.header('Access-Control-Allow-Origin', '*')\n    next()\n})\n\napp.use(express.static('public'))\n\napp.use('/', indexRouter)\napp.use('/api', apiRouter)\n\napp.use('*', (req, res) => {\n    res.status(404).render('404', {url: req.originalUrl})\n})\n\napp.use((err, req, res, next) => {\n    res.status(500).render('500')\n})\n\napp.listen(port, () => {\n    console.log(`Example app listening on port ${port}`)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n现在访问 localhost:3000 和 localhost:3000/contact 就能看到俩页面的效果了。访问 localhost:3000/api/list 和 localhost:3000/api/getList 就能分别获取到 api 返回的 json 数据了。",normalizedContent:"# 牛刀小试\n\n假定已安装 node.js。在应用中创建一个目录，进入此目录作为当前工作目录。\n\nmkdir express-demo\ncd express-demo\n\n\n1\n2\n\n\n通过 npm init 命令为应用创建一个 package.json 文件。\n\nnpm init\n\n\n1\n\n\n此命令会要求输入几个参数，如应用名、版本号、作者、入口文件等等。输入应用的入口文件，这里我的入口文件是 index.js。如果希望采用默认的 index.js 文件名，直接回车就行。\n\n接下来在 express-demo 目录下安装 express 并将其保存到依赖列表中，如：\n\nnpm install express -s    // 或npm install express --save\n\n\n1\n\n\n下面写一个简单的 demo 来看下效果，创建 index.js 文件，代码如下：\n\nconst exprerss = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n    res.send('hello world!')\n})\n\napp.listen(port, () => {\n    console.log('当前运行应用的端口号为' + port)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n然后在终端运行 node index.js 即可看到效果，在浏览器中输入 localhost:3000，就会看到页面会输出 “hello world!” 这句话。\n\n\n# 修改代码后自动重启项目\n\n现在我们在 index.js 文件中改点东西，发现并没有生效，需要再次运行 node index.js，结果可能会报错，说端口已被占用了，我们总不能每次关闭终端重新打开或者更改端口号吧，，这时候有个好东西就派上用场了，他就是 nodemon，一款很受欢迎的开发服务器，能够检测到工作区代码的变化，并自动重启。\n\nnpm install nodemon -d   // 或npm install nodemon --save-dev\n\n\n1\n\n\n这里我们将 nodemon 安装为开发依赖 devdependencies，因为仅仅只有在开发时才需要用到。同时我们在 package.json 中加入 start 命令，代码如下：\n\n\n\n现在我们更改完代码后，只需要保存后应用就会自动重启。\n\n\n# 用模板引擎渲染页面：\n\nexpress 对当今主流的模板引擎（pug，handlebars，ejs 等）提供了很好地支持，这里选择 hbs（handlebars）作为模板引擎。\n\n首先安装 npm 包：\n\nnpm install hbs\n\n\n1\n\n\n创建 views 文件夹，用于放置所有的模板。创建首页模板 index.hbs。代码如下：\n\n<h1>个人简历</h1>\n<p>我是一名前端攻城狮，正在学习express中。。。。</p>\n<a href=\"/contact\">联系方式</a>\n\n\n1\n2\n3\n\n\n然后创建联系页面模板 contact.hbs，代码如下：\n\n<h1>联系方式</h1>\n<p>qq：123456789</p>\n<p>微信：123456789</p>\n<p>邮箱：123456@qq.com</p>\n\n\n1\n2\n3\n4\n\n\n然后在 index.js 中配置和使用模板。\n\napp.set('views', 'views');\napp.set('view engine', 'hbs');\n\n\n1\n2\n\n\n\n# 添加静态文件服务\n\n现在想给 index.hbs 和 contact.hbs 文件添加样式和图片怎么办呢？\n\n这时候就需要添加静态文件服务，在 express 中已经自带了静态文件服务中间件 express.static。在 index.js 中添加如下代码：\n\napp.use(express.static('public'));\n\n\n1\n\n\n在项目目录下建立 public 文件夹，public 文件夹下建立 imgs 文件夹和 css 文件夹，分别用来存放图片和 css 样式。\n\npublic/css/style.css 文件代码如下：\n\nbody {\n  text-align: center;\n}\n\nh1 {\n  color: blue;\n}\n\nimg {\n  border: 1px dashed grey;\n}\n\na {\n  color: blueviolet;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n然后在 index.hbs 中修改代码如下：\n\n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n<h1>个人简历</h1>\n<img class=\"img\" src=\"/imgs/女帝.jpeg\" alt=\"\">\n<p>我正在学习express</p>\n<a href=\"/contact\">联系方式</a>\n\n\n1\n2\n3\n4\n5\n6\n\n\n现在就能看到效果了。\n\n\n# 添加 404 页面：\n\n404.hbs。代码如下：\n\n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n<h1>找不到你要的页面了！</h1>\n<p>你所访问的路径{{ url }}不存在</p>\n\n\n1\n2\n3\n4\n\n\n在 index.js 中添加如下代码：\n\napp.use('*', (req, res) => {\n    res.status(404).render('404', {url: req.originalurl})\n})\n\n\n1\n2\n3\n\n * 表示匹配任何路径。将此中间件放在所有路由后面，即可捕获所有访问路径均匹配失败的请求。\n\n\n# 服务器错误处理：\n\nexpress 自带了错误处理机制，可通过自定义错误处理函数来解决，在 index.js 文件所有路由后面添加如下代码\n\napp.use((err, req, res, next) => {\n    res.status(500).render('500')\n})\n\n\n1\n2\n3\n\n\n添加 500.hbs 页面，代码如下：\n\n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n<h1>糟糕，服务器好像开小差了</h1>\n<p>过一会儿再来试试吧！</p>\n\n\n1\n2\n3\n4\n\n\n现在 index.js 文件完整代码如下：\n\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\n// 指定模板的存放目录\napp.set('views', 'views')\n\n// 指定模板引擎为handlebars\napp.set('view engine', 'hbs')\n\n// 全局中间件，设置请求头部，跨域处理\napp.use((request, response, next) => {\n    response.header('access-control-allow-origin', '*')\n    next()\n})\n\napp.use(express.static('public'))\n\napp.get('/', (req, res) => {\n    res.render('index');\n})\n\n// 访问该路径，会抛异常，然后走服务器错误逻辑，跳转到500页面\napp.get('/list', (req, res) => {\n    throw new error('hello')\n})\n\napp.get('/contact', (req, res) => {\n    res.render('contact')\n})\n\n\napp.use('*', (req, res) => {\n    res.status(404).render('404', {url: req.originalurl})\n})\n\napp.use((err, req, res, next) => {\n    res.status(500).render('500')\n})\n\napp.listen(port, () => {\n    console.log(`example app listening on port ${port}`)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n# 实现 json api:\n\n在 index.js 中添加如下代码：\n\napp.use('/getlist', (req, res) => {\n    res.send({\n        name: '张三',\n        age: 34\n    })\n    // 或者\n    // res.json({=\n    //    name: '张三',\n    //     age: 34\n   // })\n    \n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n现在访问 localhost:3000/getlist 时，会返回该 json 数据。\n\n\n# 路由与 api 拆分：\n\n首先创建 routers 目录，用于存放所有的子路由，创建 routes/index.js 文件，代码如下：\n\nconst express = require('express');\nconst router = express.router();\n\nrouter.get('/', (req, res) => {\n    res.render('index');\n})\n\nrouter.get('/contact', (req, res) => {\n    res.render('contact')\n})\n\nmodule.exports = router;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n创建 routes/api.js 文件，代码如下：\n\nconst express = require('express');\nconst router = express.router();\n\nrouter.get('/list', (req, res) => {\n    res.json({\n        name: 'express',\n        desc: 'express太神奇了'\n    })\n})\n\nrouter.get('/getlist', (req, res) => {\n    res.json({\n        title: '随便',\n        id: 14,\n        desc: 'express太牛叉了'\n    })\n})\n\nmodule.exports = router;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n然后修改 inder.js 文件代码如下：\n\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\nconst indexrouter = require('./routes/index')\nconst apirouter = require('./routes/api')\n\n// 指定模板的存放目录\napp.set('views', 'views')\n\n// 指定模板引擎为handlebars\napp.set('view engine', 'hbs')\n\n// 全局中间件\napp.use((request, response, next) => {\n    response.header('access-control-allow-origin', '*')\n    next()\n})\n\napp.use(express.static('public'))\n\napp.use('/', indexrouter)\napp.use('/api', apirouter)\n\napp.use('*', (req, res) => {\n    res.status(404).render('404', {url: req.originalurl})\n})\n\napp.use((err, req, res, next) => {\n    res.status(500).render('500')\n})\n\napp.listen(port, () => {\n    console.log(`example app listening on port ${port}`)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n现在访问 localhost:3000 和 localhost:3000/contact 就能看到俩页面的效果了。访问 localhost:3000/api/list 和 localhost:3000/api/getlist 就能分别获取到 api 返回的 json 数据了。",charsets:{cjk:!0}},{title:"甜甜圈加载效果",frontmatter:{title:"甜甜圈加载效果",date:"2022-05-19T17:13:02.000Z",permalink:"/pages/20cc42/",categories:["CSS"],tags:[null]},regularPath:"/%E3%80%8ACSS%E3%80%8B%E7%AC%94%E8%AE%B0/02.CSS/03.%E7%94%9C%E7%94%9C%E5%9C%88%E5%8A%A0%E8%BD%BD%E6%95%88%E6%9E%9C.html",relativePath:"《CSS》笔记/02.CSS/03.甜甜圈加载效果.md",key:"v-70dd7e02",path:"/pages/20cc42/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'html 代码：\n\n<div class="donut"></div>\n\n\n1\n\n\ncss 代码：\n\n@keyframes donut-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.donut {\n  display: inline-block;\n  border: 4px solid rgba(0, 0, 0, 0.1);\n  border-left-color: #7983ff;\n  border-radius: 50%;\n  width: 30px;\n  height: 30px;\n  animation: donut-spin 1.2s linear infinite;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n实现效果如下：\n\n',normalizedContent:'html 代码：\n\n<div class="donut"></div>\n\n\n1\n\n\ncss 代码：\n\n@keyframes donut-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.donut {\n  display: inline-block;\n  border: 4px solid rgba(0, 0, 0, 0.1);\n  border-left-color: #7983ff;\n  border-radius: 50%;\n  width: 30px;\n  height: 30px;\n  animation: donut-spin 1.2s linear infinite;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n实现效果如下：\n\n',charsets:{cjk:!0}},{title:"Express之get请求与post请求",frontmatter:{title:"Express之get请求与post请求",date:"2022-04-15T10:44:03.000Z",permalink:"/pages/a2dc8a/",categories:["《NodeJs》","Express"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/01.Express/03.Express%E4%B9%8Bget%E8%AF%B7%E6%B1%82%E4%B8%8Epost%E8%AF%B7%E6%B1%82.html",relativePath:"《NodeJs》笔记/01.Express/03.Express之get请求与post请求.md",key:"v-f68dfbdc",path:"/pages/a2dc8a/",headers:[{level:3,title:"1、get请求",slug:"_1、get请求",normalizedTitle:"1、get 请求",charIndex:2},{level:3,title:"2、post请求",slug:"_2、post请求",normalizedTitle:"2、post 请求",charIndex:357}],lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:"1、get请求 2、post请求",content:"# 1、get 请求\n\n发送 get 请求，获取参数\n\napp.get(url, (req, res) => {\n\t// 获取参数\n\tconsole.log(req.query)  // 如{name: '张三', age: 45}\n})\n\n\n1\n2\n3\n4\n\n\n例子：\n\nconst express = require('express')\nconst app = express()\napp.get('/login', (req, res) => {\n\tlet {name, age} = req.query\n\tif (name === '张三' && age === 45) {\n\t\t// 登录成功\n\t} else {\n\t\t// 登录失败\n\t}\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 2、post 请求\n\n发送 post 请求，express 本身不能解析 post 请求提，需要安装中间件 body-parser\n\n安装 body-parser\n\nnpm install body-parser -S\n\n\n1\n\n\n引入 body-parser\n\nconst bodyParser = require('body-parser')\n\n\n1\n\n\n使用：\n\nconst bodyParser = require('body-parser')\napp.use(bodyParser.json()); // 解析json数据格式\n\n/*\n解析post请求数据，extended: false：表示使用系统模块querystring来处理，也是官方推荐的\nextended: true：表示使用第三方模块qs来处理\n */\napp.use(bodyParser.urlencoded({extended: true}));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n发送 post 请求，获取参数\n\napp.post(url, (req, res) => {\n\tconsole.log(req.body)         // 如{name: '张三', age: 34}\n})\n\n\n1\n2\n3\n\n\nps：post 请求不能直接在浏览器地址栏中访问。",normalizedContent:"# 1、get 请求\n\n发送 get 请求，获取参数\n\napp.get(url, (req, res) => {\n\t// 获取参数\n\tconsole.log(req.query)  // 如{name: '张三', age: 45}\n})\n\n\n1\n2\n3\n4\n\n\n例子：\n\nconst express = require('express')\nconst app = express()\napp.get('/login', (req, res) => {\n\tlet {name, age} = req.query\n\tif (name === '张三' && age === 45) {\n\t\t// 登录成功\n\t} else {\n\t\t// 登录失败\n\t}\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 2、post 请求\n\n发送 post 请求，express 本身不能解析 post 请求提，需要安装中间件 body-parser\n\n安装 body-parser\n\nnpm install body-parser -s\n\n\n1\n\n\n引入 body-parser\n\nconst bodyparser = require('body-parser')\n\n\n1\n\n\n使用：\n\nconst bodyparser = require('body-parser')\napp.use(bodyparser.json()); // 解析json数据格式\n\n/*\n解析post请求数据，extended: false：表示使用系统模块querystring来处理，也是官方推荐的\nextended: true：表示使用第三方模块qs来处理\n */\napp.use(bodyparser.urlencoded({extended: true}));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n发送 post 请求，获取参数\n\napp.post(url, (req, res) => {\n\tconsole.log(req.body)         // 如{name: '张三', age: 34}\n})\n\n\n1\n2\n3\n\n\nps：post 请求不能直接在浏览器地址栏中访问。",charsets:{cjk:!0}},{title:"瀑布流布局",frontmatter:{title:"瀑布流布局",date:"2022-06-08T16:24:35.000Z",permalink:"/pages/50dc5b/",categories:["瀑布流布局"],tags:[null]},regularPath:"/%E3%80%8ACSS%E3%80%8B%E7%AC%94%E8%AE%B0/03.%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/01.%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80.html",relativePath:"《CSS》笔记/03.瀑布流布局/01.瀑布流布局.md",key:"v-f57d762a",path:"/pages/50dc5b/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'概念说明\n\n瀑布流，又称瀑布流式布局。是比较流行的一种网站页面布局，视觉表现为参差不齐的多栏布局，随着页面滚动条向下滚动，这种布局还会不断加载数据块并附加至当前尾部\n\n瀑布流布局有优点也有缺点：\n\n优点：节省空间，一定程度上能够缓解用户视觉疲劳，跟传统布局相比使人眼前一亮。\n\n缺点：对于有些需要在列表页与详情页之间进行切换或页面需要放页脚时，这些情况下瀑布流布局都不适用。\n\n实现：使用 absolute 绝对定位\n\nhtml 部分代码：\n\n<ul class="list">\n\t<li class="item">\n\t\t<img src="./imgs/emperor.jpeg" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n\t<li class="item">\n\t\t<img src="./imgs/west-lake.jpeg" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n\t<li class="item">\n\t\t<img src="./imgs/scenery.webp" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n\t<li class="item">\n\t\t<img src="./imgs/avatar.jpeg" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n\t<li class="item">\n\t\t<img src="./imgs/emperor.jpeg" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n\t<li class="item">\n\t\t<img src="./imgs/avatar.jpeg" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n\t<li class="item">\n\t\t<img src="./imgs/emperor.jpeg" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n</ul>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n\ncss 部分代码\n\n.list {\n\tposition: relative;\n\tmargin: 20px;\n\tlist-style: none;\n}\n.item {\n  width: calc((100% - 40px) / 5);\n  position: absolute;\n  background-color: #eee;\n  border-radius: 10px;\n}\n.img {\n\twidth: 100%;\n\tborder-radius: 10px 10px 0 0;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\njs 部分代码\n\nwindow.onload = function () {\n\tloadData()\n}\nfunction loadData () {\n\tlet list = document.getElementsByClassName(\'item\')\n\tlet space = 10     // 列之间的间距\n\tlet columns = 5    // 每一行放置几列\n\tlet arr = []       // 用于存放图片的高度\n\tfor (let i = 0, len = list.length; i < len; i ++) {\n\t\tlet itemW = list[i].offsetWidth   // 元素宽\n\t\tif (i < columns) {\n\t\t\tlet itemH = list[i].offsetHeight  // 元素高\n\t\t\tlist[i].style.left = i * (itemW + space) + \'px\'\n\t\t\tlist[i].style.top = 0\n\t\t\tarr.push(itemH)\n\t\t} else {\n\t\t\tlet itemIndex = 0\n\t\t\tlet heightMin = arr[itemIndex]\n\t\t\tfor (let j = 0; j < arr.length; j ++) {\n\t\t\t\tif (heightMin > arr[j]) {\n\t\t\t\t\titemIndex = j\n\t\t\t\t\theightMin = arr[j]\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist[i].style.left = itemIndex * (itemW + space) + \'px\'\n\t\t\tlist[i].style.top = heightMin + space + \'px\'\n\t\t\tarr[itemIndex] = heightMin + space + list[i].offsetHeight\n\t\t}\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n效果如下：\n\n\n这里有几个注意点：\n\n1、当列表索引小于每行放置的列数时就表示这是第一行，否则就不是第一行。\n\n2、当一行放满后，后面的再添加数据时需要添加在高度最小的那一列后面。\n\n3、每次添加完数据后，需要更新最小高度，否则后面添加数据时布局会有问题',normalizedContent:'概念说明\n\n瀑布流，又称瀑布流式布局。是比较流行的一种网站页面布局，视觉表现为参差不齐的多栏布局，随着页面滚动条向下滚动，这种布局还会不断加载数据块并附加至当前尾部\n\n瀑布流布局有优点也有缺点：\n\n优点：节省空间，一定程度上能够缓解用户视觉疲劳，跟传统布局相比使人眼前一亮。\n\n缺点：对于有些需要在列表页与详情页之间进行切换或页面需要放页脚时，这些情况下瀑布流布局都不适用。\n\n实现：使用 absolute 绝对定位\n\nhtml 部分代码：\n\n<ul class="list">\n\t<li class="item">\n\t\t<img src="./imgs/emperor.jpeg" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n\t<li class="item">\n\t\t<img src="./imgs/west-lake.jpeg" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n\t<li class="item">\n\t\t<img src="./imgs/scenery.webp" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n\t<li class="item">\n\t\t<img src="./imgs/avatar.jpeg" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n\t<li class="item">\n\t\t<img src="./imgs/emperor.jpeg" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n\t<li class="item">\n\t\t<img src="./imgs/avatar.jpeg" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n\t<li class="item">\n\t\t<img src="./imgs/emperor.jpeg" alt="" class="img">\n\t\t<div class="content">\n\t\t\t<p class="title">名字名字名字名字</p>\n\t\t\t<p class="desc">描述描述描述</p>\n\t\t</div>\n\t</li>\n</ul>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n\ncss 部分代码\n\n.list {\n\tposition: relative;\n\tmargin: 20px;\n\tlist-style: none;\n}\n.item {\n  width: calc((100% - 40px) / 5);\n  position: absolute;\n  background-color: #eee;\n  border-radius: 10px;\n}\n.img {\n\twidth: 100%;\n\tborder-radius: 10px 10px 0 0;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\njs 部分代码\n\nwindow.onload = function () {\n\tloaddata()\n}\nfunction loaddata () {\n\tlet list = document.getelementsbyclassname(\'item\')\n\tlet space = 10     // 列之间的间距\n\tlet columns = 5    // 每一行放置几列\n\tlet arr = []       // 用于存放图片的高度\n\tfor (let i = 0, len = list.length; i < len; i ++) {\n\t\tlet itemw = list[i].offsetwidth   // 元素宽\n\t\tif (i < columns) {\n\t\t\tlet itemh = list[i].offsetheight  // 元素高\n\t\t\tlist[i].style.left = i * (itemw + space) + \'px\'\n\t\t\tlist[i].style.top = 0\n\t\t\tarr.push(itemh)\n\t\t} else {\n\t\t\tlet itemindex = 0\n\t\t\tlet heightmin = arr[itemindex]\n\t\t\tfor (let j = 0; j < arr.length; j ++) {\n\t\t\t\tif (heightmin > arr[j]) {\n\t\t\t\t\titemindex = j\n\t\t\t\t\theightmin = arr[j]\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist[i].style.left = itemindex * (itemw + space) + \'px\'\n\t\t\tlist[i].style.top = heightmin + space + \'px\'\n\t\t\tarr[itemindex] = heightmin + space + list[i].offsetheight\n\t\t}\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n效果如下：\n\n\n这里有几个注意点：\n\n1、当列表索引小于每行放置的列数时就表示这是第一行，否则就不是第一行。\n\n2、当一行放满后，后面的再添加数据时需要添加在高度最小的那一列后面。\n\n3、每次添加完数据后，需要更新最小高度，否则后面添加数据时布局会有问题',charsets:{cjk:!0}},{title:"Node多环境配置(开发环境、生产环境)",frontmatter:{title:"Node多环境配置(开发环境、生产环境)",date:"2023-12-19T17:19:19.000Z",permalink:"/pages/79f61e/",categories:["《NodeJs》","Express"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/01.Express/04.Node%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE(%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E3%80%81%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83).html",relativePath:"《NodeJs》笔记/01.Express/04.Node多环境配置(开发环境、生产环境).md",key:"v-4b103e52",path:"/pages/79f61e/",lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:null,content:'在进行 NodeJs 开发时，经常要指定不同的环境，如测试环境、开发环境、生产环境等等，每次都手动改的话就很头大，因此急需要一款插件帮我们解决这个问题，这里强烈推荐 dotenv 这个插件，它能将环境变量中的变量从.env 文件加载到 process.env 中。\n\n为了在启动的时候指定环境和配置文件，需要安装另一个包 dotenv-cli\n\n1、安装需要的包 dotenv 和 dotenv-cli\n\nnpm install dotenv dotenv-cli\n\n\n1\n\n\n2、创建两个.env 文件：.env.development 和.env.production\n\n例如在.env.development 中配置如下：\n\nBASE_URL=127.0.0.1\nENV=development\n\n\n1\n2\n\n\n在.env.production 中配置如下\n\nBASE_URL=666.666.666.666\nENV=production\n\n\n1\n2\n\n\n3、配置启动脚本，在 package.json 中\n\n"scripts": {\n  "test": "echo \\"Error: no test specified\\" && exit 1",\n  "start": "nodemon index.js",\n  "dev": "dotenv -e .env.development nodemon index.js",\n  "prd": "dotenv -e .env.production pm2 start index.js"\n},\n\n\n1\n2\n3\n4\n5\n6\n\n\n4、使用环境变量，在项目入口文件中引入 dotenv\n\n// 加载配置文件\nrequire(\'dotenv\').config()\n\n\n1\n2\n\n\n至此，当我们启动项目后，就可以通过 process.env.[环境变量中变量名] 来配置了。当执行 npm run dev 时，便能读取到.env.development 中的变量。执行 npm run prd 便能读取.env.production 中的变量了',normalizedContent:'在进行 nodejs 开发时，经常要指定不同的环境，如测试环境、开发环境、生产环境等等，每次都手动改的话就很头大，因此急需要一款插件帮我们解决这个问题，这里强烈推荐 dotenv 这个插件，它能将环境变量中的变量从.env 文件加载到 process.env 中。\n\n为了在启动的时候指定环境和配置文件，需要安装另一个包 dotenv-cli\n\n1、安装需要的包 dotenv 和 dotenv-cli\n\nnpm install dotenv dotenv-cli\n\n\n1\n\n\n2、创建两个.env 文件：.env.development 和.env.production\n\n例如在.env.development 中配置如下：\n\nbase_url=127.0.0.1\nenv=development\n\n\n1\n2\n\n\n在.env.production 中配置如下\n\nbase_url=666.666.666.666\nenv=production\n\n\n1\n2\n\n\n3、配置启动脚本，在 package.json 中\n\n"scripts": {\n  "test": "echo \\"error: no test specified\\" && exit 1",\n  "start": "nodemon index.js",\n  "dev": "dotenv -e .env.development nodemon index.js",\n  "prd": "dotenv -e .env.production pm2 start index.js"\n},\n\n\n1\n2\n3\n4\n5\n6\n\n\n4、使用环境变量，在项目入口文件中引入 dotenv\n\n// 加载配置文件\nrequire(\'dotenv\').config()\n\n\n1\n2\n\n\n至此，当我们启动项目后，就可以通过 process.env.[环境变量中变量名] 来配置了。当执行 npm run dev 时，便能读取到.env.development 中的变量。执行 npm run prd 便能读取.env.production 中的变量了',charsets:{cjk:!0}},{title:"Express连接数据库MySQL",frontmatter:{title:"Express连接数据库MySQL",date:"2022-04-14T17:16:14.000Z",permalink:"/pages/dfd853/",categories:["《NodeJs》","Express"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/01.Express/02.Express%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93MySQL.html",relativePath:"《NodeJs》笔记/01.Express/02.Express连接数据库MySQL.md",key:"v-bafcd148",path:"/pages/dfd853/",headers:[{level:3,title:"1、安装mysql",slug:"_1、安装mysql",normalizedTitle:"1、安装 mysql",charIndex:41},{level:3,title:"2、数据库基础配置",slug:"_2、数据库基础配置",normalizedTitle:"2、数据库基础配置",charIndex:80},{level:3,title:"3、连接数据库、读取数据库工具函数封装",slug:"_3、连接数据库、读取数据库工具函数封装",normalizedTitle:"3、连接数据库、读取数据库工具函数封装",charIndex:439},{level:3,title:"4、业务逻辑处理",slug:"_4、业务逻辑处理",normalizedTitle:"4、业务逻辑处理",charIndex:1808},{level:3,title:"5、路由模块处理",slug:"_5、路由模块处理",normalizedTitle:"5、路由模块处理",charIndex:2243},{level:3,title:"6、根目录index.js文件中代码修改",slug:"_6、根目录index-js文件中代码修改",normalizedTitle:"6、根目录 index.js 文件中代码修改",charIndex:2486}],lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:"1、安装mysql 2、数据库基础配置 3、连接数据库、读取数据库工具函数封装 4、业务逻辑处理 5、路由模块处理 6、根目录index.js文件中代码修改",content:"假设已创建好名字为 runoob，表为 runoob_tbl 的数据库。\n\n\n# 1、安装 mysql\n\nnpm install mysql\n\n\n1\n\n\n\n# 2、数据库基础配置\n\n在 db/dbConfig.js 文件中存放 mysql 数据库基础配置，代码如下\n\nconst mysql = {\n    host: 'localhost',     // 主机名\n    port: '3306',          // 数据库端口号，默认3306\n    user: 'root',          // 创建数据库时设置用户名\n    password: '12345678',  // 创建数据库时设置的密码\n    database: 'runoob',    // 创建的数据库\n    connectTimeout: 5000,   // 连接超时\n}\n\nmodule.exports = mysql\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 3、连接数据库、读取数据库工具函数封装\n\n在 utils/index.js 文件中封装工具函数，连接数据库，读取数据库数据等操作。代码如下：\n\nconst mysql = require('mysql');\nconst config = require('../db/dbConfig');\n\n// 连接mysql\nfunction connect() {\n    const { host, user, password, database } = config;\n    return mysql.createConnection({\n        host,\n        user,\n        password,\n        database\n    })\n}\n\n// 新建查询连接\nfunction querySql(sql) {\n    const conn = connect();\n    return new Promise((resolve, reject) => {\n        try {\n            conn.query(sql, (err, res) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(res);\n                }\n            })\n        } catch (e) {\n            reject(e);\n        } finally {\n            // 释放连接\n            conn.end();\n        }\n    })\n}\n\n// 查询一条语句\nfunction queryOne(sql) {\n    return new Promise((resolve, reject) => {\n        querySql(sql).then(res => {\n            console.log('res===',res)\n            if (res && res.length > 0) {\n                resolve(res[0]);\n            } else {\n                resolve(null);\n            }\n        }).catch(err => {\n            reject(err);\n        })\n    })\n}\n\nmodule.exports = {\n    querySql,\n    queryOne\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# 4、业务逻辑处理\n\n在 services/userService.js 中进行业务逻辑处理，比如读取数据库数据，代码如下：\n\nconst { querySql, queryOne } = require('../utils/index');\n\n// 登录\nfunction getData (req, res) {\n    const query = `select * from runoob_tbl`\n    querySql(query).then(resp => {\n        let list = [...resp]\n        res.json({\n            msg: '成功',\n            data: list\n        })\n    })\n}\n\nmodule.exports = {\n    getData\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 5、路由模块处理\n\n在 services/api.js 中进行路由模块处理，代码如下：\n\nconst express = require('express');\nconst router = express.Router();\nconst service = require('./userService')\n\nrouter.get('/getData', service.getData)\n\nmodule.exports = router;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 6、根目录 index.js 文件中代码修改\n\nconst express = require('express')\nconst app = express()\nconst port = 3010\n\nconst apiRouter = require('./services/api')\n\n// 全局中间件\napp.use((request, response, next) => {\n    response.header('Access-Control-Allow-Origin', '*')\n    next()\n})\n\n// 1. 使用中间件,会自动加入req.body属性，这个属性中就包含了post请求所传入的参数\napp.use(express.urlencoded());\n\n//请求体中的携带的复杂json格式数据解析出来，保存在req.body中\napp.use(express.json());\n\n// 静态文件管理，如图片、css样式等。\napp.use(express.static('public'))\n\napp.use('/api', apiRouter)\n\n// 404处理\napp.use('*', (req, res) => {\n    res.status(404).render('404', {url: req.originalUrl})\n})\n\n// 500处理\napp.use((err, req, res, next) => {\n    res.status(500).render('500')\n})\n\napp.listen(port, () => {\n    console.log(`Example app listening on port ${port}`)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n现在我们访问 localhost:3010/api/getData 就能获取到数据库中的数据了，例如：\n\n\n\n如果要对上面的日期进行格式化，可以使用 moment.js。\n\n安装 moment.js\n\nnpm install moment\n\n\n1\n\n\n在 utils/dateFormat.js 文件中封装代码如下：\n\nconst moment = require('moment');\n\nfunction dateFormat(date, format) {\n    return moment(date).format(format)\n}\n\nmodule.exports = {\n    dateFormat\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n然后在 services/userService.js 文件中更改代码如下：\n\nconst { querySql, queryOne } = require('../utils/index');\nconst {dateFormat} = require('../utils/dataFormat')\n\n// 登录\nfunction getData (req, res) {\n    const query = `select * from runoob_tbl`\n    querySql(query).then(resp => {\n        resp = resp.map(item => ({\n            ...item,\n            submission_date: dateFormat(item.submission_date, 'YYYY-MM-DD HH:mm:ss')\n        }))\n        let list = [...resp]\n        res.json({\n            msg: '成功',\n            data: list\n        })\n    })\n}\n\nmodule.exports = {\n    getData\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n现在效果如下：\n\n\n\nps：在连接数据库时可能会报这个错误：Client does not support authentication protocol requested by server;consider upgrading MySQL client 这种错误。\n\n这时候可更改加密方式\n\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER;\n\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';   // 密码可随便改\n\nmysql> FLUSH PRIVILEGES;      // 刷新\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"假设已创建好名字为 runoob，表为 runoob_tbl 的数据库。\n\n\n# 1、安装 mysql\n\nnpm install mysql\n\n\n1\n\n\n\n# 2、数据库基础配置\n\n在 db/dbconfig.js 文件中存放 mysql 数据库基础配置，代码如下\n\nconst mysql = {\n    host: 'localhost',     // 主机名\n    port: '3306',          // 数据库端口号，默认3306\n    user: 'root',          // 创建数据库时设置用户名\n    password: '12345678',  // 创建数据库时设置的密码\n    database: 'runoob',    // 创建的数据库\n    connecttimeout: 5000,   // 连接超时\n}\n\nmodule.exports = mysql\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 3、连接数据库、读取数据库工具函数封装\n\n在 utils/index.js 文件中封装工具函数，连接数据库，读取数据库数据等操作。代码如下：\n\nconst mysql = require('mysql');\nconst config = require('../db/dbconfig');\n\n// 连接mysql\nfunction connect() {\n    const { host, user, password, database } = config;\n    return mysql.createconnection({\n        host,\n        user,\n        password,\n        database\n    })\n}\n\n// 新建查询连接\nfunction querysql(sql) {\n    const conn = connect();\n    return new promise((resolve, reject) => {\n        try {\n            conn.query(sql, (err, res) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(res);\n                }\n            })\n        } catch (e) {\n            reject(e);\n        } finally {\n            // 释放连接\n            conn.end();\n        }\n    })\n}\n\n// 查询一条语句\nfunction queryone(sql) {\n    return new promise((resolve, reject) => {\n        querysql(sql).then(res => {\n            console.log('res===',res)\n            if (res && res.length > 0) {\n                resolve(res[0]);\n            } else {\n                resolve(null);\n            }\n        }).catch(err => {\n            reject(err);\n        })\n    })\n}\n\nmodule.exports = {\n    querysql,\n    queryone\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# 4、业务逻辑处理\n\n在 services/userservice.js 中进行业务逻辑处理，比如读取数据库数据，代码如下：\n\nconst { querysql, queryone } = require('../utils/index');\n\n// 登录\nfunction getdata (req, res) {\n    const query = `select * from runoob_tbl`\n    querysql(query).then(resp => {\n        let list = [...resp]\n        res.json({\n            msg: '成功',\n            data: list\n        })\n    })\n}\n\nmodule.exports = {\n    getdata\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 5、路由模块处理\n\n在 services/api.js 中进行路由模块处理，代码如下：\n\nconst express = require('express');\nconst router = express.router();\nconst service = require('./userservice')\n\nrouter.get('/getdata', service.getdata)\n\nmodule.exports = router;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 6、根目录 index.js 文件中代码修改\n\nconst express = require('express')\nconst app = express()\nconst port = 3010\n\nconst apirouter = require('./services/api')\n\n// 全局中间件\napp.use((request, response, next) => {\n    response.header('access-control-allow-origin', '*')\n    next()\n})\n\n// 1. 使用中间件,会自动加入req.body属性，这个属性中就包含了post请求所传入的参数\napp.use(express.urlencoded());\n\n//请求体中的携带的复杂json格式数据解析出来，保存在req.body中\napp.use(express.json());\n\n// 静态文件管理，如图片、css样式等。\napp.use(express.static('public'))\n\napp.use('/api', apirouter)\n\n// 404处理\napp.use('*', (req, res) => {\n    res.status(404).render('404', {url: req.originalurl})\n})\n\n// 500处理\napp.use((err, req, res, next) => {\n    res.status(500).render('500')\n})\n\napp.listen(port, () => {\n    console.log(`example app listening on port ${port}`)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n现在我们访问 localhost:3010/api/getdata 就能获取到数据库中的数据了，例如：\n\n\n\n如果要对上面的日期进行格式化，可以使用 moment.js。\n\n安装 moment.js\n\nnpm install moment\n\n\n1\n\n\n在 utils/dateformat.js 文件中封装代码如下：\n\nconst moment = require('moment');\n\nfunction dateformat(date, format) {\n    return moment(date).format(format)\n}\n\nmodule.exports = {\n    dateformat\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n然后在 services/userservice.js 文件中更改代码如下：\n\nconst { querysql, queryone } = require('../utils/index');\nconst {dateformat} = require('../utils/dataformat')\n\n// 登录\nfunction getdata (req, res) {\n    const query = `select * from runoob_tbl`\n    querysql(query).then(resp => {\n        resp = resp.map(item => ({\n            ...item,\n            submission_date: dateformat(item.submission_date, 'yyyy-mm-dd hh:mm:ss')\n        }))\n        let list = [...resp]\n        res.json({\n            msg: '成功',\n            data: list\n        })\n    })\n}\n\nmodule.exports = {\n    getdata\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n现在效果如下：\n\n\n\nps：在连接数据库时可能会报这个错误：client does not support authentication protocol requested by server;consider upgrading mysql client 这种错误。\n\n这时候可更改加密方式\n\nmysql> alter user 'root'@'localhost' identified by 'password' password expire never;\n\nmysql> alter user 'root'@'localhost' identified with mysql_native_password by '123456';   // 密码可随便改\n\nmysql> flush privileges;      // 刷新\n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0}},{title:"自定义复选框checkbox样式",frontmatter:{title:"自定义复选框checkbox样式",date:"2022-05-19T16:47:44.000Z",permalink:"/pages/6ee7ee/",categories:["CSS"],tags:[null]},regularPath:"/%E3%80%8ACSS%E3%80%8B%E7%AC%94%E8%AE%B0/02.CSS/01.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%8D%E9%80%89%E6%A1%86checkbox%E6%A0%B7%E5%BC%8F.html",relativePath:"《CSS》笔记/02.CSS/01.自定义复选框checkbox样式.md",key:"v-51ebefb8",path:"/pages/6ee7ee/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'html 部分代码：\n\n<input type="checkbox" id="myCheck">\n<label for="myCheck"></label>\n\n\n1\n2\n\n\ncss 样式\n\n#myCheck {\n  display: none;\n}\n#myCheck + label{\n  background-color: white;\n  border-radius: 5px;\n  border:1px solid #d3d3d3;\n  width:20px;\n  height:20px;\n  display: inline-block;\n  text-align: center;\n  vertical-align: middle;\n  line-height: 20px;\n}\n#myCheck:checked + label{\n  background: #409eff;\n  border: none;\n  position: relative;\n}\n#myCheck:checked + label::after{\n  content:"\\2714";\n  width: 100%;\n  border-radius: 5px;\n  position: absolute;\n  left: 0;\n  top: 0;\n  color: #fff;\n  border:1px solid #409eff;\n  background: #409eff;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n效果如下：\n\n',normalizedContent:'html 部分代码：\n\n<input type="checkbox" id="mycheck">\n<label for="mycheck"></label>\n\n\n1\n2\n\n\ncss 样式\n\n#mycheck {\n  display: none;\n}\n#mycheck + label{\n  background-color: white;\n  border-radius: 5px;\n  border:1px solid #d3d3d3;\n  width:20px;\n  height:20px;\n  display: inline-block;\n  text-align: center;\n  vertical-align: middle;\n  line-height: 20px;\n}\n#mycheck:checked + label{\n  background: #409eff;\n  border: none;\n  position: relative;\n}\n#mycheck:checked + label::after{\n  content:"\\2714";\n  width: 100%;\n  border-radius: 5px;\n  position: absolute;\n  left: 0;\n  top: 0;\n  color: #fff;\n  border:1px solid #409eff;\n  background: #409eff;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n效果如下：\n\n',charsets:{cjk:!0}},{title:"koa连接数据库",frontmatter:{title:"koa连接数据库",date:"2022-04-19T11:22:21.000Z",permalink:"/pages/eb12e5/",categories:["《NodeJs》","Koa"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/02.Koa/02.koa%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.html",relativePath:"《NodeJs》笔记/02.Koa/02.koa连接数据库.md",key:"v-157e2a4c",path:"/pages/eb12e5/",headers:[{level:3,title:"创建数据库会话",slug:"创建数据库会话",normalizedTitle:"创建数据库会话",charIndex:119},{level:3,title:"创建数据连接池",slug:"创建数据连接池",normalizedTitle:"创建数据连接池",charIndex:724},{level:3,title:"创建数据池并进行会话方法封装",slug:"创建数据池并进行会话方法封装",normalizedTitle:"创建数据池并进行会话方法封装",charIndex:1200}],lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:"创建数据库会话 创建数据连接池 创建数据池并进行会话方法封装",content:"安装 mysql 模块\n\nnpm install --save mysql\n\n\n1\n\n\nmysql 模块是 node 操作 MySQL 的引擎，可以在 node.js 环境下对 MySQL 数据库进行建表，增、删、改、查等操作。\n\n\n# 创建数据库会话\n\nconst mysql = require('mysql')\nconst connection = mysql.createConnection({\n\thost: host,        // 数据库地址\n\tuser: 'root',        // 数据库用户\n\tpassword: 123456,  // 数据库密码\n\tdatabase: 'my_database',  // 选中的数据库\n})\n\n// 执行sql脚本对数据库进行读写\nconnection.query(mysql查询语句, (err, results) => {\n\treturn new Promise((resolve, reject) => {\n\t\tif (err) {\n\t\t  reject(err)\n\t\t  return false;\n\t\t}\n\t\tconst dataString = JSON.stringify(results)\n\t\tresolve(JSON.parse(dataString));\n\t\tconnection.release()    // 结束会话\n\t})\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n注意：一个事件就有一个从开始到结束的过程，数据库会话操作执行完后，就需要关闭掉，以免占用连接资源。\n\n\n# 创建数据连接池\n\n一般情况下操作数据库是很复杂的读写过程，不只是一个会话，如果直接用会话操作，就需要每次会话都要配置连接参数。所以这时候就需要连接池管理会话。\n\nconst mysql = require('mysql')\n\n// 创建数据池\nconst pool = mysql.createPool({\n\thost: host,\n\tuser: 'root',\n\tpassword: 123456,\n\tdatabase: 'my_database'\n})\n\n// 在数据池中进行会话操作\npool.getConnection((err, connection) => {\n\tconnection.query(mysql查询语句, (err, results) => {\n\t\t// 结束会话\n\t\tconnection.release();\n\n\t\t// 如果有错误就抛出\n\t\tif (error) throw error;\n\t})\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 创建数据池并进行会话方法封装\n\n对创建数据池并进行会话操作进行封装后，代码如下：\n/db/dbConfig.js 文件代码如下：\n\nconst mysql = {\n    host: 'localhost',\n    port: '3306',\n    user: 'root',\n    password: '12345678',\n    database: 'runoob'\n}\nmodule.exports = mysql\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nutils.js\n\nconst config = require('./db/dbConfig')\nconst mysql = require('mysql')\n\n// 创建数据吃\nfunction connect () {\n    return mysql.createPool(config)\n}\n\n// 进行会话\nfunction sqlQuery (sql) {\n    const conn = connect()\n    return new Promise((resolve, reject) => {\n        conn.getConnection((err, connection) => {\n            if (err) {\n                throw new Error(err)\n                return false;\n            }\n            try {\n                connection.query(sql, (error, results) => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        const dataString = JSON.stringify(results)\n                        resolve(JSON.parse(dataString));\n                    }\n                })\n            } catch (e){\n                reject(e)\n            } finally {\n                connection.release()\n            }\n        })\n\n    })\n}\n\n// 查询表中记录总数\nasync function getTotalCount (tableName) {\n    return await sqlQuery(`SELECT COUNT(*) as totalCount FROM ${tableName}`)\n}\n\nmodule.exports = {\n    sqlQuery,\n    getTotalCount\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n在其他路由里使用如下：\n\nconst Router = require('koa-router')\nconst router = new Router()\nconst {sqlQuery, getTotalCount} = require('../utils')\n\nrouter.post('/getList', async (ctx) => {\n    let query = null\n    let {user_name, page, pageSize} = ctx.request.body\n    if (user_name) {\n        query = `select * from user_list where user_name like '%${user_name}%'`\n    } else {\n        // 从page * pageSize - pageSize开始，往后取pageSize条数据。。\n      query = `select * from user_list limit ${pageSize} offset ${page * pageSize - pageSize}`\n    }\n    const totalCount =  (await getTotalCount('user_list'))[0].totalCount\n    const data = await sqlQuery(query)\n    if(!data || data.length === 0) {\n        ctx.body = {\n            code: 200,\n            msg: '数据为空',\n            data: [],\n            totalCount: 0\n        }\n    } else {\n        ctx.body = {\n            code: 200,\n            msg: 'success',\n            data: data,\n            totalCount: totalCount\n        }\n    }\n})\n\nmodule.exports = router\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n",normalizedContent:"安装 mysql 模块\n\nnpm install --save mysql\n\n\n1\n\n\nmysql 模块是 node 操作 mysql 的引擎，可以在 node.js 环境下对 mysql 数据库进行建表，增、删、改、查等操作。\n\n\n# 创建数据库会话\n\nconst mysql = require('mysql')\nconst connection = mysql.createconnection({\n\thost: host,        // 数据库地址\n\tuser: 'root',        // 数据库用户\n\tpassword: 123456,  // 数据库密码\n\tdatabase: 'my_database',  // 选中的数据库\n})\n\n// 执行sql脚本对数据库进行读写\nconnection.query(mysql查询语句, (err, results) => {\n\treturn new promise((resolve, reject) => {\n\t\tif (err) {\n\t\t  reject(err)\n\t\t  return false;\n\t\t}\n\t\tconst datastring = json.stringify(results)\n\t\tresolve(json.parse(datastring));\n\t\tconnection.release()    // 结束会话\n\t})\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n注意：一个事件就有一个从开始到结束的过程，数据库会话操作执行完后，就需要关闭掉，以免占用连接资源。\n\n\n# 创建数据连接池\n\n一般情况下操作数据库是很复杂的读写过程，不只是一个会话，如果直接用会话操作，就需要每次会话都要配置连接参数。所以这时候就需要连接池管理会话。\n\nconst mysql = require('mysql')\n\n// 创建数据池\nconst pool = mysql.createpool({\n\thost: host,\n\tuser: 'root',\n\tpassword: 123456,\n\tdatabase: 'my_database'\n})\n\n// 在数据池中进行会话操作\npool.getconnection((err, connection) => {\n\tconnection.query(mysql查询语句, (err, results) => {\n\t\t// 结束会话\n\t\tconnection.release();\n\n\t\t// 如果有错误就抛出\n\t\tif (error) throw error;\n\t})\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 创建数据池并进行会话方法封装\n\n对创建数据池并进行会话操作进行封装后，代码如下：\n/db/dbconfig.js 文件代码如下：\n\nconst mysql = {\n    host: 'localhost',\n    port: '3306',\n    user: 'root',\n    password: '12345678',\n    database: 'runoob'\n}\nmodule.exports = mysql\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nutils.js\n\nconst config = require('./db/dbconfig')\nconst mysql = require('mysql')\n\n// 创建数据吃\nfunction connect () {\n    return mysql.createpool(config)\n}\n\n// 进行会话\nfunction sqlquery (sql) {\n    const conn = connect()\n    return new promise((resolve, reject) => {\n        conn.getconnection((err, connection) => {\n            if (err) {\n                throw new error(err)\n                return false;\n            }\n            try {\n                connection.query(sql, (error, results) => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        const datastring = json.stringify(results)\n                        resolve(json.parse(datastring));\n                    }\n                })\n            } catch (e){\n                reject(e)\n            } finally {\n                connection.release()\n            }\n        })\n\n    })\n}\n\n// 查询表中记录总数\nasync function gettotalcount (tablename) {\n    return await sqlquery(`select count(*) as totalcount from ${tablename}`)\n}\n\nmodule.exports = {\n    sqlquery,\n    gettotalcount\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n在其他路由里使用如下：\n\nconst router = require('koa-router')\nconst router = new router()\nconst {sqlquery, gettotalcount} = require('../utils')\n\nrouter.post('/getlist', async (ctx) => {\n    let query = null\n    let {user_name, page, pagesize} = ctx.request.body\n    if (user_name) {\n        query = `select * from user_list where user_name like '%${user_name}%'`\n    } else {\n        // 从page * pagesize - pagesize开始，往后取pagesize条数据。。\n      query = `select * from user_list limit ${pagesize} offset ${page * pagesize - pagesize}`\n    }\n    const totalcount =  (await gettotalcount('user_list'))[0].totalcount\n    const data = await sqlquery(query)\n    if(!data || data.length === 0) {\n        ctx.body = {\n            code: 200,\n            msg: '数据为空',\n            data: [],\n            totalcount: 0\n        }\n    } else {\n        ctx.body = {\n            code: 200,\n            msg: 'success',\n            data: data,\n            totalcount: totalcount\n        }\n    }\n})\n\nmodule.exports = router\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n",charsets:{cjk:!0}},{title:"用户认证之jsonwebtoken",frontmatter:{title:"用户认证之jsonwebtoken",date:"2022-04-21T16:07:29.000Z",permalink:"/pages/0de10f/",categories:["《NodeJs》","Koa"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/02.Koa/03.%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E4%B9%8Bjsonwebtoken.html",relativePath:"《NodeJs》笔记/02.Koa/03.用户认证之jsonwebtoken.md",key:"v-d1164148",path:"/pages/0de10f/",lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:null,content:"基本原理：\n1、客户端试用账号和密码请求登录。\n2、登录成功后服务器使用签名密钥生成jwt，并返回jwt给客户端。\n3、客户端再次向服务端请求其他接口时，请求头须携带jwt。\n4、服务器接收到jwt后验证签名是否有效，对客户端做出相应的响应。\n\n\n1、安装 jsonwebtoken\n\nnpm install jsonwebtoken\n\n\n1\n\n\n2、引入 jsonwebtoken\n\nconst jwt = require('jsonwebtoken')\n\n\n1\n\n\n3、生成 token\n\n例如：\n\nlet token = jwt.sign({\n    name: '张三',\n    password: '123456'\n}, privatekey, {             // privatekey，即密钥\n    expiresIn: 3600       // 表示token多久失效，如果是整数则表示多少秒后过期，此处表示1小时过期，也可以使用'1h'\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n4、验证 token\n\njwt.verify(token, privatekey, (err, data) => {\n    if (err) {\n        console.log('err')\n    } else {\n        /*\n        data表示一个对象，解析后格式如：\n        {\n          user_name: '心欲无痕',\n          password: '123456',\n          iat: 1650526332,          // iat表示签发时间\n          exp: 1650529932          // exp表示过期时间\n        }\n        */\n        console.log('data', data)  // data是一个对象，\n    }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nps：如果token解释失败或者已过期，都会返回err，只有正确解析出数据才会返回data。",normalizedContent:"基本原理：\n1、客户端试用账号和密码请求登录。\n2、登录成功后服务器使用签名密钥生成jwt，并返回jwt给客户端。\n3、客户端再次向服务端请求其他接口时，请求头须携带jwt。\n4、服务器接收到jwt后验证签名是否有效，对客户端做出相应的响应。\n\n\n1、安装 jsonwebtoken\n\nnpm install jsonwebtoken\n\n\n1\n\n\n2、引入 jsonwebtoken\n\nconst jwt = require('jsonwebtoken')\n\n\n1\n\n\n3、生成 token\n\n例如：\n\nlet token = jwt.sign({\n    name: '张三',\n    password: '123456'\n}, privatekey, {             // privatekey，即密钥\n    expiresin: 3600       // 表示token多久失效，如果是整数则表示多少秒后过期，此处表示1小时过期，也可以使用'1h'\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n4、验证 token\n\njwt.verify(token, privatekey, (err, data) => {\n    if (err) {\n        console.log('err')\n    } else {\n        /*\n        data表示一个对象，解析后格式如：\n        {\n          user_name: '心欲无痕',\n          password: '123456',\n          iat: 1650526332,          // iat表示签发时间\n          exp: 1650529932          // exp表示过期时间\n        }\n        */\n        console.log('data', data)  // data是一个对象，\n    }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nps：如果token解释失败或者已过期，都会返回err，只有正确解析出数据才会返回data。",charsets:{cjk:!0}},{title:"koa应用搭建与路由配置",frontmatter:{title:"koa应用搭建与路由配置",date:"2022-04-19T10:37:45.000Z",permalink:"/pages/ccb7df/",categories:["《NodeJs》","Koa"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/02.Koa/01.koa%E5%BA%94%E7%94%A8%E6%90%AD%E5%BB%BA%E4%B8%8E%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE.html",relativePath:"《NodeJs》笔记/02.Koa/01.koa应用搭建与路由配置.md",key:"v-0e56de60",path:"/pages/ccb7df/",headers:[{level:3,title:"1、基础应用搭建：",slug:"_1、基础应用搭建",normalizedTitle:"1、基础应用搭建：",charIndex:2},{level:3,title:"2、路由的配置：",slug:"_2、路由的配置",normalizedTitle:"2、路由的配置：",charIndex:577}],lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:"1、基础应用搭建： 2、路由的配置：",content:"# 1、基础应用搭建：\n\n创建一个 koa 项目目录\n\n\nmkdir myapp\n\n\n1\n\n\n进入刚创建的项目\n\n\ncd myapp\n\n\n1\n\n\n执行 npm init 生成项目配置文件：通过 npm init 命令为应用创建一个 package.json 文件。\n\n\nnpm init\n\n\n1\n\n\n此命令将要求输入几个参数，如应用名、版本号、描述、作者等。可以直接按‘回车’使用默认的。此命令将要求输入几个参数，如应用名、版本号、描述、作者等。可以直接按‘回车’使用默认的。\n\nentry poin: (index.js)\n\n\n1\n\n\n接下来新建一个 app.js 然后安装 koa：\n\n键入 app.js 或者你所希望的名称，这是当前应用的入口文件。\n\n然后安装 koa 将其保存到依赖列表中\n\n\nnpm install koa -S\n\n\n1\n\n\n然后在新建的app.js中引入koa，代码如下：\n\n//引入Koa\nconst koa=require('koa');\n\nconst app=new koa();\n\n//配置中间件\napp.use( async (ctx)=>{\n ctx.body='hello koa2'\n})\n\n//监听端口\napp.listen(3000);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 2、路由的配置：\n\n\n首先需要安装koa-router\n\nnpm install koa-router -S\n\n\n1\n\n\n在项目根目录下创建routes目录，routes/index.js文件代码如下：\n\nconst Router = require('koa-router')\nconst router = new Router()\n\nrouter.get('/list', async (ctx) => {\n    ctx.body = '列表'\n})\n\nrouter.get('/news', async (ctx) => {\n    console.log('ctx', ctx.query)  // 读取get请求传递的值，如{name: '张三', age: 34}\n   console.log('url', ctx.url)   // 中文会自动进行编码 /news?name=%E5%BC%A0%E4%B8%89&age=34\n   ctx.body = '新闻'\n})\n\nmodule.exports = router\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n在 app.js 文件中更改代码如下：\n\n// 引入koa\nconst koa = require('koa')\nconst app = new koa()\nconst Router = require('koa-router')\n\nconst apiRouter = require('./routes/index')\n//装载所有子路由\nlet router = new Router()\nrouter.use('/api', apiRouter.routes())\n\n// 加载路由中间件\napp.use(router.routes())\n   .use(router.allowedMethods())\n\n// 配置中间件\napp.use(async (ctx) => {\n    ctx.body = 'hello world!'\n})\n\n// 监听端口号\napp.listen(3000)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n现在访问localhost:3000/api/list和localhost:3000/api/news可以分别看到效果。\n在get请求中可以通过ctx.query来获取get的传值。\n\n\n\nkoa-bodyparser模块使用：\n\n\n在post请求中，koa-bodyparser中间件可以把koa2上下文的formData数据解析到ctx.request.body中\n\nnpm install koa-bodyparser -S\n\n\n1\n\n\n在 app.js 中引入配置中间件\n\nvar Koa = require('koa');\nvar bodyParser = require('koa-bodyparser');\nvar app = new Koa();\napp.use(bodyParser());\n \n\n\n1\n2\n3\n4\n5\n\n\n然后在请求中就可以这样获取 post 传递的参数了\n\nrouter.post('/login', async (ctx) => {\n    console.log('ctx', ctx.request.body)\n    ctx.body = 'hello world'\n})\n\n\n1\n2\n3\n4\n\n\n跨域处理：\n\n\n在koa2中处理跨域，需要用到koa2-cors这个模块：\n\nnpm install koa2-cors -S\n\n\n1\n\n\n在 app.js 中配置中间件\n\nvar Koa = require('koa');\nvar cors = require('koa2-cors');\n\nvar app = new Koa();\napp.use(cors());\n\n\n1\n2\n3\n4\n5\n\n\n静态资源加载：\n\n\n在koa2中，访问静态资源，需要使用koa-static中间件\n\nnpm install koa-static -S\n\n\n1\n\n\n在app.js中配置中间件\n\nconst static = require('koa-static'); \n\napp.use(static(\n    path.join( __dirname,  'public')\n)) \n\n\n1\n2\n3\n4\n5\n",normalizedContent:"# 1、基础应用搭建：\n\n创建一个 koa 项目目录\n\n\nmkdir myapp\n\n\n1\n\n\n进入刚创建的项目\n\n\ncd myapp\n\n\n1\n\n\n执行 npm init 生成项目配置文件：通过 npm init 命令为应用创建一个 package.json 文件。\n\n\nnpm init\n\n\n1\n\n\n此命令将要求输入几个参数，如应用名、版本号、描述、作者等。可以直接按‘回车’使用默认的。此命令将要求输入几个参数，如应用名、版本号、描述、作者等。可以直接按‘回车’使用默认的。\n\nentry poin: (index.js)\n\n\n1\n\n\n接下来新建一个 app.js 然后安装 koa：\n\n键入 app.js 或者你所希望的名称，这是当前应用的入口文件。\n\n然后安装 koa 将其保存到依赖列表中\n\n\nnpm install koa -s\n\n\n1\n\n\n然后在新建的app.js中引入koa，代码如下：\n\n//引入koa\nconst koa=require('koa');\n\nconst app=new koa();\n\n//配置中间件\napp.use( async (ctx)=>{\n ctx.body='hello koa2'\n})\n\n//监听端口\napp.listen(3000);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 2、路由的配置：\n\n\n首先需要安装koa-router\n\nnpm install koa-router -s\n\n\n1\n\n\n在项目根目录下创建routes目录，routes/index.js文件代码如下：\n\nconst router = require('koa-router')\nconst router = new router()\n\nrouter.get('/list', async (ctx) => {\n    ctx.body = '列表'\n})\n\nrouter.get('/news', async (ctx) => {\n    console.log('ctx', ctx.query)  // 读取get请求传递的值，如{name: '张三', age: 34}\n   console.log('url', ctx.url)   // 中文会自动进行编码 /news?name=%e5%bc%a0%e4%b8%89&age=34\n   ctx.body = '新闻'\n})\n\nmodule.exports = router\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n在 app.js 文件中更改代码如下：\n\n// 引入koa\nconst koa = require('koa')\nconst app = new koa()\nconst router = require('koa-router')\n\nconst apirouter = require('./routes/index')\n//装载所有子路由\nlet router = new router()\nrouter.use('/api', apirouter.routes())\n\n// 加载路由中间件\napp.use(router.routes())\n   .use(router.allowedmethods())\n\n// 配置中间件\napp.use(async (ctx) => {\n    ctx.body = 'hello world!'\n})\n\n// 监听端口号\napp.listen(3000)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n现在访问localhost:3000/api/list和localhost:3000/api/news可以分别看到效果。\n在get请求中可以通过ctx.query来获取get的传值。\n\n\n\nkoa-bodyparser模块使用：\n\n\n在post请求中，koa-bodyparser中间件可以把koa2上下文的formdata数据解析到ctx.request.body中\n\nnpm install koa-bodyparser -s\n\n\n1\n\n\n在 app.js 中引入配置中间件\n\nvar koa = require('koa');\nvar bodyparser = require('koa-bodyparser');\nvar app = new koa();\napp.use(bodyparser());\n \n\n\n1\n2\n3\n4\n5\n\n\n然后在请求中就可以这样获取 post 传递的参数了\n\nrouter.post('/login', async (ctx) => {\n    console.log('ctx', ctx.request.body)\n    ctx.body = 'hello world'\n})\n\n\n1\n2\n3\n4\n\n\n跨域处理：\n\n\n在koa2中处理跨域，需要用到koa2-cors这个模块：\n\nnpm install koa2-cors -s\n\n\n1\n\n\n在 app.js 中配置中间件\n\nvar koa = require('koa');\nvar cors = require('koa2-cors');\n\nvar app = new koa();\napp.use(cors());\n\n\n1\n2\n3\n4\n5\n\n\n静态资源加载：\n\n\n在koa2中，访问静态资源，需要使用koa-static中间件\n\nnpm install koa-static -s\n\n\n1\n\n\n在app.js中配置中间件\n\nconst static = require('koa-static'); \n\napp.use(static(\n    path.join( __dirname,  'public')\n)) \n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0}},{title:"使用脚手架快速初始化Egg项目",frontmatter:{title:"使用脚手架快速初始化Egg项目",date:"2023-07-11T17:23:25.000Z",permalink:"/pages/ec6b29/",categories:["《NodeJs》","Egg"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/03.Egg/01.%E4%BD%BF%E7%94%A8%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BF%AB%E9%80%9F%E5%88%9D%E5%A7%8B%E5%8C%96Egg%E9%A1%B9%E7%9B%AE.html",relativePath:"《NodeJs》笔记/03.Egg/01.使用脚手架快速初始化Egg项目.md",key:"v-f4442e50",path:"/pages/ec6b29/",lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:null,content:"使用脚手架快速生成项目，只需以下几条命令即可：\n\nmkdir projectName\ncd projectName\nnpm init egg --type=simple\nnpm install\n\n\n1\n2\n3\n4\n\n\n生成文件目录如下：\n\n\n\n框架约定的目录说明：\n\n * app/router.js 用于配置 url 路由规则。\n * app/controller/** 用于解析用户的输入，处理后返回相应的结果\n * app/service/** 用于编写业务逻辑层，可选，使用场景主要是复杂数据的处理，比如要展现的信息需要从数据库获取，还要经过一定的规则计算，才能返回用户显示。或者计算完成后，更新到数据库。\n * app/middleware/** 用于编写中间件，可选\n * app/public/** 用于放置静态资源，可选\n * app/extend/** 用于框架的扩展，可选\n * config/config.{env}.js 用于编写配置文件\n * config/plugin.js 用于配置需要加载的插件\n * app.js 和 agent.js 用于自定义启动时的初始化工作，可选\n * app/schedule/** 用于定时任务，可选\n\n启动项目：\n\nnpm run dev\n\n\n1\n\n\n然后在浏览器打开即可。",normalizedContent:"使用脚手架快速生成项目，只需以下几条命令即可：\n\nmkdir projectname\ncd projectname\nnpm init egg --type=simple\nnpm install\n\n\n1\n2\n3\n4\n\n\n生成文件目录如下：\n\n\n\n框架约定的目录说明：\n\n * app/router.js 用于配置 url 路由规则。\n * app/controller/** 用于解析用户的输入，处理后返回相应的结果\n * app/service/** 用于编写业务逻辑层，可选，使用场景主要是复杂数据的处理，比如要展现的信息需要从数据库获取，还要经过一定的规则计算，才能返回用户显示。或者计算完成后，更新到数据库。\n * app/middleware/** 用于编写中间件，可选\n * app/public/** 用于放置静态资源，可选\n * app/extend/** 用于框架的扩展，可选\n * config/config.{env}.js 用于编写配置文件\n * config/plugin.js 用于配置需要加载的插件\n * app.js 和 agent.js 用于自定义启动时的初始化工作，可选\n * app/schedule/** 用于定时任务，可选\n\n启动项目：\n\nnpm run dev\n\n\n1\n\n\n然后在浏览器打开即可。",charsets:{cjk:!0}},{title:"数据库的基本操作，增、删、改、查",frontmatter:{title:"数据库的基本操作，增、删、改、查",date:"2023-07-12T16:00:44.000Z",permalink:"/pages/1d8e0d/",categories:["《NodeJs》","Egg"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/03.Egg/03.Egg%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%8C%E5%A2%9E%E3%80%81%E5%88%A0%E3%80%81%E6%94%B9%E3%80%81%E6%9F%A5.html",relativePath:"《NodeJs》笔记/03.Egg/03.Egg之数据库的基本操作，增、删、改、查.md",key:"v-d4d2438e",path:"/pages/1d8e0d/",headers:[{level:2,title:"1、查找数据",slug:"_1、查找数据",normalizedTitle:"1、查找数据",charIndex:681},{level:3,title:"(1)、查找userlist表中指定userid的用户",slug:"_1-、查找user-list表中指定user-id的用户",normalizedTitle:"(1)、查找 userlist 表中指定 userid 的用户",charIndex:null},{level:3,title:"(2)、查找user_list表中所有用户",slug:"_2-、查找user-list表中所有用户",normalizedTitle:"(2)、查找 user_list 表中所有用户",charIndex:1854},{level:2,title:"2、更新数据",slug:"_2、更新数据",normalizedTitle:"2、更新数据",charIndex:2213},{level:2,title:"3、删除数据",slug:"_3、删除数据",normalizedTitle:"3、删除数据",charIndex:3481},{level:2,title:"4、增加数据",slug:"_4、增加数据",normalizedTitle:"4、增加数据",charIndex:4363},{level:2,title:"5、批量插入数据",slug:"_5、批量插入数据",normalizedTitle:"5、批量插入数据",charIndex:5299},{level:2,title:"6、批量删除数据",slug:"_6、批量删除数据",normalizedTitle:"6、批量删除数据",charIndex:6857},{level:2,title:"7、批量更新数据",slug:"_7、批量更新数据",normalizedTitle:"7、批量更新数据",charIndex:8088}],lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:"1、查找数据 (1)、查找userlist表中指定userid的用户 (2)、查找user_list表中所有用户 2、更新数据 3、删除数据 4、增加数据 5、批量插入数据 6、批量删除数据 7、批量更新数据",content:"/app/router.js 文件如下（含增、删、改、查）：\n\n'use strict';\n\n/**\n * @param {Egg.Application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller, middleware } = app;\n  router.post('/getList',  controller.list.getList)       // 查找\n  router.post('/updateList', controller.list.updateList)  // 更新\n  router.post('/delete', controller.list.delete)          // 删除\n  router.post('/addUser', controller.list.addUser)        // 添加\n  router.post('/patchAdd', controller.list.patchAdd)      // 批量添加\n  router.post('/patchDelete', controller.list.patchDelete)// 批量删除\n  router.post('/patchUpdate', controller.list.patchUpdate)// 批量更新\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 1、查找数据\n\n\n# (1)、查找 user_list 表中指定 user_id 的用户\n\n/app/controller/list.js 中代码如下：\n\n'use strict';\n\nconst { Controller } = require('egg');\n\nclass ListController extends Controller {\n\tasync getList () {\n\t\tconst { ctx } = this;\n\t\tconst userId = ctx.request.body.userId\n\t\tconst userInfo = await ctx.service.user.find(userId)\n\t\tctx.body = userInfo\n\t}\n}\n\nmodule.exports = ListController;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n/app/service/user.js 中代码如下：\n\nconst { Service } = require('egg')\n\nclass UserService extends Service {\n\tasync find(uid) {\n\t\tif (uid) {\n\t\t\tconst user = await this.app.mysql.get('user_list', {user_id: uid})\n\t\t\treturn user\n\t\t} else {\n\t\t\tconst user = await this.app.mysql.query(`select * from user_list`)\n\t\t\treturn user\n\t\t}\n\t\t//方法1 const user = await this.app.mysql.get('user_list', {user_id: uid})\n\t\t\n\t\t/*方法2 \n\t\tconst user = await this.app.mysql.select('user_list', {\n\t\t\twhere: {\n\t\t\t\tuser_id: uid\n\t\t\t}\n\t\t})\n\t\t*/\n\t\t//方法3,直接执行sql语句，不推荐，容易引起sql注入 \n\t\t/* \n\t\tconst user = await this.app.mysql.query(`select * from user_list where user_id = ${uid}`)\n\t\t*/\n\t}\n}\n\nmodule.exports = UserService\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# (2)、查找 user_list 表中所有用户\n\n/app/service/user.js 中代码如下：\n\nconst { Service } = require('egg')\n\nclass UserService extends Service {\n\tasync find(uid) {\n\t\tconst user = await this.app.mysql.select('user_list', {})\n\t\treturn user\n\t\t//或者 const user = await this.app.mysql.query(`select * from user_list`)\n\t}\n}\n\nmodule.exports = UserService\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 2、更新数据\n\n修改 user_list 表中数据\n\n/app/controller/list.js 文件代码如下：\n\n'use strict';\n\nconst { Controller } = require('egg');\n\nclass ListController extends Controller {\n\tasync updateList () {\n\t\tconst { ctx } = this;\n\t\tconst userId = ctx.request.body.userId\n\t\tconst userName = ctx.request.body.userName\n\t\tconst userInfo = await ctx.service.user.update(userId, userName)\n\t\tctx.body = userInfo\n\t}\n}\n\nmodule.exports = ListController;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n/app/service/user.js 文件如下：\n\nconst { Service } = require('egg')\n\nclass UserService extends Service {\n\tasync update(uid, userName) {\n\t\t// 如果主键是自定义的 ID 名称，如 custom_id，则需要在 `where` 里面配置\n\t\t// const user = await this.app.mysql.update('user_list', {\n\t\t// \tuser_name: userName\n\t\t// }, {\n\t\t// \twhere: {\n\t\t// \t\tuser_id: uid\n\t\t// \t}\n\t\t// })\n\t\t// 或者, 根据主键 ID 查找，并更新\n\t\tconst user = await this.app.mysql.update('user_list', {\n\t\t\tuser_id: uid,\n\t\t\tuser_name: userName\n\t\t})\n\t\t// // 判断更新成功，user.affectedRows === 1\n\t\tif (user.affectedRows === 1) {\n\t\t\treturn {\n\t\t\t\tmsg: '更新成功',\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tmsg: '更新失败',\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = UserService\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 3、删除数据\n\n删除 user_list 表中数据\n\n/app/controller/list.js 中代码如下：\n\n'use strict';\n\nconst { Controller } = require('egg');\n\nclass ListController extends Controller {\n\tasync delete () {\n\t\tconst { ctx } = this;\n\t\tconst userId = ctx.request.body.userId\n\t\tconst userInfo = await ctx.service.user.delete(userId)\n\t\tctx.body = userInfo\n\t}\n}\n\nmodule.exports = ListController;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n/app/service/user.js 中代码如下：\n\nconst { Service } = require('egg')\n\nclass UserService extends Service {\n\tasync delete (uid) {\n\t\tconst result = await this.app.mysql.delete('user_list', {\n\t\t\tuser_id: uid\n\t\t})\n\t\tif (result.affectedRows === 1) {\n\t\t\treturn {\n\t\t\t\tmsg: '删除成功',\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tmsg: '删除失败',\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = UserService\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 4、增加数据\n\n在 user_list 表中增加数据\n\n/app/controller/list.js 中代码如下：\n\n'use strict';\n\nconst { Controller } = require('egg');\n\nclass ListController extends Controller {\n\tasync addUser () {\n\t\tconst { ctx } = this;\n\t\tconst query = ctx.request.body\n\t\tconst userInfo = await ctx.service.user.addUser(query)\n\t\tctx.body = userInfo\n\t}\n}\n\nmodule.exports = ListController;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n/app/service/user.js 中代码如下：\n\nconst { Service } = require('egg')\n\nclass UserService extends Service {\n\tasync addUser (data) {\n\t\tconst result = await this.app.mysql.insert('user_list', {\n\t\t\tuser_name: data.userName || '',\n\t\t\tuser_tel: data.userTel || ''\n\t\t})\n\t\tif (result.affectedRows === 1) {\n\t\t\treturn {\n\t\t\t\tmsg: '添加数据成功',\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tmsg: '添加数据失败',\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = UserService\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 5、批量插入数据\n\n/app/controller/list.js 中代码如下\n\n'use strict';\n\nconst { Controller } = require('egg');\n\nclass ListController extends Controller {\n\tasync patchAdd () {\n\t\tconst { ctx } = this;\n\t\tconst query = ctx.request.body\n\t\tconst userInfo = await ctx.service.user.patchAdd(query)\n\t\tctx.body = userInfo\n\t}\n}\n\nmodule.exports = ListController;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n/app/service/user.js 中代码如下：\n\nconst { Service } = require('egg')\n\nclass UserService extends Service {\n\tasync patchAdd (data) {\n\t\t/* data数据格式如下\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tuser_tel: xxx,\n\t\t\t\t\tuser_name: xxx\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tuser_tel: xxx,\n\t\t\t\t\tuser_name: xxx\n\t\t\t\t}\n\t\t\t]\n\t\t*/\n\t\tconst arr = []\n\t\tdata.forEach(item => {\n\t\t\tarr.push([item.user_tel,item.user_name])\n\t\t})\n\t\t/* 转换后的arr数据格式如下\n\t\t\t[[user_tel, user_name],[user_tel, user_name]]\n\t\t*/\n\t\tconst result = await this.app.mysql.query(`insert into user_list (user_tel, user_name) values ?`, [arr])\n\t\t/* 或者\n\t\t\tlet telList = []\n\t\t\tlet nameList = []\n\t\t\tdata.forEach(item => {\n\t\t\t\ttelList.push(item.user_tel)\n\t\t\t\tnameList.push(item.user_name)\n\t\t\t})\n\t\t\tconst result = await this.app.mysql.insert('user_list', {\n\t\t\t\tuser_tel: telList,\n\t\t\t\tuser_name: nameList\n\t\t\t})\n\t\t*/\n\t\tif (result.affectedRows === arr.length) {\n\t\t\treturn {\n\t\t\t\tmsg: '批量添加数据成功',\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tmsg: '批量添加数据失败',\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = UserService\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n\n# 6、批量删除数据\n\n/app/controller/list.js 代码如下：\n\n'use strict';\n\nconst { Controller } = require('egg');\n\nclass ListController extends Controller {\n\tasync patchDelete () {\n\t\tconst { ctx } = this;\n\t\tconst query = ctx.request.body\n\t\tconst userInfo = await ctx.service.user.patchDelete(query)\n\t\tctx.body = userInfo\n\t}\n}\n\nmodule.exports = ListController;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n/app/service/user.js 代码如下：\n\nconst { Service } = require('egg')\n\nclass UserService extends Service {\n\tasync patchDelete (data) {\n\t\t// const deleteNum = 11\n\t\t// const result = await this.app.mysql.query(`delete from user_list where user_id > 30 limit ${deleteNum}`)\n\t\t/* data数据格式如下\n\t\t\t[1,2,3,4]\n\t\t*/\n\t\tconst result = await this.app.mysql.delete('user_list', {\n\t\t\tuser_id: data\n\t\t})\n\t\t/* 或者\n\t\tconst deleteStr = data.join(',')\n\t\tconst result = await this.app.mysql.query(`delete from user_list where user_id in (${deleteStr})`)\n\t\t*/\n\t\tif (result.affectedRows === data.length) {\n\t\t\treturn {\n\t\t\t\tmsg: '批量删除成功',\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tmsg: '批量删除失败',\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = UserService\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 7、批量更新数据\n\n例如，批量审核通过或拒绝数据操作\n\n/app/controller/list.js 代码如下：\n\n'use strict';\n\nconst { Controller } = require('egg');\n\nclass ListController extends Controller {\n\tasync patchUpdate () {\n\t\tconst {ctx} = this\n\t\tconst ids = ctx.request.body.ids\n\t\tconst type = ctx.request.body.isPass\n\t\tconst userInfo = await ctx.service.user.patchUpdate(ids, type)\n\t\tctx.body = userInfo\n\t}\n}\n\nmodule.exports = ListController;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n/app/service/user.js 代码如下：\n\nconst { Service } = require('egg')\n\nclass UserService extends Service {\n\tasync patchUpdate (data, type) {\n\t\t// 如果type为true表示通过，status更改为1，否则更改status为0\n\t\tconst status = type ? 1 : 0\n\t\tconst result = await this.app.mysql.update('user_list', {\n\t\t\t\tstatus\n\t\t\t}, {\n\t\t\t\twhere: {\n\t\t\t\t\tuser_id: data\n\t\t\t\t}\n\t\t\t})\n\t\t/* 或者\n\t\t\tconst ids = data.join(',')\n\t\t\tconst result = await this.app.mysql.query(`update user_list set status = ${status} where user_id in (${ids})`)\n\t\t*/\n\t\tif (result.affectedRows === data.length) {\n\t\t\treturn {\n\t\t\t\tmsg: '批量更新成功',\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tmsg: '批量更新失败',\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = UserService\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\nps:\n如果是批量操作多条数据，那么判断是否操作成功的条件是 affectedRows 是否等于批量操作数据的长度，是的话则表示操作成功。",normalizedContent:"/app/router.js 文件如下（含增、删、改、查）：\n\n'use strict';\n\n/**\n * @param {egg.application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller, middleware } = app;\n  router.post('/getlist',  controller.list.getlist)       // 查找\n  router.post('/updatelist', controller.list.updatelist)  // 更新\n  router.post('/delete', controller.list.delete)          // 删除\n  router.post('/adduser', controller.list.adduser)        // 添加\n  router.post('/patchadd', controller.list.patchadd)      // 批量添加\n  router.post('/patchdelete', controller.list.patchdelete)// 批量删除\n  router.post('/patchupdate', controller.list.patchupdate)// 批量更新\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 1、查找数据\n\n\n# (1)、查找 user_list 表中指定 user_id 的用户\n\n/app/controller/list.js 中代码如下：\n\n'use strict';\n\nconst { controller } = require('egg');\n\nclass listcontroller extends controller {\n\tasync getlist () {\n\t\tconst { ctx } = this;\n\t\tconst userid = ctx.request.body.userid\n\t\tconst userinfo = await ctx.service.user.find(userid)\n\t\tctx.body = userinfo\n\t}\n}\n\nmodule.exports = listcontroller;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n/app/service/user.js 中代码如下：\n\nconst { service } = require('egg')\n\nclass userservice extends service {\n\tasync find(uid) {\n\t\tif (uid) {\n\t\t\tconst user = await this.app.mysql.get('user_list', {user_id: uid})\n\t\t\treturn user\n\t\t} else {\n\t\t\tconst user = await this.app.mysql.query(`select * from user_list`)\n\t\t\treturn user\n\t\t}\n\t\t//方法1 const user = await this.app.mysql.get('user_list', {user_id: uid})\n\t\t\n\t\t/*方法2 \n\t\tconst user = await this.app.mysql.select('user_list', {\n\t\t\twhere: {\n\t\t\t\tuser_id: uid\n\t\t\t}\n\t\t})\n\t\t*/\n\t\t//方法3,直接执行sql语句，不推荐，容易引起sql注入 \n\t\t/* \n\t\tconst user = await this.app.mysql.query(`select * from user_list where user_id = ${uid}`)\n\t\t*/\n\t}\n}\n\nmodule.exports = userservice\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# (2)、查找 user_list 表中所有用户\n\n/app/service/user.js 中代码如下：\n\nconst { service } = require('egg')\n\nclass userservice extends service {\n\tasync find(uid) {\n\t\tconst user = await this.app.mysql.select('user_list', {})\n\t\treturn user\n\t\t//或者 const user = await this.app.mysql.query(`select * from user_list`)\n\t}\n}\n\nmodule.exports = userservice\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 2、更新数据\n\n修改 user_list 表中数据\n\n/app/controller/list.js 文件代码如下：\n\n'use strict';\n\nconst { controller } = require('egg');\n\nclass listcontroller extends controller {\n\tasync updatelist () {\n\t\tconst { ctx } = this;\n\t\tconst userid = ctx.request.body.userid\n\t\tconst username = ctx.request.body.username\n\t\tconst userinfo = await ctx.service.user.update(userid, username)\n\t\tctx.body = userinfo\n\t}\n}\n\nmodule.exports = listcontroller;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n/app/service/user.js 文件如下：\n\nconst { service } = require('egg')\n\nclass userservice extends service {\n\tasync update(uid, username) {\n\t\t// 如果主键是自定义的 id 名称，如 custom_id，则需要在 `where` 里面配置\n\t\t// const user = await this.app.mysql.update('user_list', {\n\t\t// \tuser_name: username\n\t\t// }, {\n\t\t// \twhere: {\n\t\t// \t\tuser_id: uid\n\t\t// \t}\n\t\t// })\n\t\t// 或者, 根据主键 id 查找，并更新\n\t\tconst user = await this.app.mysql.update('user_list', {\n\t\t\tuser_id: uid,\n\t\t\tuser_name: username\n\t\t})\n\t\t// // 判断更新成功，user.affectedrows === 1\n\t\tif (user.affectedrows === 1) {\n\t\t\treturn {\n\t\t\t\tmsg: '更新成功',\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tmsg: '更新失败',\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = userservice\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 3、删除数据\n\n删除 user_list 表中数据\n\n/app/controller/list.js 中代码如下：\n\n'use strict';\n\nconst { controller } = require('egg');\n\nclass listcontroller extends controller {\n\tasync delete () {\n\t\tconst { ctx } = this;\n\t\tconst userid = ctx.request.body.userid\n\t\tconst userinfo = await ctx.service.user.delete(userid)\n\t\tctx.body = userinfo\n\t}\n}\n\nmodule.exports = listcontroller;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n/app/service/user.js 中代码如下：\n\nconst { service } = require('egg')\n\nclass userservice extends service {\n\tasync delete (uid) {\n\t\tconst result = await this.app.mysql.delete('user_list', {\n\t\t\tuser_id: uid\n\t\t})\n\t\tif (result.affectedrows === 1) {\n\t\t\treturn {\n\t\t\t\tmsg: '删除成功',\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tmsg: '删除失败',\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = userservice\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 4、增加数据\n\n在 user_list 表中增加数据\n\n/app/controller/list.js 中代码如下：\n\n'use strict';\n\nconst { controller } = require('egg');\n\nclass listcontroller extends controller {\n\tasync adduser () {\n\t\tconst { ctx } = this;\n\t\tconst query = ctx.request.body\n\t\tconst userinfo = await ctx.service.user.adduser(query)\n\t\tctx.body = userinfo\n\t}\n}\n\nmodule.exports = listcontroller;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n/app/service/user.js 中代码如下：\n\nconst { service } = require('egg')\n\nclass userservice extends service {\n\tasync adduser (data) {\n\t\tconst result = await this.app.mysql.insert('user_list', {\n\t\t\tuser_name: data.username || '',\n\t\t\tuser_tel: data.usertel || ''\n\t\t})\n\t\tif (result.affectedrows === 1) {\n\t\t\treturn {\n\t\t\t\tmsg: '添加数据成功',\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tmsg: '添加数据失败',\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = userservice\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 5、批量插入数据\n\n/app/controller/list.js 中代码如下\n\n'use strict';\n\nconst { controller } = require('egg');\n\nclass listcontroller extends controller {\n\tasync patchadd () {\n\t\tconst { ctx } = this;\n\t\tconst query = ctx.request.body\n\t\tconst userinfo = await ctx.service.user.patchadd(query)\n\t\tctx.body = userinfo\n\t}\n}\n\nmodule.exports = listcontroller;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n/app/service/user.js 中代码如下：\n\nconst { service } = require('egg')\n\nclass userservice extends service {\n\tasync patchadd (data) {\n\t\t/* data数据格式如下\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tuser_tel: xxx,\n\t\t\t\t\tuser_name: xxx\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tuser_tel: xxx,\n\t\t\t\t\tuser_name: xxx\n\t\t\t\t}\n\t\t\t]\n\t\t*/\n\t\tconst arr = []\n\t\tdata.foreach(item => {\n\t\t\tarr.push([item.user_tel,item.user_name])\n\t\t})\n\t\t/* 转换后的arr数据格式如下\n\t\t\t[[user_tel, user_name],[user_tel, user_name]]\n\t\t*/\n\t\tconst result = await this.app.mysql.query(`insert into user_list (user_tel, user_name) values ?`, [arr])\n\t\t/* 或者\n\t\t\tlet tellist = []\n\t\t\tlet namelist = []\n\t\t\tdata.foreach(item => {\n\t\t\t\ttellist.push(item.user_tel)\n\t\t\t\tnamelist.push(item.user_name)\n\t\t\t})\n\t\t\tconst result = await this.app.mysql.insert('user_list', {\n\t\t\t\tuser_tel: tellist,\n\t\t\t\tuser_name: namelist\n\t\t\t})\n\t\t*/\n\t\tif (result.affectedrows === arr.length) {\n\t\t\treturn {\n\t\t\t\tmsg: '批量添加数据成功',\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tmsg: '批量添加数据失败',\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = userservice\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n\n# 6、批量删除数据\n\n/app/controller/list.js 代码如下：\n\n'use strict';\n\nconst { controller } = require('egg');\n\nclass listcontroller extends controller {\n\tasync patchdelete () {\n\t\tconst { ctx } = this;\n\t\tconst query = ctx.request.body\n\t\tconst userinfo = await ctx.service.user.patchdelete(query)\n\t\tctx.body = userinfo\n\t}\n}\n\nmodule.exports = listcontroller;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n/app/service/user.js 代码如下：\n\nconst { service } = require('egg')\n\nclass userservice extends service {\n\tasync patchdelete (data) {\n\t\t// const deletenum = 11\n\t\t// const result = await this.app.mysql.query(`delete from user_list where user_id > 30 limit ${deletenum}`)\n\t\t/* data数据格式如下\n\t\t\t[1,2,3,4]\n\t\t*/\n\t\tconst result = await this.app.mysql.delete('user_list', {\n\t\t\tuser_id: data\n\t\t})\n\t\t/* 或者\n\t\tconst deletestr = data.join(',')\n\t\tconst result = await this.app.mysql.query(`delete from user_list where user_id in (${deletestr})`)\n\t\t*/\n\t\tif (result.affectedrows === data.length) {\n\t\t\treturn {\n\t\t\t\tmsg: '批量删除成功',\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tmsg: '批量删除失败',\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = userservice\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 7、批量更新数据\n\n例如，批量审核通过或拒绝数据操作\n\n/app/controller/list.js 代码如下：\n\n'use strict';\n\nconst { controller } = require('egg');\n\nclass listcontroller extends controller {\n\tasync patchupdate () {\n\t\tconst {ctx} = this\n\t\tconst ids = ctx.request.body.ids\n\t\tconst type = ctx.request.body.ispass\n\t\tconst userinfo = await ctx.service.user.patchupdate(ids, type)\n\t\tctx.body = userinfo\n\t}\n}\n\nmodule.exports = listcontroller;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n/app/service/user.js 代码如下：\n\nconst { service } = require('egg')\n\nclass userservice extends service {\n\tasync patchupdate (data, type) {\n\t\t// 如果type为true表示通过，status更改为1，否则更改status为0\n\t\tconst status = type ? 1 : 0\n\t\tconst result = await this.app.mysql.update('user_list', {\n\t\t\t\tstatus\n\t\t\t}, {\n\t\t\t\twhere: {\n\t\t\t\t\tuser_id: data\n\t\t\t\t}\n\t\t\t})\n\t\t/* 或者\n\t\t\tconst ids = data.join(',')\n\t\t\tconst result = await this.app.mysql.query(`update user_list set status = ${status} where user_id in (${ids})`)\n\t\t*/\n\t\tif (result.affectedrows === data.length) {\n\t\t\treturn {\n\t\t\t\tmsg: '批量更新成功',\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tmsg: '批量更新失败',\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: []\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = userservice\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\nps:\n如果是批量操作多条数据，那么判断是否操作成功的条件是 affectedrows 是否等于批量操作数据的长度，是的话则表示操作成功。",charsets:{cjk:!0}},{title:"上传图片到项目指定文件夹下",frontmatter:{title:"上传图片到项目指定文件夹下",date:"2023-07-20T18:23:22.000Z",permalink:"/pages/858357/",categories:["《NodeJs》","Egg"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/03.Egg/05.%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E9%A1%B9%E7%9B%AE%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B.html",relativePath:"《NodeJs》笔记/03.Egg/05.上传图片到项目指定文件夹下.md",key:"v-92062b1e",path:"/pages/858357/",headers:[{level:2,title:"上传单个文件之Stream模式",slug:"上传单个文件之stream模式",normalizedTitle:"上传单个文件之 stream 模式",charIndex:2}],lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:"上传单个文件之Stream模式",content:"# 上传单个文件之 Stream 模式\n\n前端 html 代码：\n\n<form\n  method=\"POST\"\n  action=\"http://127.0.0.1:7003/upload\"\n  enctype=\"multipart/form-data\"\n>\n  title: <input name=\"title\" /> file: <input name=\"file\" type=\"file\" />\n  <button type=\"submit\">Upload</button>\n</form>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n安装 mz-modules 模块\n\nnpm install mz-modules -S\n\n\n1\n\n\n在 config.default.js 中配置如下：\n\nconfig.multipart = {\n  // 只允许上传的图片格式，如果上传过程中报错Invalid filename，可能是上传的文件格式不在白名单中，如果是上传excel文件，则白名单中可添加'.xlsx'\n  whitelist: [ '.svg', '.png', '.jpg', '.jpeg', '.webp' ],\n  // 文件允许大小\n  fileSize: '500mb',\n  // 上传文件方式\n  mode: 'stream',\n  // 上传文件个数\n  fields: '100',\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n在 /app/controller/upload.js 中代码如下：\n\n\"use strict\";\n\nconst controller = require(\"egg\").Controller\nconst fs = require(\"fs\")\nconst path = require(\"path\")\nconst Pump = require('mz-modules/pump');  // 用来将文件存储在本地\nconst sendToWormhole = require('stream-wormhole');\n\n\nclass uploadController extends controller {\n\tasync index () {\n\t\tconst { ctx, config } = this;\n\t\tconst stream = await ctx.getFileStream();\n\t\t// 上传图片到指定的目录\n\t\tconst filename = `image_${Date.now()}.${stream.filename.split('.').pop()}`;\n\t\tconst target = path.join(__dirname, '../public', filename)\n\t\tconst writeStream = fs.createWriteStream(target);\n\t\ttry {\n\t\t  await Pump(stream, writeStream);\n\t\t} catch(err) {\n\t\t  // 必须将上传的文件流消费掉，要不然浏览器响应会卡死\n\t\t  await sendToWormhole(stream);\n\t\t  throw err;\n\t\t}\n\t\t// 返回上传成功的信息\n\t\tctx.body = {\n\t\t  code: 200,\n\t\t  message: '上传成功',\n\t\t  data: {\n\t\t    filename,\n\t\t  },\n\t\t};\n\t}\n}\n\nmodule.exports = uploadController\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n在 /app/router.js 中代码如下：\n\n'use strict';\n\n/**\n * @param {Egg.Application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller } = app;\n  router.post('/upload', controller.upload.index)\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n现在上传图片后会发现在本地项目的 app/public 文件夹下多了刚上传的图片，使用 http://127.0.0.1:7003 + '/public/' + 图片名即可，例如\n\n\n上面是将图片上传到已存在的目录文件夹下，如果想要上传到不存在的文件夹，那么需要先新建文件夹，这里需要使用到 mkdirp 插件，这是一款文件夹处理工具，可递归创建目录及其子目录。\n\n安装插件 mkdirp\n\nnpm install mkdirp -S\n\n\n1\n\n\n引入 mkdirp，创建目录，然后上传，此时 /app/controller/upload.js 文件代码如下：\n\n\"use strict\";\n\nconst controller = require(\"egg\").Controller\nconst fs = require(\"fs\")\nconst path = require(\"path\")\nconst { mkdirp } = require('mkdirp') // 引入文件夹处理工具\nconst Pump = require('mz-modules/pump');\nconst sendToWormhole = require('stream-wormhole');\n\n\nclass uploadController extends controller {\n\tasync index () {\n\t\tconst { ctx, config } = this;\n\t\tconst stream = await ctx.getFileStream();\n\t\tconst target = path.join(__dirname, '../public/upload')\n\t\t// 3、创建目录\n\t\tawait mkdirp(target);\n\t\t// 上传图片到指定的目录\n\t\tconst filename = `image_${Date.now()}.${stream.filename.split('.').pop()}`;\n\t\tconst end = path.join(__dirname, '../public/upload', filename)\n\t\tconst writeStream = fs.createWriteStream(end);\n\t\ttry {\n\t\t  await Pump(stream, writeStream);\n\t\t} catch(err) {\n\t\t  // 必须将上传的文件流消费掉，要不然浏览器响应会卡死\n\t\t  await sendToWormhole(stream);\n\t\t  throw err;\n\t\t}\n\t\tconsole.log('end', end)\n\t\t// 返回上传成功的信息\n\t\tctx.body = {\n\t\t  code: 200,\n\t\t  message: '上传成功',\n\t\t  data: {\n\t\t    file: end  // 返回文件路径\n\t\t  },\n\t\t};\n\t}\n}\n\nmodule.exports = uploadController\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n然后就可以上传图片了。",normalizedContent:"# 上传单个文件之 stream 模式\n\n前端 html 代码：\n\n<form\n  method=\"post\"\n  action=\"http://127.0.0.1:7003/upload\"\n  enctype=\"multipart/form-data\"\n>\n  title: <input name=\"title\" /> file: <input name=\"file\" type=\"file\" />\n  <button type=\"submit\">upload</button>\n</form>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n安装 mz-modules 模块\n\nnpm install mz-modules -s\n\n\n1\n\n\n在 config.default.js 中配置如下：\n\nconfig.multipart = {\n  // 只允许上传的图片格式，如果上传过程中报错invalid filename，可能是上传的文件格式不在白名单中，如果是上传excel文件，则白名单中可添加'.xlsx'\n  whitelist: [ '.svg', '.png', '.jpg', '.jpeg', '.webp' ],\n  // 文件允许大小\n  filesize: '500mb',\n  // 上传文件方式\n  mode: 'stream',\n  // 上传文件个数\n  fields: '100',\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n在 /app/controller/upload.js 中代码如下：\n\n\"use strict\";\n\nconst controller = require(\"egg\").controller\nconst fs = require(\"fs\")\nconst path = require(\"path\")\nconst pump = require('mz-modules/pump');  // 用来将文件存储在本地\nconst sendtowormhole = require('stream-wormhole');\n\n\nclass uploadcontroller extends controller {\n\tasync index () {\n\t\tconst { ctx, config } = this;\n\t\tconst stream = await ctx.getfilestream();\n\t\t// 上传图片到指定的目录\n\t\tconst filename = `image_${date.now()}.${stream.filename.split('.').pop()}`;\n\t\tconst target = path.join(__dirname, '../public', filename)\n\t\tconst writestream = fs.createwritestream(target);\n\t\ttry {\n\t\t  await pump(stream, writestream);\n\t\t} catch(err) {\n\t\t  // 必须将上传的文件流消费掉，要不然浏览器响应会卡死\n\t\t  await sendtowormhole(stream);\n\t\t  throw err;\n\t\t}\n\t\t// 返回上传成功的信息\n\t\tctx.body = {\n\t\t  code: 200,\n\t\t  message: '上传成功',\n\t\t  data: {\n\t\t    filename,\n\t\t  },\n\t\t};\n\t}\n}\n\nmodule.exports = uploadcontroller\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n在 /app/router.js 中代码如下：\n\n'use strict';\n\n/**\n * @param {egg.application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller } = app;\n  router.post('/upload', controller.upload.index)\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n现在上传图片后会发现在本地项目的 app/public 文件夹下多了刚上传的图片，使用 http://127.0.0.1:7003 + '/public/' + 图片名即可，例如\n\n\n上面是将图片上传到已存在的目录文件夹下，如果想要上传到不存在的文件夹，那么需要先新建文件夹，这里需要使用到 mkdirp 插件，这是一款文件夹处理工具，可递归创建目录及其子目录。\n\n安装插件 mkdirp\n\nnpm install mkdirp -s\n\n\n1\n\n\n引入 mkdirp，创建目录，然后上传，此时 /app/controller/upload.js 文件代码如下：\n\n\"use strict\";\n\nconst controller = require(\"egg\").controller\nconst fs = require(\"fs\")\nconst path = require(\"path\")\nconst { mkdirp } = require('mkdirp') // 引入文件夹处理工具\nconst pump = require('mz-modules/pump');\nconst sendtowormhole = require('stream-wormhole');\n\n\nclass uploadcontroller extends controller {\n\tasync index () {\n\t\tconst { ctx, config } = this;\n\t\tconst stream = await ctx.getfilestream();\n\t\tconst target = path.join(__dirname, '../public/upload')\n\t\t// 3、创建目录\n\t\tawait mkdirp(target);\n\t\t// 上传图片到指定的目录\n\t\tconst filename = `image_${date.now()}.${stream.filename.split('.').pop()}`;\n\t\tconst end = path.join(__dirname, '../public/upload', filename)\n\t\tconst writestream = fs.createwritestream(end);\n\t\ttry {\n\t\t  await pump(stream, writestream);\n\t\t} catch(err) {\n\t\t  // 必须将上传的文件流消费掉，要不然浏览器响应会卡死\n\t\t  await sendtowormhole(stream);\n\t\t  throw err;\n\t\t}\n\t\tconsole.log('end', end)\n\t\t// 返回上传成功的信息\n\t\tctx.body = {\n\t\t  code: 200,\n\t\t  message: '上传成功',\n\t\t  data: {\n\t\t    file: end  // 返回文件路径\n\t\t  },\n\t\t};\n\t}\n}\n\nmodule.exports = uploadcontroller\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n然后就可以上传图片了。",charsets:{cjk:!0}},{title:"实现接口API并连接mysql数据库",frontmatter:{title:"实现接口API并连接mysql数据库",date:"2023-07-12T15:14:17.000Z",permalink:"/pages/d9909a/",categories:["《NodeJs》","Egg"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/03.Egg/02.Egg%E4%B9%8B%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3API%E5%B9%B6%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93.html",relativePath:"《NodeJs》笔记/03.Egg/02.Egg之实现接口API并连接mysql数据库.md",key:"v-cfc880be",path:"/pages/d9909a/",headers:[{level:2,title:"1、安装插件egg-mysql",slug:"_1、安装插件egg-mysql",normalizedTitle:"1、安装插件 egg-mysql",charIndex:43},{level:2,title:"2、在/app/config/plugin.js中开启插件：",slug:"_2、在-app-config-plugin-js中开启插件",normalizedTitle:"2、在 /app/config/plugin.js 中开启插件：",charIndex:95},{level:2,title:"3、在/app/config/config.${env}.js中配置各个环境的数据库连接信息:",slug:"_3、在-app-config-config-env-js中配置各个环境的数据库连接信息",normalizedTitle:"3、在 /app/config/config.${env}.js 中配置各个环境的数据库连接信息:",charIndex:195},{level:3,title:"(1)、单数据源：如果我们的应用只需要访问一个MySQL数据库实例。",slug:"_1-、单数据源-如果我们的应用只需要访问一个mysql数据库实例。",normalizedTitle:"(1)、单数据源：如果我们的应用只需要访问一个 mysql 数据库实例。",charIndex:250},{level:3,title:"(2)、多数据源：如果我们的应用需要访问多个 MySQL 数据源。",slug:"_2-、多数据源-如果我们的应用需要访问多个-mysql-数据源。",normalizedTitle:"(2)、多数据源：如果我们的应用需要访问多个 mysql 数据源。",charIndex:664},{level:2,title:"4、编写RESTful API并实现数据库连接",slug:"_4、编写restful-api并实现数据库连接",normalizedTitle:"4、编写 restful api 并实现数据库连接",charIndex:1537}],lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:"1、安装插件egg-mysql 2、在/app/config/plugin.js中开启插件： 3、在/app/config/config.${env}.js中配置各个环境的数据库连接信息: (1)、单数据源：如果我们的应用只需要访问一个MySQL数据库实例。 (2)、多数据源：如果我们的应用需要访问多个 MySQL 数据源。 4、编写RESTful API并实现数据库连接",content:"在 egg 中，提供了 egg-mysql 插件来访问 mysql 数据库。\n\n\n# 1、安装插件 egg-mysql\n\nnpm install egg-mysql -S\n\n\n1\n\n\n\n# 2、在 /app/config/plugin.js 中开启插件：\n\nmysql: {\n  enable: true,\n  package: 'egg-mysql',\n}\n\n\n1\n2\n3\n4\n\n\n\n# 3、在 /app/config/config.${env}.js 中配置各个环境的数据库连接信息:\n\n\n\n# (1)、单数据源：如果我们的应用只需要访问一个 MySQL 数据库实例。\n\n// config/config.default.js\nconfig.mysql = {\n  // 单数据库信息配置\n  client: {\n    // host\n    host: 'localhost',\n    // 端口号\n    port: '3306',\n    // 用户名\n    user: 'root',\n    // 密码\n    password: '12345678',\n    // 数据库名\n    database: 'runoob',\n  },\n  // 是否加载到 app 上，默认开启\n  app: true,\n  // 是否加载到 agent 上，默认关闭\n  agent: false,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# (2)、多数据源：如果我们的应用需要访问多个 MySQL 数据源。\n\n// config/config.default.js\nconfig.mysql = {\n\tclients: {\n\t  // clientId, 获取client实例，需要通过 app.mysql.get('clientId') 获取\n\t  db1: {\n\t    // host\n\t    host: 'mysql.com',\n\t    // 端口号\n\t    port: '3306',\n\t    // 用户名\n\t    user: 'test_user',\n\t    // 密码\n\t    password: 'test_password',\n\t    // 数据库名\n\t    database: 'test',\n\t  },\n\t  db2: {\n\t    // host\n\t    host: 'mysql2.com',\n\t    // 端口号\n\t    port: '3307',\n\t    // 用户名\n\t    user: 'test_user',\n\t    // 密码\n\t    password: 'test_password',\n\t    // 数据库名\n\t    database: 'test',\n\t  },\n\t  // ...\n\t},\n\t// 所有数据库配置的默认值\n\tdefault: {},\n\n\t// 是否加载到 app 上，默认开启\n\tapp: true,\n\t// 是否加载到 agent 上，默认关闭\n\tagent: false,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n使用方式：\n\nconst client1 = app.mysql.get('db1');\nconst client2 = app.mysql.get('db2');\n\n\n1\n2\n\n\n\n# 4、编写 RESTful API 并实现数据库连接\n\n在 /app/controller 下新建 list.js 文件：\n\n'use strict';\n\nconst { Controller } = require('egg');\n\nclass ListController extends Controller {\n\tasync getList () {\n\t\tconst { ctx } = this;\n\t\tconst userId = ctx.request.body.userId\n\t\t// 其中user表示/app/service下的user.js文件，find表示user.js文件中的find方法\n\t\tconst userInfo = await ctx.service.user.find(userId) \n\t\tctx.body = userInfo\n\t}\n}\n\nmodule.exports = ListController;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n在 /app/service 下新建 user.js 文件:\n\nconst { Service } = require('egg')\n\nclass UserService extends Service {\n\tasync find(uid) {\n\t\t// user_list是表名称\n\t\t// const user = await this.app.mysql.get('user_list', {user_id: uid})\n\t\tconst user = await this.app.mysql.select('user_list', {\n\t\t\twhere: {\n\t\t\t\tuser_id: uid\n\t\t\t}\n\t\t})\n\t\treturn user\n\t}\n}\n\nmodule.exports = UserService\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n在 /app/router.js 文件中配置如下：\n\n'use strict';\n\n/**\n * @param {Egg.Application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller } = app;\n  router.post('/getList',  controller.list.getList)\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n至此，准备工作均已完成，接下来启动项目，启动数据库，在 Postman 中模拟该请求，即可从数据库中获取到 user_id 为 10 的用户:\n\n\nps:\n\n * get 请求参数获取，可使用 ctx.request.query 或 ctx.query\n * post 请求参数获取，使用 ctx.request.body\n * ctx.body 相当于 ctx.response.body，而不是 ctx.request.body 的简写哦。",normalizedContent:"在 egg 中，提供了 egg-mysql 插件来访问 mysql 数据库。\n\n\n# 1、安装插件 egg-mysql\n\nnpm install egg-mysql -s\n\n\n1\n\n\n\n# 2、在 /app/config/plugin.js 中开启插件：\n\nmysql: {\n  enable: true,\n  package: 'egg-mysql',\n}\n\n\n1\n2\n3\n4\n\n\n\n# 3、在 /app/config/config.${env}.js 中配置各个环境的数据库连接信息:\n\n\n\n# (1)、单数据源：如果我们的应用只需要访问一个 mysql 数据库实例。\n\n// config/config.default.js\nconfig.mysql = {\n  // 单数据库信息配置\n  client: {\n    // host\n    host: 'localhost',\n    // 端口号\n    port: '3306',\n    // 用户名\n    user: 'root',\n    // 密码\n    password: '12345678',\n    // 数据库名\n    database: 'runoob',\n  },\n  // 是否加载到 app 上，默认开启\n  app: true,\n  // 是否加载到 agent 上，默认关闭\n  agent: false,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# (2)、多数据源：如果我们的应用需要访问多个 mysql 数据源。\n\n// config/config.default.js\nconfig.mysql = {\n\tclients: {\n\t  // clientid, 获取client实例，需要通过 app.mysql.get('clientid') 获取\n\t  db1: {\n\t    // host\n\t    host: 'mysql.com',\n\t    // 端口号\n\t    port: '3306',\n\t    // 用户名\n\t    user: 'test_user',\n\t    // 密码\n\t    password: 'test_password',\n\t    // 数据库名\n\t    database: 'test',\n\t  },\n\t  db2: {\n\t    // host\n\t    host: 'mysql2.com',\n\t    // 端口号\n\t    port: '3307',\n\t    // 用户名\n\t    user: 'test_user',\n\t    // 密码\n\t    password: 'test_password',\n\t    // 数据库名\n\t    database: 'test',\n\t  },\n\t  // ...\n\t},\n\t// 所有数据库配置的默认值\n\tdefault: {},\n\n\t// 是否加载到 app 上，默认开启\n\tapp: true,\n\t// 是否加载到 agent 上，默认关闭\n\tagent: false,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n使用方式：\n\nconst client1 = app.mysql.get('db1');\nconst client2 = app.mysql.get('db2');\n\n\n1\n2\n\n\n\n# 4、编写 restful api 并实现数据库连接\n\n在 /app/controller 下新建 list.js 文件：\n\n'use strict';\n\nconst { controller } = require('egg');\n\nclass listcontroller extends controller {\n\tasync getlist () {\n\t\tconst { ctx } = this;\n\t\tconst userid = ctx.request.body.userid\n\t\t// 其中user表示/app/service下的user.js文件，find表示user.js文件中的find方法\n\t\tconst userinfo = await ctx.service.user.find(userid) \n\t\tctx.body = userinfo\n\t}\n}\n\nmodule.exports = listcontroller;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n在 /app/service 下新建 user.js 文件:\n\nconst { service } = require('egg')\n\nclass userservice extends service {\n\tasync find(uid) {\n\t\t// user_list是表名称\n\t\t// const user = await this.app.mysql.get('user_list', {user_id: uid})\n\t\tconst user = await this.app.mysql.select('user_list', {\n\t\t\twhere: {\n\t\t\t\tuser_id: uid\n\t\t\t}\n\t\t})\n\t\treturn user\n\t}\n}\n\nmodule.exports = userservice\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n在 /app/router.js 文件中配置如下：\n\n'use strict';\n\n/**\n * @param {egg.application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller } = app;\n  router.post('/getlist',  controller.list.getlist)\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n至此，准备工作均已完成，接下来启动项目，启动数据库，在 postman 中模拟该请求，即可从数据库中获取到 user_id 为 10 的用户:\n\n\nps:\n\n * get 请求参数获取，可使用 ctx.request.query 或 ctx.query\n * post 请求参数获取，使用 ctx.request.body\n * ctx.body 相当于 ctx.response.body，而不是 ctx.request.body 的简写哦。",charsets:{cjk:!0}},{title:"egg-jwt登录鉴权",frontmatter:{title:"egg-jwt登录鉴权",date:"2023-07-14T16:15:59.000Z",permalink:"/pages/2bef2d/",categories:["《NodeJs》","Egg"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/03.Egg/04.egg-jwt%E7%99%BB%E5%BD%95%E9%89%B4%E6%9D%83.html",relativePath:"《NodeJs》笔记/03.Egg/04.egg-jwt登录鉴权.md",key:"v-2b4726f4",path:"/pages/2bef2d/",lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:null,content:"1、安装 egg-jwt\n\nnpm install egg-jwt -S\n\n\n1\n\n\n2、配置 plugin.js\n\njwt: {\n  enable: true,\n  package: 'egg-jwt',\n}\n\n\n1\n2\n3\n4\n\n\n3、在 config.default.js 中配置\n\nconfig.jwt = {\n  secret: '123456', // secret为加密密钥\n  // expiresIn为token过期时间,数值的话单位为秒，如果是字符串的话，除非提供\"2 days\", \"10h\", \"7d\"这种，否则单位为毫秒\n  expiresIn: 10 * 60,  \n}\n\n\n1\n2\n3\n4\n5\n\n\n准备工作完成，现在来分析登录鉴权的流程。\n\n例如这样一个场景，用户输入手机号、密码登录后台，首先后端应该判断手机号、密码是否正确，如果正确，则根据手机号跟密码生成一个 token，假定 1 天，然后将该 token 下发到前端，前端存储该 token，然后进入到后台其他页面，访问接口时将 token 传给服务端，服务端判断该 token 是否过期，以及是否对应当前用户，如果都满足的话则正常返回数据，否则告诉用户 token 已过期，需要重新登录。\n\n首先编写一个生成 token 的工具函数，在 /app/utils/token.js 中编写如下：\n\n// 记住，这里使用require跟exports，如果使用import和export default的话会报错。\nconst jwt = require(\"jsonwebtoken\")\n\n// 生成token\nexports.sign = function (data, secret, expireIn) {\n\treturn jwt.sign(data, secret, { expiresIn: expireIn });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n接着，在 /app/controller/login.js 中编写如下：\n\n'use strict';\n\nconst { Controller } = require('egg')\nconst getToken = require('../utils/token')\n\nclass LoginController extends Controller {\n\tasync login () {\n\t\tconst { ctx } = this\n\t\tconst secret = ctx.app.config.jwt.secret\n\t\tconst expiresIn = ctx.app.config.jwt.expiresIn\n\t\tconst { tel, password } = ctx.request.body\t\n\t\tlet userInfo = await ctx.service.user.findUser(tel, password)\n\t\tif (userInfo && userInfo.length) {\n\t\t\tconst token = getToken.sign({tel, password}, secret, expiresIn)\n\t\t\tctx.body = {\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: {\n\t\t\t\t\ttel: tel,\n\t\t\t\t\tuserName: userInfo[0].user_name,\n\t\t\t\t\ttoken: token\n\t\t\t\t},\n\t\t\t\tmsg: '成功'\n\t\t\t}\n\t\t} else {\n\t\t\tctx.body = {\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: null,\n\t\t\t\tmsg: '手机号或密码错误'\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = LoginController\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n在 app/service/user.js 中代码如下：\n\nconst { Service } = require('egg')\n\nclass UserService extends Service {\n\tasync find(uid) {\n\t\tif (uid) {\n\t\t\tconst user = await this.app.mysql.select('user_list', {\n\t\t\t\twhere: {\n\t\t\t\t\tuser_id: uid\n\t\t\t\t}\n\t\t\t})\n\t\t\tif (user) {\n\t\t\t\treturn user\n\t\t\t} else {\n\t\t\t\treturn []\n\t\t\t}\n\t\t} else {\n\t\t\tconst user = await this.app.mysql.select('user_list')\n\t\t\t// const user = await this.app.mysql.query(`select * from user_list`)\n\t\t\tif (user) {\n\t\t\t\treturn user\n\t\t\t} else {\n\t\t\t\treturn []\n\t\t\t}\n\t\t}\n\t\t// const user = await this.app.mysql.get('user_list', {user_id: uid})\n\t\t// return user\n\t}\n\tasync findUser (tel, password) {\n\t\tconst user = await this.app.mysql.select('user', {\n\t\t\twhere: {tel: tel, password: password}\n\t\t})\n\t\tif (user) {\n\t\t\treturn user\n\t\t} else {\n\t\t\treturn []\n\t\t}\n\t}\n}\n\nmodule.exports = UserService\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n在 /app/router.js 中代码如下：\n\n'use strict';\n\n/**\n * @param {Egg.Application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller, middleware } = app;\n  router.post('/', controller.login.login);\n  router.post('/getList',  controller.list.getList)\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n至此，登录及访问列表页接口已经完成，但是此时还没有鉴权，不管用户访问接口时是否传 token 都能正常访问数据。\n\n要完成鉴权工作，还需要通过中间件来完成。\n\n在 /app/middleware/checkToken.js 中代码如下：\n\nmodule.exports = (secret) => {\n\treturn async function (ctx, next) {\n\t\t// 若是没有 token，返回的是 null 字符串，前端访问接口时需在header中携带token和userid\n\t\tconst token = ctx.request.header.authorization;\n\t\tconst userId = ctx.request.header.userid\n\t\tif (!userId) {\n\t\t  ctx.status = 200;\n\t\t  ctx.body = {\n\t\t    status: 401,\n\t\t    msg: 'userId不存在'\n\t\t  };\n\t\t  return false\n\t\t}\n\t\tif (token && token !== null) {\n\t\t\t// 有token需要校验\n\t\t\ttry {\n\t\t\t\tlet decode = ctx.app.jwt.verify(token, secret);\n\t\t\t\tif (decode.tel) {\n\t\t\t\t  // 去数据库查找用户\n\t\t\t\t  const user = await ctx.service.user.findUser(decode.tel, decode.password)\n\t\t\t\t  if (user && user.length) {\n\t\t\t\t    if (user[0].user_id != userId) {\n\t\t\t\t      ctx.status = 200;\n\t\t\t\t      ctx.body = {\n\t\t\t\t        status: 401,\n\t\t\t\t        msg: 'token已过期，请重新登录'\n\t\t\t\t      }\n\t\t\t\t    } else {\n\t\t\t\t      await next()\n\t\t\t\t    }\n\t\t\t\t  } else {\n\t\t\t\t    // token 不存在\n\t\t\t\t    ctx.status = 200;\n\t\t\t\t    ctx.body = {\n\t\t\t\t      status: 401,\n\t\t\t\t      msg: 'token不存在'\n\t\t\t\t    };\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tctx.status = 200;\n\t\t\t\tctx.body = {\n\t\t\t\t  status: 401,\n\t\t\t\t  msg: 'token已过期，请重新登录'\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// token 不存在\n\t\t  ctx.status = 200;\n\t\t  ctx.body = {\n\t\t    status: 401,\n\t\t    msg: 'token不存在'\n\t\t  };\n\t\t}\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n\n\n中间件编写完成，得去路由中使用中间件了。\n\n在 /app/router.js 中代码修改如下：\n\n'use strict';\n\n/**\n * @param {Egg.Application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller, middleware } = app;\n  // 传入加密字符串\n  const checkToken = middleware.checkToken(app.config.jwt.secret)\n  router.post('/', controller.login.login);\n  router.post('/getList', checkToken,  controller.list.getList)\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n至此，登录鉴权工作已完成。\n\n\x3c!--   表头    表头\n单元格    单元格\n单元格    单元格\n\n姓名   年龄\n张三   28",normalizedContent:"1、安装 egg-jwt\n\nnpm install egg-jwt -s\n\n\n1\n\n\n2、配置 plugin.js\n\njwt: {\n  enable: true,\n  package: 'egg-jwt',\n}\n\n\n1\n2\n3\n4\n\n\n3、在 config.default.js 中配置\n\nconfig.jwt = {\n  secret: '123456', // secret为加密密钥\n  // expiresin为token过期时间,数值的话单位为秒，如果是字符串的话，除非提供\"2 days\", \"10h\", \"7d\"这种，否则单位为毫秒\n  expiresin: 10 * 60,  \n}\n\n\n1\n2\n3\n4\n5\n\n\n准备工作完成，现在来分析登录鉴权的流程。\n\n例如这样一个场景，用户输入手机号、密码登录后台，首先后端应该判断手机号、密码是否正确，如果正确，则根据手机号跟密码生成一个 token，假定 1 天，然后将该 token 下发到前端，前端存储该 token，然后进入到后台其他页面，访问接口时将 token 传给服务端，服务端判断该 token 是否过期，以及是否对应当前用户，如果都满足的话则正常返回数据，否则告诉用户 token 已过期，需要重新登录。\n\n首先编写一个生成 token 的工具函数，在 /app/utils/token.js 中编写如下：\n\n// 记住，这里使用require跟exports，如果使用import和export default的话会报错。\nconst jwt = require(\"jsonwebtoken\")\n\n// 生成token\nexports.sign = function (data, secret, expirein) {\n\treturn jwt.sign(data, secret, { expiresin: expirein });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n接着，在 /app/controller/login.js 中编写如下：\n\n'use strict';\n\nconst { controller } = require('egg')\nconst gettoken = require('../utils/token')\n\nclass logincontroller extends controller {\n\tasync login () {\n\t\tconst { ctx } = this\n\t\tconst secret = ctx.app.config.jwt.secret\n\t\tconst expiresin = ctx.app.config.jwt.expiresin\n\t\tconst { tel, password } = ctx.request.body\t\n\t\tlet userinfo = await ctx.service.user.finduser(tel, password)\n\t\tif (userinfo && userinfo.length) {\n\t\t\tconst token = gettoken.sign({tel, password}, secret, expiresin)\n\t\t\tctx.body = {\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: {\n\t\t\t\t\ttel: tel,\n\t\t\t\t\tusername: userinfo[0].user_name,\n\t\t\t\t\ttoken: token\n\t\t\t\t},\n\t\t\t\tmsg: '成功'\n\t\t\t}\n\t\t} else {\n\t\t\tctx.body = {\n\t\t\t\tstatus: 300,\n\t\t\t\tdata: null,\n\t\t\t\tmsg: '手机号或密码错误'\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = logincontroller\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n在 app/service/user.js 中代码如下：\n\nconst { service } = require('egg')\n\nclass userservice extends service {\n\tasync find(uid) {\n\t\tif (uid) {\n\t\t\tconst user = await this.app.mysql.select('user_list', {\n\t\t\t\twhere: {\n\t\t\t\t\tuser_id: uid\n\t\t\t\t}\n\t\t\t})\n\t\t\tif (user) {\n\t\t\t\treturn user\n\t\t\t} else {\n\t\t\t\treturn []\n\t\t\t}\n\t\t} else {\n\t\t\tconst user = await this.app.mysql.select('user_list')\n\t\t\t// const user = await this.app.mysql.query(`select * from user_list`)\n\t\t\tif (user) {\n\t\t\t\treturn user\n\t\t\t} else {\n\t\t\t\treturn []\n\t\t\t}\n\t\t}\n\t\t// const user = await this.app.mysql.get('user_list', {user_id: uid})\n\t\t// return user\n\t}\n\tasync finduser (tel, password) {\n\t\tconst user = await this.app.mysql.select('user', {\n\t\t\twhere: {tel: tel, password: password}\n\t\t})\n\t\tif (user) {\n\t\t\treturn user\n\t\t} else {\n\t\t\treturn []\n\t\t}\n\t}\n}\n\nmodule.exports = userservice\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n在 /app/router.js 中代码如下：\n\n'use strict';\n\n/**\n * @param {egg.application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller, middleware } = app;\n  router.post('/', controller.login.login);\n  router.post('/getlist',  controller.list.getlist)\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n至此，登录及访问列表页接口已经完成，但是此时还没有鉴权，不管用户访问接口时是否传 token 都能正常访问数据。\n\n要完成鉴权工作，还需要通过中间件来完成。\n\n在 /app/middleware/checktoken.js 中代码如下：\n\nmodule.exports = (secret) => {\n\treturn async function (ctx, next) {\n\t\t// 若是没有 token，返回的是 null 字符串，前端访问接口时需在header中携带token和userid\n\t\tconst token = ctx.request.header.authorization;\n\t\tconst userid = ctx.request.header.userid\n\t\tif (!userid) {\n\t\t  ctx.status = 200;\n\t\t  ctx.body = {\n\t\t    status: 401,\n\t\t    msg: 'userid不存在'\n\t\t  };\n\t\t  return false\n\t\t}\n\t\tif (token && token !== null) {\n\t\t\t// 有token需要校验\n\t\t\ttry {\n\t\t\t\tlet decode = ctx.app.jwt.verify(token, secret);\n\t\t\t\tif (decode.tel) {\n\t\t\t\t  // 去数据库查找用户\n\t\t\t\t  const user = await ctx.service.user.finduser(decode.tel, decode.password)\n\t\t\t\t  if (user && user.length) {\n\t\t\t\t    if (user[0].user_id != userid) {\n\t\t\t\t      ctx.status = 200;\n\t\t\t\t      ctx.body = {\n\t\t\t\t        status: 401,\n\t\t\t\t        msg: 'token已过期，请重新登录'\n\t\t\t\t      }\n\t\t\t\t    } else {\n\t\t\t\t      await next()\n\t\t\t\t    }\n\t\t\t\t  } else {\n\t\t\t\t    // token 不存在\n\t\t\t\t    ctx.status = 200;\n\t\t\t\t    ctx.body = {\n\t\t\t\t      status: 401,\n\t\t\t\t      msg: 'token不存在'\n\t\t\t\t    };\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tctx.status = 200;\n\t\t\t\tctx.body = {\n\t\t\t\t  status: 401,\n\t\t\t\t  msg: 'token已过期，请重新登录'\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// token 不存在\n\t\t  ctx.status = 200;\n\t\t  ctx.body = {\n\t\t    status: 401,\n\t\t    msg: 'token不存在'\n\t\t  };\n\t\t}\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n\n\n中间件编写完成，得去路由中使用中间件了。\n\n在 /app/router.js 中代码修改如下：\n\n'use strict';\n\n/**\n * @param {egg.application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller, middleware } = app;\n  // 传入加密字符串\n  const checktoken = middleware.checktoken(app.config.jwt.secret)\n  router.post('/', controller.login.login);\n  router.post('/getlist', checktoken,  controller.list.getlist)\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n至此，登录鉴权工作已完成。\n\n\x3c!--   表头    表头\n单元格    单元格\n单元格    单元格\n\n姓名   年龄\n张三   28",charsets:{cjk:!0}},{title:"使用ApiDoc生成接口文档",frontmatter:{title:"使用ApiDoc生成接口文档",date:"2023-08-14T16:49:50.000Z",permalink:"/pages/40bfee/",categories:["《NodeJs》","Egg"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/03.Egg/07.%E4%BD%BF%E7%94%A8ApiDoc%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3.html",relativePath:"《NodeJs》笔记/03.Egg/07.使用ApiDoc生成接口文档.md",key:"v-0b57bbc2",path:"/pages/40bfee/",headers:[{level:2,title:"1、安装apidoc（ps: 这里全局安装，至于为啥，我也不知道，因为我在项目里安装，发现最后找不到apidoc命令，全局安装后却发现是可以的）",slug:"_1、安装apidoc-ps-这里全局安装-至于为啥-我也不知道-因为我在项目里安装-发现最后找不到apidoc命令-全局安装后却发现是可以的",normalizedTitle:"1、安装 apidoc（ps: 这里全局安装，至于为啥，我也不知道，因为我在项目里安装，发现最后找不到 apidoc 命令，全局安装后却发现是可以的）",charIndex:115},{level:2,title:"2、在项目根目录下编写apidoc.json文件，内容如下：",slug:"_2、在项目根目录下编写apidoc-json文件-内容如下",normalizedTitle:"2、在项目根目录下编写 apidoc.json 文件，内容如下：",charIndex:223},{level:2,title:"3、编写接口通用规则，在根目录下编写header.md文件，内容如下：",slug:"_3、编写接口通用规则-在根目录下编写header-md文件-内容如下",normalizedTitle:"3、编写接口通用规则，在根目录下编写 header.md 文件，内容如下：",charIndex:578},{level:2,title:"4、编写API 错误返回值说明，在根目录下编写footer.md文件，内容如下：",slug:"_4、编写api-错误返回值说明-在根目录下编写footer-md文件-内容如下",normalizedTitle:"4、编写 api 错误返回值说明，在根目录下编写 footer.md 文件，内容如下：",charIndex:904},{level:2,title:"5、接下来就可以在控制器里入口方法前添加注释说明了，如/app/controller/list.js文件中：",slug:"_5、接下来就可以在控制器里入口方法前添加注释说明了-如-app-controller-list-js文件中",normalizedTitle:"5、接下来就可以在控制器里入口方法前添加注释说明了，如 /app/controller/list.js 文件中：",charIndex:1688},{level:2,title:"6、在项目根目录下运行如下命令：",slug:"_6、在项目根目录下运行如下命令",normalizedTitle:"6、在项目根目录下运行如下命令：",charIndex:4560}],lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:"1、安装apidoc（ps: 这里全局安装，至于为啥，我也不知道，因为我在项目里安装，发现最后找不到apidoc命令，全局安装后却发现是可以的） 2、在项目根目录下编写apidoc.json文件，内容如下： 3、编写接口通用规则，在根目录下编写header.md文件，内容如下： 4、编写API 错误返回值说明，在根目录下编写footer.md文件，内容如下： 5、接下来就可以在控制器里入口方法前添加注释说明了，如/app/controller/list.js文件中： 6、在项目根目录下运行如下命令：",content:'在编写完接口后，需要对接接口，这时候就需要接口文档了，不然别人对接的时候不知道你用的什么字段，每个字段分别表示什么意思。\n\n一个好的文档，能让我们工作起来事半功倍。\n\n这里选择 apidoc 这个插件。apidoc 官网\n\n\n# 1、安装 apidoc（ps: 这里全局安装，至于为啥，我也不知道，因为我在项目里安装，发现最后找不到 apidoc 命令，全局安装后却发现是可以的）\n\nnpm install apidoc -g\n\n\n1\n\n\n\n# 2、在项目根目录下编写 apidoc.json 文件，内容如下：\n\n{\n  "name": "接口文档名称",\n  "version": "1.0.0",\n  "description": "接口文档描述",\n  "title": "接口文档浏览器标题",\n  "url" : "http://api.abc.com/",\n  "header": {\n    "title": "接口通用规则",\n    "filename": "./header.md"\n  },\n  "footer": {\n    "title": "API 错误返回值说明",\n    "filename": "./footer.md"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 3、编写接口通用规则，在根目录下编写 header.md 文件，内容如下：\n\n### API 调用规则\n\n本文档中所有请求服务端 API 接口的请求均使用此规则校验，以下不再重复说明。\n\nAPI 接口统一请求URL ```http://127.0.0.1:7001/```\n\n每次请求 API 接口时，均需要提供 HTTP Request Header，具体如下：\n名称 | 类型 | 说明\n--- | --- | ---\n```Authorization```| String | \'Authorization\':`${token}`-数据签名 - 需要进行登录获取签名（登录注册不需要携带）\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 4、编写 API 错误返回值说明，在根目录下编写 footer.md 文件，内容如下：\n\n### API 返回值说明\n\n#### 请求返回示例\n{\n "code" : 200,\n "message" : "params missing",\n "data" : "Object [NULL | NOT NULL]"\n}\n#### HTTP 状态码\ncode | 描述 | 说明\n--- | --- | ---\n-1 | 错误提交 | 具体看返回的错误信息\n200 | 成功提交 | 请求成功，一般用于GET与POSt请求\n201 | 成功提交 | [POST/PUT/PATCH]：用户新建或修改数据成功\n202 | 成功提交 | 表示一个请求已经进入后台排队（异步任务）\n204 | 成功提交 | 用户删除数据成功\n301 | 重定向 | 永久重定向\n302 | 重定向 | 临时重定向\n400 | 请求错误 | [POST/PUT/PATCH]：用户发出的请求有错误\n401 | 鉴权失败 | token过期或者不正确，重新登录(账号密码错误)\n403 | 访问禁止 | 访问是被禁止的\n404 | 路由不存在或者资源不存在 | 访问的url不存在或者对应资源不存在\n406 | 请求格式错误 | 用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）\n407 | 请求数据不存在 | 请求数据不存在\n410 | 请求资源被删除 | 用户请求的资源被永久删除，且不会再得到的\n500 | 服务器内部错误 | 内部服务器出错\n501 | 服务器内部错误 | 服务器不支持请求的功能，无法完成请求\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 5、接下来就可以在控制器里入口方法前添加注释说明了，如 /app/controller/list.js 文件中：\n\n\'use strict\';\n\nconst { Controller } = require(\'egg\');\n\nclass ListController extends Controller {\n\t/**\n\t* @api {POST} /getList 用户列表\n\t* @apiGroup user\n\t* @apiVersion 0.0.1\n\t* @apiDescription 获取用户列表\n\t* @apiParam {Number} userId 用户ID\n\t* @apiParamExample {json} 请求样例：\n\t* {"userId": 1345}\n\t* @apiSuccess (200) {String} message 信息\n\t* @apiSuccess (200) {int} code 200 代表无错误 1代表有错误\n\t* @apiSuccess (200) {String[]} data \n\t* @apiSuccessExample {json} 返回样例:\n\t* \n\t\t{\n\t\t\t"code":"200",\n\t\t\t"message":"获取用户成功", \n\t\t\t"data": [\n\t\t\t\t{\n\t\t\t\t\tuser_id: 1,          // 用户ID\n\t\t\t\t\tuser_name: "江小白",  // 用户名\n\t\t\t\t\tuser_tel: \'1934975\', // 用户手机号\n\t\t\t\t\tstatus: 1            // 状态，0未完成，1已完成\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tuser_id: 2, \n\t\t\t\t\tuser_name: "小白", \n\t\t\t\t\tuser_tel: \'1934975\', \n\t\t\t\t\tstatus: 0\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t*/\n\tasync getList () {\n\t\tconst { ctx } = this;\n\t\tconst userId = ctx.request.body.userId\n\t\tconst userInfo = await ctx.service.user.find(userId)\n\t\tctx.helper.success({ctx, res: userInfo, message: \'请求成功\'})\n    // ctx.body = userInfo\n\t}\n\t/**\n\t* @api {POST} /updateList 修改用户名\n\t* @apiGroup user\n\t* @apiVersion 0.0.1\n\t* @apiDescription 修改用户信息\n\t* @apiParam {Number} userId 用户ID\n\t* @apiParam {Number} userName 用户名\n\t* @apiParamExample {json} 请求样例：\n\t* {"userId": 1345, "userName": "江小白"}\n\t* @apiSuccess (200) {String} message 信息\n\t* @apiSuccess (200) {int} code 200 代表无错误 1代表有错误\n\t* @apiSuccessExample {json} 返回样例:\n\t* {"code":"200","message":"修改用户信息成功"}\n\t*/\n\tasync updateList () {\n\t\tconst { ctx } = this;\n\t\tconst userId = ctx.request.body.userId\n\t\tconst userName = ctx.request.body.userName\n\t\tconst userInfo = await ctx.service.user.update(userId, userName)\n\t\tif (userInfo.status === 200) {\n\t\t\tctx.helper.success({ctx, res: userInfo, message: \'请求成功\'})\n\t\t} else {\n\t\t\tctx.helper.error({ctx, message: \'更新数据失败\'})\n\t\t}\n\t\t\n\t}\n\t/**\n\t* @api {POST} /delete 删除用户\n\t* @apiGroup 用户操作\n\t* @apiVersion 0.0.1\n\t* @apiDescription 删除用户\n\t* @apiParam {Number} userId 用户ID\n\t* @apiParamExample {json} 请求样例：\n\t* {"userId": 1345}\n\t* @apiSuccess (200) {String} message 信息\n\t* @apiSuccess (200) {int} code 200 代表无错误 1代表有错误\n\t* @apiSuccessExample {json} 返回样例:\n\t* {"code":"200","message":"删除用户成功"}\n\t*/\n\tasync delete () {\n\t\tconst { ctx } = this;\n\t\tconst userId = ctx.request.body.userId\n\t\tconst userInfo = await ctx.service.user.delete(userId)\n\t\tif (userInfo.status === 200) {\n\t\t\tctx.helper.success({ctx, res: userInfo, message: \'删除数据成功\'})\n\t\t} else {\n\t\t\tctx.helper.error({ctx, message: \'删除数据失败\'})\n\t\t}\n    // ctx.helper.success({ctx, res: userInfo, message: \'请求成功\'})\n\t}\n}\n\nmodule.exports = ListController;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n\n\n\n# 6、在项目根目录下运行如下命令：\n\napidoc -i app/ -o apidoc/\n\n\n1\n\n\n读取 app 目录下 controller 控制器里的注释，输出到根目录下的 apidoc 文件夹下，在该文件夹中打开 index.html 文件即可查看接口文档了。\n\n',normalizedContent:'在编写完接口后，需要对接接口，这时候就需要接口文档了，不然别人对接的时候不知道你用的什么字段，每个字段分别表示什么意思。\n\n一个好的文档，能让我们工作起来事半功倍。\n\n这里选择 apidoc 这个插件。apidoc 官网\n\n\n# 1、安装 apidoc（ps: 这里全局安装，至于为啥，我也不知道，因为我在项目里安装，发现最后找不到 apidoc 命令，全局安装后却发现是可以的）\n\nnpm install apidoc -g\n\n\n1\n\n\n\n# 2、在项目根目录下编写 apidoc.json 文件，内容如下：\n\n{\n  "name": "接口文档名称",\n  "version": "1.0.0",\n  "description": "接口文档描述",\n  "title": "接口文档浏览器标题",\n  "url" : "http://api.abc.com/",\n  "header": {\n    "title": "接口通用规则",\n    "filename": "./header.md"\n  },\n  "footer": {\n    "title": "api 错误返回值说明",\n    "filename": "./footer.md"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 3、编写接口通用规则，在根目录下编写 header.md 文件，内容如下：\n\n### api 调用规则\n\n本文档中所有请求服务端 api 接口的请求均使用此规则校验，以下不再重复说明。\n\napi 接口统一请求url ```http://127.0.0.1:7001/```\n\n每次请求 api 接口时，均需要提供 http request header，具体如下：\n名称 | 类型 | 说明\n--- | --- | ---\n```authorization```| string | \'authorization\':`${token}`-数据签名 - 需要进行登录获取签名（登录注册不需要携带）\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 4、编写 api 错误返回值说明，在根目录下编写 footer.md 文件，内容如下：\n\n### api 返回值说明\n\n#### 请求返回示例\n{\n "code" : 200,\n "message" : "params missing",\n "data" : "object [null | not null]"\n}\n#### http 状态码\ncode | 描述 | 说明\n--- | --- | ---\n-1 | 错误提交 | 具体看返回的错误信息\n200 | 成功提交 | 请求成功，一般用于get与post请求\n201 | 成功提交 | [post/put/patch]：用户新建或修改数据成功\n202 | 成功提交 | 表示一个请求已经进入后台排队（异步任务）\n204 | 成功提交 | 用户删除数据成功\n301 | 重定向 | 永久重定向\n302 | 重定向 | 临时重定向\n400 | 请求错误 | [post/put/patch]：用户发出的请求有错误\n401 | 鉴权失败 | token过期或者不正确，重新登录(账号密码错误)\n403 | 访问禁止 | 访问是被禁止的\n404 | 路由不存在或者资源不存在 | 访问的url不存在或者对应资源不存在\n406 | 请求格式错误 | 用户请求的格式不可得（比如用户请求json格式，但是只有xml格式）\n407 | 请求数据不存在 | 请求数据不存在\n410 | 请求资源被删除 | 用户请求的资源被永久删除，且不会再得到的\n500 | 服务器内部错误 | 内部服务器出错\n501 | 服务器内部错误 | 服务器不支持请求的功能，无法完成请求\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 5、接下来就可以在控制器里入口方法前添加注释说明了，如 /app/controller/list.js 文件中：\n\n\'use strict\';\n\nconst { controller } = require(\'egg\');\n\nclass listcontroller extends controller {\n\t/**\n\t* @api {post} /getlist 用户列表\n\t* @apigroup user\n\t* @apiversion 0.0.1\n\t* @apidescription 获取用户列表\n\t* @apiparam {number} userid 用户id\n\t* @apiparamexample {json} 请求样例：\n\t* {"userid": 1345}\n\t* @apisuccess (200) {string} message 信息\n\t* @apisuccess (200) {int} code 200 代表无错误 1代表有错误\n\t* @apisuccess (200) {string[]} data \n\t* @apisuccessexample {json} 返回样例:\n\t* \n\t\t{\n\t\t\t"code":"200",\n\t\t\t"message":"获取用户成功", \n\t\t\t"data": [\n\t\t\t\t{\n\t\t\t\t\tuser_id: 1,          // 用户id\n\t\t\t\t\tuser_name: "江小白",  // 用户名\n\t\t\t\t\tuser_tel: \'1934975\', // 用户手机号\n\t\t\t\t\tstatus: 1            // 状态，0未完成，1已完成\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tuser_id: 2, \n\t\t\t\t\tuser_name: "小白", \n\t\t\t\t\tuser_tel: \'1934975\', \n\t\t\t\t\tstatus: 0\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t*/\n\tasync getlist () {\n\t\tconst { ctx } = this;\n\t\tconst userid = ctx.request.body.userid\n\t\tconst userinfo = await ctx.service.user.find(userid)\n\t\tctx.helper.success({ctx, res: userinfo, message: \'请求成功\'})\n    // ctx.body = userinfo\n\t}\n\t/**\n\t* @api {post} /updatelist 修改用户名\n\t* @apigroup user\n\t* @apiversion 0.0.1\n\t* @apidescription 修改用户信息\n\t* @apiparam {number} userid 用户id\n\t* @apiparam {number} username 用户名\n\t* @apiparamexample {json} 请求样例：\n\t* {"userid": 1345, "username": "江小白"}\n\t* @apisuccess (200) {string} message 信息\n\t* @apisuccess (200) {int} code 200 代表无错误 1代表有错误\n\t* @apisuccessexample {json} 返回样例:\n\t* {"code":"200","message":"修改用户信息成功"}\n\t*/\n\tasync updatelist () {\n\t\tconst { ctx } = this;\n\t\tconst userid = ctx.request.body.userid\n\t\tconst username = ctx.request.body.username\n\t\tconst userinfo = await ctx.service.user.update(userid, username)\n\t\tif (userinfo.status === 200) {\n\t\t\tctx.helper.success({ctx, res: userinfo, message: \'请求成功\'})\n\t\t} else {\n\t\t\tctx.helper.error({ctx, message: \'更新数据失败\'})\n\t\t}\n\t\t\n\t}\n\t/**\n\t* @api {post} /delete 删除用户\n\t* @apigroup 用户操作\n\t* @apiversion 0.0.1\n\t* @apidescription 删除用户\n\t* @apiparam {number} userid 用户id\n\t* @apiparamexample {json} 请求样例：\n\t* {"userid": 1345}\n\t* @apisuccess (200) {string} message 信息\n\t* @apisuccess (200) {int} code 200 代表无错误 1代表有错误\n\t* @apisuccessexample {json} 返回样例:\n\t* {"code":"200","message":"删除用户成功"}\n\t*/\n\tasync delete () {\n\t\tconst { ctx } = this;\n\t\tconst userid = ctx.request.body.userid\n\t\tconst userinfo = await ctx.service.user.delete(userid)\n\t\tif (userinfo.status === 200) {\n\t\t\tctx.helper.success({ctx, res: userinfo, message: \'删除数据成功\'})\n\t\t} else {\n\t\t\tctx.helper.error({ctx, message: \'删除数据失败\'})\n\t\t}\n    // ctx.helper.success({ctx, res: userinfo, message: \'请求成功\'})\n\t}\n}\n\nmodule.exports = listcontroller;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n\n\n\n# 6、在项目根目录下运行如下命令：\n\napidoc -i app/ -o apidoc/\n\n\n1\n\n\n读取 app 目录下 controller 控制器里的注释，输出到根目录下的 apidoc 文件夹下，在该文件夹中打开 index.html 文件即可查看接口文档了。\n\n',charsets:{cjk:!0}},{title:"Node升级后，项目运行或打包报错",frontmatter:{title:"Node升级后，项目运行或打包报错",date:"2024-07-02T10:32:40.000Z",permalink:"/pages/157510/",categories:["《NodeJs》"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/04.Node%E7%9B%B8%E5%85%B3/02.Node%E5%8D%87%E7%BA%A7%E5%90%8E%EF%BC%8C%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E6%88%96%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%99.html",relativePath:"《NodeJs》笔记/04.Node相关/02.Node升级后，项目运行或打包报错.md",key:"v-16738502",path:"/pages/157510/",lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:null,content:'最近，突然想着把 node 升级一下，之前用的 v16.20.2 的，升级到了 v20.12.2，升级完后，打包项目，发现完犊子了，直接报错，报错信息类似这种\nError: error:0308010C:digital envelope routines::unsupported\nat new Hash (node:internal/crypto/hash:80:19)\nat Object.createHash (node:crypto:139:10)\n死活打包不成功。然后把 node 切回之前的版本，再次打包，发现是可以的，这下可以确定是 node 版本不兼容导致的问题，原因是 node v17 版本之后发布的 OpenSSL3.0 这个鬼东西导致的，OpenSSL3.0 对允许算法和密钥大小增加了严格的限制，因此才有这个问题。\n那么怎么解决这个问题呢？\n\n这里有两种办法解决\n1、切换回之前能正常运行的 node 版本\n\n// 使用nvm这个node版本管理工具，在需要打包老项目时，切换回老版本的node\nnvm ls  // 查看当前已安装的版本\n\nnvm use 版本号 // 切换到指定的node版本，仅针对当前当次命令窗口生效\n\n\n1\n2\n3\n4\n\n\n2、告诉 node 使用旧版 OpenSSL 来运行程序\n\n// Linux、macOS、Git bash等命令终端运行\nexport NODE_OPTIONS=--openssl-legacy-provider\n\n// Windows 命令窗口下\nset NODE_OPTIONS=--openssl-legacy-provider\n\n// 在 PowerShell 上\n$env:NODE_OPTIONS = "--openssl-legacy-provider"\n\n\n// 然后执行npm run build即可\nnpm run build\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n3、如果项目是个人开发，仅自己使用的话，也可以在 package.json 中重新配置脚本\n\n// 记住，区分自己的开发环境是mac还是windows\n"scripts": {\n  "dev": "export NODE_OPTIONS=--openssl-legacy-provider && vuepress dev docs --debug",\n  "build": "export NODE_OPTIONS=--openssl-legacy-provider && vuepress build docs",\n}\n\n\n1\n2\n3\n4\n5\n',normalizedContent:'最近，突然想着把 node 升级一下，之前用的 v16.20.2 的，升级到了 v20.12.2，升级完后，打包项目，发现完犊子了，直接报错，报错信息类似这种\nerror: error:0308010c:digital envelope routines::unsupported\nat new hash (node:internal/crypto/hash:80:19)\nat object.createhash (node:crypto:139:10)\n死活打包不成功。然后把 node 切回之前的版本，再次打包，发现是可以的，这下可以确定是 node 版本不兼容导致的问题，原因是 node v17 版本之后发布的 openssl3.0 这个鬼东西导致的，openssl3.0 对允许算法和密钥大小增加了严格的限制，因此才有这个问题。\n那么怎么解决这个问题呢？\n\n这里有两种办法解决\n1、切换回之前能正常运行的 node 版本\n\n// 使用nvm这个node版本管理工具，在需要打包老项目时，切换回老版本的node\nnvm ls  // 查看当前已安装的版本\n\nnvm use 版本号 // 切换到指定的node版本，仅针对当前当次命令窗口生效\n\n\n1\n2\n3\n4\n\n\n2、告诉 node 使用旧版 openssl 来运行程序\n\n// linux、macos、git bash等命令终端运行\nexport node_options=--openssl-legacy-provider\n\n// windows 命令窗口下\nset node_options=--openssl-legacy-provider\n\n// 在 powershell 上\n$env:node_options = "--openssl-legacy-provider"\n\n\n// 然后执行npm run build即可\nnpm run build\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n3、如果项目是个人开发，仅自己使用的话，也可以在 package.json 中重新配置脚本\n\n// 记住，区分自己的开发环境是mac还是windows\n"scripts": {\n  "dev": "export node_options=--openssl-legacy-provider && vuepress dev docs --debug",\n  "build": "export node_options=--openssl-legacy-provider && vuepress build docs",\n}\n\n\n1\n2\n3\n4\n5\n',charsets:{cjk:!0}},{title:"上传图片到七牛云",frontmatter:{title:"上传图片到七牛云",date:"2023-07-21T11:39:45.000Z",permalink:"/pages/c045b4/",categories:["《NodeJs》","Egg"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/03.Egg/06.%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E4%B8%83%E7%89%9B%E4%BA%91.html",relativePath:"《NodeJs》笔记/03.Egg/06.上传图片到七牛云.md",key:"v-6b223d4e",path:"/pages/c045b4/",lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:null,content:'最近在捣鼓 Egg.js 的图片上传功能，考虑到七牛云的比较划算，因此想拿七牛云练练手。还没注册的可以先去注册\n\n首先安装依赖 qiniu, 详情见 Node.js SDK\n\nnpm install qiniu\n\n\n1\n\n\n还需要安装三个依赖，后续会用到：\n\n// await-stream-ready：能够使用await进行文件的读写操作。\n// stream-wormhole：在文件上传出现异常时能够把流消耗掉。\nnpm install await-stream-ready stream-wormhole md5 -S\n\n\n1\n2\n3\n\n\n编写控制器，在 /app/controller/upload.js 中代码如下：\n\n"use strict";\n\nconst controller = require("egg").Controller\n\nclass uploadController extends controller {\n\tasync index () {\n\t\tconst { ctx, config } = this;\n\t\tconst data = await ctx.service.uploadUtils.uploadFiles();\n\t\tif (data) {\n\t\t  ctx.body = data;\n\t\t} else {\n\t\t  ctx.body = {\n\t\t    message:"上传失败"\n\t\t  }\n\t\t}\n\t}\n}\n\nmodule.exports = uploadController\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n实现上传图片到七牛云的逻辑，在 /app/service/uploadUtils.js 中代码如下：\n\nconst Service = require(\'egg\').Service;\nconst fs = require(\'fs\');\nconst path = require(\'path\');\nconst qiniu = require(\'qiniu\');\nconst awaitWriteStream = require("await-stream-ready").write;\nconst sendToWormhole = require("stream-wormhole");\nconst md5 = require("md5");\nconst bucket = "test-demo666"; //要上传的空间名\nconst imageUrl = ""; // 空间绑定的域名\nconst accessKey = ""; //Access Key\nconst secretKey = ""; //Secret Key\nlet config = new qiniu.conf.Config();\nconfig.zone = qiniu.zone.Zone_z2; // 存储区域，华东：z0, 华北：z1，华南：z2，华美：na0，东南亚：as0\n\nclass uploadUtilsService extends Service {\n\tasync uploadFiles () {\n\t\tconst { ctx } = this\n\t\tconst stream = await ctx.getFileStream()\n\t\tconst filename = md5(stream.filename) + path.extname(stream.filename).toLocaleLowerCase();\n\t\tconst localFilePath = path.join(__dirname, "../public/upload", filename);\n\t\tconst writeStream = fs.createWriteStream(localFilePath);\n\t\tconst mac = new qiniu.auth.digest.Mac(accessKey, secretKey);\n\t\tconst options = {\n\t\t  scope: bucket,\n\t\t  // expires: 7200, // 默认情况下，在不指定上传凭证的有效时间情况下，默认有效期为1个小时\n\t\t};\n\t\tconst putPolicy = new qiniu.rs.PutPolicy(options);\n\t\tconst uploadToken = putPolicy.uploadToken(mac);\n\t\ttry {\n\t\t  await awaitWriteStream(stream.pipe(writeStream));\n\t\t  const formUploader = new qiniu.form_up.FormUploader(config);\n\t\t  const putExtra = new qiniu.form_up.PutExtra();\n\t\t  const imgSrc = await new Promise((resolve, reject) => {\n\t\t    formUploader.putFile(\n\t\t      uploadToken,\n\t\t      filename,\n\t\t      localFilePath,\n\t\t      putExtra,\n\t\t      (respErr, respBody, respInfo) => {\n\t\t        if (respErr) {\n\t\t          reject("");\n\t\t        }\n\t\t        if (respInfo.statusCode == 200) {\n\t\t          resolve(imageUrl + respBody.key);\n\t\t        } else {\n\t\t          reject("");\n\t\t        }\n\t\t        // 上传之后删除本地文件\n\t\t        fs.unlinkSync(localFilePath);\n\t\t      }\n\t\t    );\n\t\t  });\n\t\t  if (imgSrc !== "") {\n\t\t    return {\n\t\t      url: imgSrc\n\t\t    };\n\t\t  } else {\n\t\t    return false;\n\t\t  }\n\t\t} catch (err) {\n\t\t  //如果出现错误，关闭管道\n\t\t  await sendToWormhole(stream);\n\t\t  return false;\n\t\t}\n\t}\n}\n\nmodule.exports = uploadUtilsService\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n\n\n在 /app/router.js 中代码如下：\n\n\'use strict\';\n\n/**\n * @param {Egg.Application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller, middleware } = app;\n  router.post(\'/upload\', controller.upload.index)\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n前端上传代码如下：\n\n<form\n  method="POST"\n  action="http://127.0.0.1:7003/upload"\n  enctype="multipart/form-data"\n>\n  title: <input name="title" /> file: <input name="file" type="file" />\n  <button type="submit">Upload</button>\n</form>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n至此图片上传到七牛云就大功告成了。\n\n特别说明:\n\n\n * AccessKey 和 SecretKey 可以在这里看\n   \n * 七牛云新建空间后，会有一个默认的测试域名，每个测试域名自创建起 30 个自然日后系统会自动回收，仅供测试使用并且不支持 Https 访问。\n\n因此，如果想长期使用的话，得添加自定义域名，而且添加的自定义域名是需要已备案的域名。',normalizedContent:'最近在捣鼓 egg.js 的图片上传功能，考虑到七牛云的比较划算，因此想拿七牛云练练手。还没注册的可以先去注册\n\n首先安装依赖 qiniu, 详情见 node.js sdk\n\nnpm install qiniu\n\n\n1\n\n\n还需要安装三个依赖，后续会用到：\n\n// await-stream-ready：能够使用await进行文件的读写操作。\n// stream-wormhole：在文件上传出现异常时能够把流消耗掉。\nnpm install await-stream-ready stream-wormhole md5 -s\n\n\n1\n2\n3\n\n\n编写控制器，在 /app/controller/upload.js 中代码如下：\n\n"use strict";\n\nconst controller = require("egg").controller\n\nclass uploadcontroller extends controller {\n\tasync index () {\n\t\tconst { ctx, config } = this;\n\t\tconst data = await ctx.service.uploadutils.uploadfiles();\n\t\tif (data) {\n\t\t  ctx.body = data;\n\t\t} else {\n\t\t  ctx.body = {\n\t\t    message:"上传失败"\n\t\t  }\n\t\t}\n\t}\n}\n\nmodule.exports = uploadcontroller\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n实现上传图片到七牛云的逻辑，在 /app/service/uploadutils.js 中代码如下：\n\nconst service = require(\'egg\').service;\nconst fs = require(\'fs\');\nconst path = require(\'path\');\nconst qiniu = require(\'qiniu\');\nconst awaitwritestream = require("await-stream-ready").write;\nconst sendtowormhole = require("stream-wormhole");\nconst md5 = require("md5");\nconst bucket = "test-demo666"; //要上传的空间名\nconst imageurl = ""; // 空间绑定的域名\nconst accesskey = ""; //access key\nconst secretkey = ""; //secret key\nlet config = new qiniu.conf.config();\nconfig.zone = qiniu.zone.zone_z2; // 存储区域，华东：z0, 华北：z1，华南：z2，华美：na0，东南亚：as0\n\nclass uploadutilsservice extends service {\n\tasync uploadfiles () {\n\t\tconst { ctx } = this\n\t\tconst stream = await ctx.getfilestream()\n\t\tconst filename = md5(stream.filename) + path.extname(stream.filename).tolocalelowercase();\n\t\tconst localfilepath = path.join(__dirname, "../public/upload", filename);\n\t\tconst writestream = fs.createwritestream(localfilepath);\n\t\tconst mac = new qiniu.auth.digest.mac(accesskey, secretkey);\n\t\tconst options = {\n\t\t  scope: bucket,\n\t\t  // expires: 7200, // 默认情况下，在不指定上传凭证的有效时间情况下，默认有效期为1个小时\n\t\t};\n\t\tconst putpolicy = new qiniu.rs.putpolicy(options);\n\t\tconst uploadtoken = putpolicy.uploadtoken(mac);\n\t\ttry {\n\t\t  await awaitwritestream(stream.pipe(writestream));\n\t\t  const formuploader = new qiniu.form_up.formuploader(config);\n\t\t  const putextra = new qiniu.form_up.putextra();\n\t\t  const imgsrc = await new promise((resolve, reject) => {\n\t\t    formuploader.putfile(\n\t\t      uploadtoken,\n\t\t      filename,\n\t\t      localfilepath,\n\t\t      putextra,\n\t\t      (resperr, respbody, respinfo) => {\n\t\t        if (resperr) {\n\t\t          reject("");\n\t\t        }\n\t\t        if (respinfo.statuscode == 200) {\n\t\t          resolve(imageurl + respbody.key);\n\t\t        } else {\n\t\t          reject("");\n\t\t        }\n\t\t        // 上传之后删除本地文件\n\t\t        fs.unlinksync(localfilepath);\n\t\t      }\n\t\t    );\n\t\t  });\n\t\t  if (imgsrc !== "") {\n\t\t    return {\n\t\t      url: imgsrc\n\t\t    };\n\t\t  } else {\n\t\t    return false;\n\t\t  }\n\t\t} catch (err) {\n\t\t  //如果出现错误，关闭管道\n\t\t  await sendtowormhole(stream);\n\t\t  return false;\n\t\t}\n\t}\n}\n\nmodule.exports = uploadutilsservice\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n\n\n在 /app/router.js 中代码如下：\n\n\'use strict\';\n\n/**\n * @param {egg.application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller, middleware } = app;\n  router.post(\'/upload\', controller.upload.index)\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n前端上传代码如下：\n\n<form\n  method="post"\n  action="http://127.0.0.1:7003/upload"\n  enctype="multipart/form-data"\n>\n  title: <input name="title" /> file: <input name="file" type="file" />\n  <button type="submit">upload</button>\n</form>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n至此图片上传到七牛云就大功告成了。\n\n特别说明:\n\n\n * accesskey 和 secretkey 可以在这里看\n   \n * 七牛云新建空间后，会有一个默认的测试域名，每个测试域名自创建起 30 个自然日后系统会自动回收，仅供测试使用并且不支持 https 访问。\n\n因此，如果想长期使用的话，得添加自定义域名，而且添加的自定义域名是需要已备案的域名。',charsets:{cjk:!0}},{title:"hooks之useEffect",frontmatter:{title:"hooks之useEffect",date:"2022-03-21T17:31:07.000Z",permalink:"/pages/a6152f/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/02.hook-useEffect.html",relativePath:"《React》笔记/01.React/02.hook-useEffect.md",key:"v-4a82f017",path:"/pages/a6152f/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'由于函数组件没有生命周期，可以使用 useEffect 来替代，他可以看做是 componentDidMount、componentDidUpdate、componentWillUnmount 这三个函数的组合。\n\n/* \n\tuseEffect不传参数，相当于类式组件中的componentDidMount生命周期和componentDidUpdate生命周期，\n\t在挂载完成执行一次，任何状态更改时也会执行\n*/\nimport React, { useState, useEffect } from \'react\';\n \nexport default function Page2 () {\n\tconst [count, setCount] = useState(0);\n\n\tuseEffect(() => {\n\t\tgetDatas ()\n\t})\n\n\tconst getDatas = () => {\n\t\tlet arr = [134,2345,355,46]\n\t\tconsole.log(\'arr\', arr)\n\t}\n\n\treturn(\n\t\t<div>\n\t\t\t<p>You clicked {count} times</p>\n\t\t\t<button onClick={() => setCount(count + 1)}>按钮</button>\n\t\t\t<div>This is Page2!</div>\n\t\t</div>\n\t);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n这里，在页面初次加载完会执行 getDatas 方法，控制台会打印出数据，每次点击按钮更新 count 后，控制台会依次执行 getDatas 方法打印出数据。\n\n如果想通知 React 跳过对 effect 的调用，可以传一个空数组作为 useEffect 的第二个参数，这样就只会运行一次 effect。\n\n/*\n\t此时，相当于类式组件中的componentDidMount生命周期,只会在挂载完成执行一次\n */\nuseEffect(() => {\n\tgetDatas ()\n}, [])\n\n\n1\n2\n3\n4\n5\n6\n\n\n同样的，如果某些特定值在两次渲染之间没有发生变化，可以通知 React 跳过对 effect 的调用，比如只有 count 属性变化时才去调用 effect，其他情况下不调用 effect，此时相当于类式组件中的 componentDidMount 和 componentDidUpdate 生命周期。\n\n// 组件挂载完会调用，，count更改后也会调用\nuseEffect(() => {\n\tgetDatas ()\n}, [count])\n\n\n1\n2\n3\n4\n\n\n如果 useEffect 里返回一个回调，如下：\n\n/*\n\t此时，useEffect相当于类组件中的componentDidMount、componentDidUpdate、componentWillUnmount生命周期，\n\t页面加载完会执行、组件状态更改后也会执行，在组件将要卸载时也会执行\n */\nlet listData = [\n\t{\n\t\tname: "张三",\n\t\tage: 34,\n\t\tid: 1\n\t}, {\n\t\tname: "李四",\n\t\tage: 23,\n\t\tid: 2\n\t}, {\n\t\tname: "王五",\n\t\tage: 45,\n\t\tid: 3\n\t}\n]\nlet [list, setList] = useState(listData)\n\nuseEffect(() => {\n\tconst timer = setInterval(() => {\n\t\tsetList(list.map(item => {\n\t\t\treturn {\n\t\t\t\t...item,\n\t\t\t\tage: item.age + 1\n\t\t\t}\n\t\t}))\n\t}, 1000)\n\treturn () => {\n\t\tclearInterval(timer)\n\t}\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n',normalizedContent:'由于函数组件没有生命周期，可以使用 useeffect 来替代，他可以看做是 componentdidmount、componentdidupdate、componentwillunmount 这三个函数的组合。\n\n/* \n\tuseeffect不传参数，相当于类式组件中的componentdidmount生命周期和componentdidupdate生命周期，\n\t在挂载完成执行一次，任何状态更改时也会执行\n*/\nimport react, { usestate, useeffect } from \'react\';\n \nexport default function page2 () {\n\tconst [count, setcount] = usestate(0);\n\n\tuseeffect(() => {\n\t\tgetdatas ()\n\t})\n\n\tconst getdatas = () => {\n\t\tlet arr = [134,2345,355,46]\n\t\tconsole.log(\'arr\', arr)\n\t}\n\n\treturn(\n\t\t<div>\n\t\t\t<p>you clicked {count} times</p>\n\t\t\t<button onclick={() => setcount(count + 1)}>按钮</button>\n\t\t\t<div>this is page2!</div>\n\t\t</div>\n\t);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n这里，在页面初次加载完会执行 getdatas 方法，控制台会打印出数据，每次点击按钮更新 count 后，控制台会依次执行 getdatas 方法打印出数据。\n\n如果想通知 react 跳过对 effect 的调用，可以传一个空数组作为 useeffect 的第二个参数，这样就只会运行一次 effect。\n\n/*\n\t此时，相当于类式组件中的componentdidmount生命周期,只会在挂载完成执行一次\n */\nuseeffect(() => {\n\tgetdatas ()\n}, [])\n\n\n1\n2\n3\n4\n5\n6\n\n\n同样的，如果某些特定值在两次渲染之间没有发生变化，可以通知 react 跳过对 effect 的调用，比如只有 count 属性变化时才去调用 effect，其他情况下不调用 effect，此时相当于类式组件中的 componentdidmount 和 componentdidupdate 生命周期。\n\n// 组件挂载完会调用，，count更改后也会调用\nuseeffect(() => {\n\tgetdatas ()\n}, [count])\n\n\n1\n2\n3\n4\n\n\n如果 useeffect 里返回一个回调，如下：\n\n/*\n\t此时，useeffect相当于类组件中的componentdidmount、componentdidupdate、componentwillunmount生命周期，\n\t页面加载完会执行、组件状态更改后也会执行，在组件将要卸载时也会执行\n */\nlet listdata = [\n\t{\n\t\tname: "张三",\n\t\tage: 34,\n\t\tid: 1\n\t}, {\n\t\tname: "李四",\n\t\tage: 23,\n\t\tid: 2\n\t}, {\n\t\tname: "王五",\n\t\tage: 45,\n\t\tid: 3\n\t}\n]\nlet [list, setlist] = usestate(listdata)\n\nuseeffect(() => {\n\tconst timer = setinterval(() => {\n\t\tsetlist(list.map(item => {\n\t\t\treturn {\n\t\t\t\t...item,\n\t\t\t\tage: item.age + 1\n\t\t\t}\n\t\t}))\n\t}, 1000)\n\treturn () => {\n\t\tclearinterval(timer)\n\t}\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n',charsets:{cjk:!0}},{title:"使用React脚手架快速搭建项目",frontmatter:{title:"使用React脚手架快速搭建项目",date:"2022-03-21T17:02:01.000Z",permalink:"/pages/2be28a/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/01.create-react-app.html",relativePath:"《React》笔记/01.React/01.create-react-app.md",key:"v-7a1fa96d",path:"/pages/2be28a/",headers:[{level:3,title:"一、基础框架搭建",slug:"一、基础框架搭建",normalizedTitle:"一、基础框架搭建",charIndex:82},{level:3,title:"二、路由配置",slug:"二、路由配置",normalizedTitle:"二、路由配置",charIndex:1204},{level:4,title:"①、嵌套路由配置",slug:"_1、嵌套路由配置",normalizedTitle:"①、嵌套路由配置",charIndex:1214},{level:4,title:"②、非嵌套路由配置",slug:"_2、非嵌套路由配置",normalizedTitle:"②、非嵌套路由配置",charIndex:2020},{level:3,title:"三、react router v6 与 v5比较",slug:"三、react-router-v6-与-v5比较",normalizedTitle:"三、react router v6 与 v5 比较",charIndex:2787},{level:3,title:"四、路由相关",slug:"四、路由相关",normalizedTitle:"四、路由相关",charIndex:3093},{level:4,title:"1、路由传参的三种方式",slug:"_1、路由传参的三种方式",normalizedTitle:"1、路由传参的三种方式",charIndex:3103},{level:5,title:"(1)、向路由传递Params参数",slug:"_1-、向路由传递params参数",normalizedTitle:"(1)、向路由传递 params 参数",charIndex:3118},{level:5,title:"(2)、向路由传递Search参数：",slug:"_2-、向路由传递search参数",normalizedTitle:"(2)、向路由传递 search 参数：",charIndex:4414},{level:5,title:"(3)、向路由传递state参数：",slug:"_3-、向路由传递state参数",normalizedTitle:"(3)、向路由传递 state 参数：",charIndex:5417},{level:4,title:"2、路由跳转的方法",slug:"_2、路由跳转的方法",normalizedTitle:"2、路由跳转的方法",charIndex:6528},{level:5,title:"(1)、编程式路由导航跳转",slug:"_1-、编程式路由导航跳转",normalizedTitle:"(1)、编程式路由导航跳转",charIndex:6541},{level:5,title:"(2)、通过Link组件或NavLink组件跳转",slug:"_2-、通过link组件或navlink组件跳转",normalizedTitle:"(2)、通过 link 组件或 navlink 组件跳转",charIndex:7332},{level:4,title:"3、通过配置文件实现路由管理（useRoutes）",slug:"_3、通过配置文件实现路由管理-useroutes",normalizedTitle:"3、通过配置文件实现路由管理（useroutes）",charIndex:7518}],lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:"一、基础框架搭建 二、路由配置 ①、嵌套路由配置 ②、非嵌套路由配置 三、react router v6 与 v5比较 四、路由相关 1、路由传参的三种方式 (1)、向路由传递Params参数 (2)、向路由传递Search参数： (3)、向路由传递state参数： 2、路由跳转的方法 (1)、编程式路由导航跳转 (2)、通过Link组件或NavLink组件跳转 3、通过配置文件实现路由管理（useRoutes）",content:"create-react-app 是来自于 FaceBook，通过该命令我们无需配置就能快速构建 React 开发环境。是基于 Webpack + ES6\n\n\n# 一、基础框架搭建\n\nnpm install -g create-react-app (cnpm install -g create-react-app)\ncreate-react-app react-demo\ncd react-demo\nnpm start\n\n\n1\n2\n3\n4\n\n\n现在就可以运行起来了。然而一个项目中还会涉及到页面间跳转等，这就需要使用到路由管理了。\n安装 react-router-dom： npm install react-router-dom --save （ps：这里安装完后版本是 6.2.1）\n\n现在来更改官网例子，首先在 src 文件夹下创建 components 文件夹，然后创建 Home.js 文件、Page1.js 文件、Page2.js 文件、Page3.js 文件，此时目录就如下所示。\n\n\n\n\n\nHome.js 文件代码如下：\n\nimport React from 'react';\nimport { Link, Outlet } from 'react-router-dom';\n \nexport default function Home () {\n\treturn(\n\t\t<div>\n\t\t\t<div>This is Home!</div>\n\t\t\t<Link to=\"/Page1?name=tom\" style={{color:'red'}}>\n\t\t\t\t<div>点击跳转到Page1</div>\n\t\t\t</Link>\n\t\t\t\n\t\t\t<Link to=\"/Page2\" style={{color:'blue'}}>\n\t\t\t\t<div>点击跳转到Page2</div>\n\t\t\t</Link>\n\n\t\t\t<Link to=\"/Page3\" style={{color:'gold'}}>\n\t\t\t\t<div>点击跳转到Page3</div>\n\t\t\t</Link>\n\n\t\t\t <Outlet />\n\n\t\t</div>\n\t);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\nPage1.js 代码如下：\n\nexport default function Page1 () {\n\treturn(\n\t\t<div>\n\t\t\t<div>This is Page1!</div>\n\t\t</div>\n\t);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nPage2.js 与 page3.js 代码内容类似。\n页面创建完了，现在来配置路由，更改 App.js 文件中内容，引入路由管理所需的组件，以及刚刚新建的几个页面。\n\n\n# 二、路由配置\n\n# ①、嵌套路由配置\n\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Home from './components/Home';\nimport Page1 from './components/Page1';\nimport Page2 from './components/Page2';\nimport Page3 from './components/Page3';\nimport './App.css';\n\nexport default class App extends React.Component {\n  render () {\n    return (\n      <Router>\n        <Routes>\n          <Route path=\"/\" exact element={<Home/>} >\n            <Route path=\"/Page1\" element={<Page1/>} />\n            <Route path=\"/Page2\" element={<Page2/>} />\n            <Route path=\"/Page3\" element={<Page3/>} />\n          </Route>\n        </Routes>\n      </Router>\n    );\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n下面运行 npm start 在浏览器中就可以看到如下效果：\n\n\n\n点击跳转到 Page1 后效果如下：\n\n\n\n# ②、非嵌套路由配置\n\n更改 App.js 文件中代码：\n\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Home from './components/Home';\nimport Page1 from './components/Page1';\nimport Page2 from './components/Page2';\nimport Page3 from './components/Page3';\nimport './App.css';\n\nexport default class App extends React.Component {\n  render () {\n    return (\n      <Router>\n        <Routes>\n          <Route path=\"/\" exact element={<Home/>} />\n          <Route path=\"/Page1\" element={<Page1/>} />\n          <Route path=\"/Page2\" element={<Page2/>} />\n          <Route path=\"/Page3\" element={<Page3/>} />\n        </Routes>\n      </Router>\n    );\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n现在点击跳转到 Page1 后效果如下：\n\n\n\n\n# 三、react router v6 与 v5 比较\n\n * 1、在 react-router-dom v6 中 Route 组件必须使用 Routes 嵌套，替换了 v5 中的 Switch 组件。\n * 2、将原来的 component 改为 element，必须以组件形式引入，而不是原来一个变量就行了。如 v6 element = {<Home/>} ，v5 compoent = {Home}\n * 3、嵌套路由必须在父级中添加 Outlet 组件，作为子组件的占位符，相当于 vue-router 中的 router-view。\n * 4、useNavigate 替代了 useHistory\n\n\n# 四、路由相关\n\n# 1、路由传参的三种方式\n\n# (1)、向路由传递 Params 参数\n\n// 传递参数\n<Link to=\"/page1/tom\" style={{color:'red'}}>\n\t<div>点击跳转到Page1</div>\n</Link>\n\n// 路由配置修改(React Router V6)\n{\n\tpath: \"/page1/:name\",\n\telement: <Page1 />\n}\n\n// 函数组件接收参数\nimport { useParams } from \"react-router-dom\"\nconst params = useParams()\nconsole.log('获取参数', params.name)\n\n/* \n\t在v5的class组件中可以直接通过this.props.match.params获取到。\n\t在v6的class组件中使用this.props什么也获取不到，甚至打印this发现也是什么都没有\n*/\n\n/* \n\t在react router v6版本类组件接收参数，需要用到v5版本那样的WithRouter组件，v5自带，v6已移除\n\twithRouter是一个高阶函数组件，作用就是能够让不是通过路由匹配渲染的组件身上也具备history、location等对象属性\n*/\n// 自定义WithRouter组件\nimport { useParams, useLocation } from \"react-router-dom\"\n \nexport default function withRouter(Component) {\n  return (props) => {\n    const params = useParams();\n    const location = useLocation();\n    return <Component {...props} params={params} location={location} />\n  }\n}\n\n\n// 然后在需要获取参数的组件中这样使用\nimport React, { useEffect } from 'react';\nimport withRouter from '../WithRouter';\n\nclass Page1 extends React.Component {\n\trender() {\n\t\t// 获取params参数\n\t\tconsole.log('params', this.props.params)\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tpage1\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withRouter(Page1);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n\n\n# (2)、向路由传递 Search 参数：\n\n// 传递参数\n<Link to=\"/page1?name=tom&age=20\" style={{color:'red'}}>\n\t<div>点击跳转到Page1</div>\n</Link>\n\n// 函数组件（function组件）接收参数\nimport { useSearchParams  } from \"react-router-dom\";\nconst [searchParams, setSearchParams] = useSearchParams();\nconsole.log('searchParams', searchParams.get(\"name\"))\n// setSearchParams(\"name=jack&age=30\")  // 用于更新search参数\n\n/* \n\t在v5类组件（class组件）接收参数可以直接通过this.props.location.search接收\n*/\nconst params = this.props.location.search\nconsole.log(\"参数\", params) // 结果类似这样，\"?name=tom&age=20\"\n\n/*\n\t在v6类组件中接收参数需要用到WithRouter组件，否则this.props.location什么也获取不到\n*/\nimport React, { useEffect } from 'react';\nimport withRouter from '../WithRouter';\n\nclass Page1 extends React.Component {\n\trender() {\n\t\t// 获取Search参数\n\t\tconsole.log('params', this.props.location.search) // \"?name=tom&age=20\"\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tpage1\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withRouter(Page1);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n# (3)、向路由传递 state 参数：\n\n// 在react router v5中这样传递\n<Link to={{ pathname: \"/page1\", state: {name: 'tom', age: 28} }} style={{color:'red'}}>\n\t<div>点击跳转到Page1</div>\n</Link>\n\n{/* 在react router v6中需要这样传递 */}\n<Link to=\"/page1\" state={{name: 'tom', age: 28}} style={{color:'red'}}>\n\t<div>点击跳转到Page1</div>\n</Link>\n\n{ /* 在react router v5，类组件中可直接获取state */ }\nconsole.log(\"state\", this.props.location.state)  // \n\n// 在react router v6中需要使用WithRouter组件将需要获取state的组件包裹起来才能获取到\nimport React, { useEffect } from 'react';\nimport withRouter from '../WithRouter';\n\nclass Page1 extends React.Component {\n\trender() {\n\t\t// 获取state参数\n\t\tconsole.log('params', this.props.location.state)\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tpage1\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withRouter(Page1);\n\n\n// 在react router v6函数组件中获取state\nimport { useLocation } from \"react-router-dom\";\n\nexport default function Page1 () {\n\tconst location = useLocation()\n\tconsole.log(\"state\", location.state)\n\treturn(\n\t\t<div>\n\t\t\t<div>Page1!</div>\n\t\t</div>\n\t);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n# 2、路由跳转的方法\n\n# (1)、编程式路由导航跳转\n\n// react router v5 history方法跳转\n// push跳转\nthis.props.history.push('/page3');\n\n// push跳转携带params参数\nthis.props.history.push(`/page3/tom/28`)\n\n// push跳转携带search参数\nthis.props.history.push(`/page3?name=tom&age=28`)\n\n// push跳转携带state参数\nthis.props.history.push('/page3', {name: 'tom', age: 28})\n\n// replace跳转，携带参数同push跳转\nthis.props.history.replace('/page3')\n\n\n\n// react router v6 跳转\nimport { useNavigate } from 'react-router-dom'\n\nconst navigate = useNavigate()\n// 携带search参数\nnavigate(\"/page1?name=tom&age=28\")\n\n// 携带state参数\nnavigate(\"/page1\", {state: {name: 'tom', age: 28}})\n\n// 携带params参数时，需要在路由配置里进行动态路由配置\nnavigate('/page1/tom/28')\n\n// 前进一步\nnavigate(1)\n\n// 后退一步\nnavigate(-1)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n# (2)、通过 Link 组件或 NavLink 组件跳转\n\n// 默认是push跳转，可通过replace属性开始replace模式跳转，可携带params参数、search参数、replace参数\n<Link to=\"/page1\" style={{color:'red'}}>\n\t<div>点击跳转到Page1</div>\n</Link>\n\n\n1\n2\n3\n4\n\n\n# 3、通过配置文件实现路由管理（useRoutes）\n\n在 src 目录下新建 routes 文件夹，在该文件夹下新建 routes.js 文件，代码如下：\n\nimport React from 'react';\nimport Home from '../components/Home';\nimport Page1 from '../components/Page1';\nimport Page2 from '../components/Page2';\nimport Page3 from '../components/Page3';\n\nconst routes = [\n\t{\n\t\tpath: \"/\",\n\t\telement: <Home />,\n\t\tchildren: [\n\t\t\t{\n\t\t\t\tpath: \"page1\",\n\t\t\t\telement: <Page1 />\n\t\t\t},\n\t\t\t{\n\t\t\t\tpath: \"page2\",\n\t\t\t\telement: <Page2 />\n\t\t\t},\n\t\t\t{\n\t\t\t\tpath: \"page3\",\n\t\t\t\telement: <Page3 />\n\t\t\t}\n\t\t]\n\t}\n]\n\nexport default routes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n更改 App.js 文件代码：\n\nimport React from 'react';\nimport { BrowserRouter as Router, useRoutes } from 'react-router-dom';\nimport routes from './routes/routes.js'\nimport './App.css';\n\nexport default function App () {\n  const GetRoutes = () => {\n    const route = useRoutes(routes)\n    return route\n  }\n  return (\n    <Router>\n      <GetRoutes />\n    </Router>\n  )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nps：useRoutes 的整个组件都必须放入 Router 组件当中",normalizedContent:"create-react-app 是来自于 facebook，通过该命令我们无需配置就能快速构建 react 开发环境。是基于 webpack + es6\n\n\n# 一、基础框架搭建\n\nnpm install -g create-react-app (cnpm install -g create-react-app)\ncreate-react-app react-demo\ncd react-demo\nnpm start\n\n\n1\n2\n3\n4\n\n\n现在就可以运行起来了。然而一个项目中还会涉及到页面间跳转等，这就需要使用到路由管理了。\n安装 react-router-dom： npm install react-router-dom --save （ps：这里安装完后版本是 6.2.1）\n\n现在来更改官网例子，首先在 src 文件夹下创建 components 文件夹，然后创建 home.js 文件、page1.js 文件、page2.js 文件、page3.js 文件，此时目录就如下所示。\n\n\n\n\n\nhome.js 文件代码如下：\n\nimport react from 'react';\nimport { link, outlet } from 'react-router-dom';\n \nexport default function home () {\n\treturn(\n\t\t<div>\n\t\t\t<div>this is home!</div>\n\t\t\t<link to=\"/page1?name=tom\" style={{color:'red'}}>\n\t\t\t\t<div>点击跳转到page1</div>\n\t\t\t</link>\n\t\t\t\n\t\t\t<link to=\"/page2\" style={{color:'blue'}}>\n\t\t\t\t<div>点击跳转到page2</div>\n\t\t\t</link>\n\n\t\t\t<link to=\"/page3\" style={{color:'gold'}}>\n\t\t\t\t<div>点击跳转到page3</div>\n\t\t\t</link>\n\n\t\t\t <outlet />\n\n\t\t</div>\n\t);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\npage1.js 代码如下：\n\nexport default function page1 () {\n\treturn(\n\t\t<div>\n\t\t\t<div>this is page1!</div>\n\t\t</div>\n\t);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\npage2.js 与 page3.js 代码内容类似。\n页面创建完了，现在来配置路由，更改 app.js 文件中内容，引入路由管理所需的组件，以及刚刚新建的几个页面。\n\n\n# 二、路由配置\n\n# ①、嵌套路由配置\n\nimport react from 'react';\nimport { browserrouter as router, route, routes } from 'react-router-dom';\nimport home from './components/home';\nimport page1 from './components/page1';\nimport page2 from './components/page2';\nimport page3 from './components/page3';\nimport './app.css';\n\nexport default class app extends react.component {\n  render () {\n    return (\n      <router>\n        <routes>\n          <route path=\"/\" exact element={<home/>} >\n            <route path=\"/page1\" element={<page1/>} />\n            <route path=\"/page2\" element={<page2/>} />\n            <route path=\"/page3\" element={<page3/>} />\n          </route>\n        </routes>\n      </router>\n    );\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n下面运行 npm start 在浏览器中就可以看到如下效果：\n\n\n\n点击跳转到 page1 后效果如下：\n\n\n\n# ②、非嵌套路由配置\n\n更改 app.js 文件中代码：\n\nimport react from 'react';\nimport { browserrouter as router, route, routes } from 'react-router-dom';\nimport home from './components/home';\nimport page1 from './components/page1';\nimport page2 from './components/page2';\nimport page3 from './components/page3';\nimport './app.css';\n\nexport default class app extends react.component {\n  render () {\n    return (\n      <router>\n        <routes>\n          <route path=\"/\" exact element={<home/>} />\n          <route path=\"/page1\" element={<page1/>} />\n          <route path=\"/page2\" element={<page2/>} />\n          <route path=\"/page3\" element={<page3/>} />\n        </routes>\n      </router>\n    );\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n现在点击跳转到 page1 后效果如下：\n\n\n\n\n# 三、react router v6 与 v5 比较\n\n * 1、在 react-router-dom v6 中 route 组件必须使用 routes 嵌套，替换了 v5 中的 switch 组件。\n * 2、将原来的 component 改为 element，必须以组件形式引入，而不是原来一个变量就行了。如 v6 element = {<home/>} ，v5 compoent = {home}\n * 3、嵌套路由必须在父级中添加 outlet 组件，作为子组件的占位符，相当于 vue-router 中的 router-view。\n * 4、usenavigate 替代了 usehistory\n\n\n# 四、路由相关\n\n# 1、路由传参的三种方式\n\n# (1)、向路由传递 params 参数\n\n// 传递参数\n<link to=\"/page1/tom\" style={{color:'red'}}>\n\t<div>点击跳转到page1</div>\n</link>\n\n// 路由配置修改(react router v6)\n{\n\tpath: \"/page1/:name\",\n\telement: <page1 />\n}\n\n// 函数组件接收参数\nimport { useparams } from \"react-router-dom\"\nconst params = useparams()\nconsole.log('获取参数', params.name)\n\n/* \n\t在v5的class组件中可以直接通过this.props.match.params获取到。\n\t在v6的class组件中使用this.props什么也获取不到，甚至打印this发现也是什么都没有\n*/\n\n/* \n\t在react router v6版本类组件接收参数，需要用到v5版本那样的withrouter组件，v5自带，v6已移除\n\twithrouter是一个高阶函数组件，作用就是能够让不是通过路由匹配渲染的组件身上也具备history、location等对象属性\n*/\n// 自定义withrouter组件\nimport { useparams, uselocation } from \"react-router-dom\"\n \nexport default function withrouter(component) {\n  return (props) => {\n    const params = useparams();\n    const location = uselocation();\n    return <component {...props} params={params} location={location} />\n  }\n}\n\n\n// 然后在需要获取参数的组件中这样使用\nimport react, { useeffect } from 'react';\nimport withrouter from '../withrouter';\n\nclass page1 extends react.component {\n\trender() {\n\t\t// 获取params参数\n\t\tconsole.log('params', this.props.params)\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tpage1\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withrouter(page1);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n\n\n# (2)、向路由传递 search 参数：\n\n// 传递参数\n<link to=\"/page1?name=tom&age=20\" style={{color:'red'}}>\n\t<div>点击跳转到page1</div>\n</link>\n\n// 函数组件（function组件）接收参数\nimport { usesearchparams  } from \"react-router-dom\";\nconst [searchparams, setsearchparams] = usesearchparams();\nconsole.log('searchparams', searchparams.get(\"name\"))\n// setsearchparams(\"name=jack&age=30\")  // 用于更新search参数\n\n/* \n\t在v5类组件（class组件）接收参数可以直接通过this.props.location.search接收\n*/\nconst params = this.props.location.search\nconsole.log(\"参数\", params) // 结果类似这样，\"?name=tom&age=20\"\n\n/*\n\t在v6类组件中接收参数需要用到withrouter组件，否则this.props.location什么也获取不到\n*/\nimport react, { useeffect } from 'react';\nimport withrouter from '../withrouter';\n\nclass page1 extends react.component {\n\trender() {\n\t\t// 获取search参数\n\t\tconsole.log('params', this.props.location.search) // \"?name=tom&age=20\"\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tpage1\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withrouter(page1);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n# (3)、向路由传递 state 参数：\n\n// 在react router v5中这样传递\n<link to={{ pathname: \"/page1\", state: {name: 'tom', age: 28} }} style={{color:'red'}}>\n\t<div>点击跳转到page1</div>\n</link>\n\n{/* 在react router v6中需要这样传递 */}\n<link to=\"/page1\" state={{name: 'tom', age: 28}} style={{color:'red'}}>\n\t<div>点击跳转到page1</div>\n</link>\n\n{ /* 在react router v5，类组件中可直接获取state */ }\nconsole.log(\"state\", this.props.location.state)  // \n\n// 在react router v6中需要使用withrouter组件将需要获取state的组件包裹起来才能获取到\nimport react, { useeffect } from 'react';\nimport withrouter from '../withrouter';\n\nclass page1 extends react.component {\n\trender() {\n\t\t// 获取state参数\n\t\tconsole.log('params', this.props.location.state)\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tpage1\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withrouter(page1);\n\n\n// 在react router v6函数组件中获取state\nimport { uselocation } from \"react-router-dom\";\n\nexport default function page1 () {\n\tconst location = uselocation()\n\tconsole.log(\"state\", location.state)\n\treturn(\n\t\t<div>\n\t\t\t<div>page1!</div>\n\t\t</div>\n\t);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n# 2、路由跳转的方法\n\n# (1)、编程式路由导航跳转\n\n// react router v5 history方法跳转\n// push跳转\nthis.props.history.push('/page3');\n\n// push跳转携带params参数\nthis.props.history.push(`/page3/tom/28`)\n\n// push跳转携带search参数\nthis.props.history.push(`/page3?name=tom&age=28`)\n\n// push跳转携带state参数\nthis.props.history.push('/page3', {name: 'tom', age: 28})\n\n// replace跳转，携带参数同push跳转\nthis.props.history.replace('/page3')\n\n\n\n// react router v6 跳转\nimport { usenavigate } from 'react-router-dom'\n\nconst navigate = usenavigate()\n// 携带search参数\nnavigate(\"/page1?name=tom&age=28\")\n\n// 携带state参数\nnavigate(\"/page1\", {state: {name: 'tom', age: 28}})\n\n// 携带params参数时，需要在路由配置里进行动态路由配置\nnavigate('/page1/tom/28')\n\n// 前进一步\nnavigate(1)\n\n// 后退一步\nnavigate(-1)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n# (2)、通过 link 组件或 navlink 组件跳转\n\n// 默认是push跳转，可通过replace属性开始replace模式跳转，可携带params参数、search参数、replace参数\n<link to=\"/page1\" style={{color:'red'}}>\n\t<div>点击跳转到page1</div>\n</link>\n\n\n1\n2\n3\n4\n\n\n# 3、通过配置文件实现路由管理（useroutes）\n\n在 src 目录下新建 routes 文件夹，在该文件夹下新建 routes.js 文件，代码如下：\n\nimport react from 'react';\nimport home from '../components/home';\nimport page1 from '../components/page1';\nimport page2 from '../components/page2';\nimport page3 from '../components/page3';\n\nconst routes = [\n\t{\n\t\tpath: \"/\",\n\t\telement: <home />,\n\t\tchildren: [\n\t\t\t{\n\t\t\t\tpath: \"page1\",\n\t\t\t\telement: <page1 />\n\t\t\t},\n\t\t\t{\n\t\t\t\tpath: \"page2\",\n\t\t\t\telement: <page2 />\n\t\t\t},\n\t\t\t{\n\t\t\t\tpath: \"page3\",\n\t\t\t\telement: <page3 />\n\t\t\t}\n\t\t]\n\t}\n]\n\nexport default routes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n更改 app.js 文件代码：\n\nimport react from 'react';\nimport { browserrouter as router, useroutes } from 'react-router-dom';\nimport routes from './routes/routes.js'\nimport './app.css';\n\nexport default function app () {\n  const getroutes = () => {\n    const route = useroutes(routes)\n    return route\n  }\n  return (\n    <router>\n      <getroutes />\n    </router>\n  )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nps：useroutes 的整个组件都必须放入 router 组件当中",charsets:{cjk:!0}},{title:"npm、nvm、nrm相关知识",frontmatter:{title:"npm、nvm、nrm相关知识",date:"2024-04-16T10:29:23.000Z",permalink:"/pages/1f73d1/",categories:["《NodeJs》"],tags:[null]},regularPath:"/%E3%80%8ANodeJs%E3%80%8B%E7%AC%94%E8%AE%B0/04.Node%E7%9B%B8%E5%85%B3/01.npm%E3%80%81nvm%E3%80%81nrm%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86.html",relativePath:"《NodeJs》笔记/04.Node相关/01.npm、nvm、nrm相关知识.md",key:"v-10cc7a82",path:"/pages/1f73d1/",headers:[{level:2,title:"npm",slug:"npm",normalizedTitle:"npm",charIndex:2},{level:2,title:"nrm",slug:"nrm",normalizedTitle:"nrm",charIndex:570},{level:2,title:"nvm",slug:"nvm",normalizedTitle:"nvm",charIndex:729},{level:3,title:"安装nvm（Mac上安装如下）",slug:"安装nvm-mac上安装如下",normalizedTitle:"安装 nvm（mac 上安装如下）",charIndex:779},{level:3,title:"配置nvm环境变量",slug:"配置nvm环境变量",normalizedTitle:"配置 nvm 环境变量",charIndex:950},{level:3,title:"nvm常用命令",slug:"nvm常用命令",normalizedTitle:"nvm 常用命令",charIndex:1283}],lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:"npm nrm nvm 安装nvm（Mac上安装如下） 配置nvm环境变量 nvm常用命令",content:'# npm\n\nnpm 是 node 包管理工具，可以让开发者方便快捷地使用第三方模块，同时，开发者也可以将自己编写的模块发布到 npm 上供其他人使用\n\nnpm 相关命令：\n\n// 查看npm的版本\nnpm -v\n\n// 初始化npm项目\nnpm init -y\n\n// 下载包\nnpm install 包名称 或 npm i 包名称\n\n// 下载指定版本的包\nnpm install 包名称@4\n\n// 生产环境会用到，把模块和版本号添加到dependencies\nnpm install 包名称 -S  或 npm install 包名称 --save\n\n// 仅开发环境才会用到，把模块和版本号添加到devdependencies\nnpm install 包名称 -D 或 npm install 包名称 --save-dev\n\n// 卸载包\nnpm uninstall 包名称\n\n// 查看镜像源\nnpm config get registry\n\n// 修改镜像源地址\nnpm config set registry http://registry.npm.taobao.org\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# nrm\n\n方便快速的在不同的镜像之间进行切换，如切换到 npm、yarn、cnpm、taobao 等等\n\nnrm 常用命令\n\n// 全局安装nrm\nnpm install nrm -g\n\n// 查看所有可用的镜像\nnrm ls\n\n// 切换镜像\nnrm use 镜像名称\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# nvm\n\nnvm 是一个 node 版本管理工具，方便在一台电脑上随时切换 node 版本\n\n\n# 安装 nvm（Mac 上安装如下）\n\nbrew install nvm\n\n\n1\n\n\n或者从 github 上下载 nvm 仓库到本地\n\n// 第1步，克隆仓库到本地\ngit clone https://github.com/nvm-sh/nvm.git\n\n// 第2步,进入nvm项目，执行install.sh\n\n\n1\n2\n3\n4\n\n\n\n# 配置 nvm 环境变量\n\n// 第1步，将下述代码复制到 ~/.bash_profile文件中保存\nexport NVM_DIR="$HOME/.nvm"\n[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n\n// 第2步，执行以下命令，让配置文件在修改后立即生效\nsource ~/.bash_profile\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n至此，nvm 安装完毕。\n\n\n# nvm 常用命令\n\n// 查看当前已安装的node版本\nnvm list 或nvm ls\n\n// 查看远程所有可安装的node版本\nnvm ls-remote\n\n// 安装指定版本的node\nnvm install 版本号\n\n// 安装最新版本的node\nnvm install node\n\n// 使用指定版本的node，仅针对当前当次命令窗口生效\nnvm use 版本号\n\n// 写在指定版本的node\nnvm uninstall 版本号\n\n// 设置默认版本的node\nnvm alias default 版本号\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',normalizedContent:'# npm\n\nnpm 是 node 包管理工具，可以让开发者方便快捷地使用第三方模块，同时，开发者也可以将自己编写的模块发布到 npm 上供其他人使用\n\nnpm 相关命令：\n\n// 查看npm的版本\nnpm -v\n\n// 初始化npm项目\nnpm init -y\n\n// 下载包\nnpm install 包名称 或 npm i 包名称\n\n// 下载指定版本的包\nnpm install 包名称@4\n\n// 生产环境会用到，把模块和版本号添加到dependencies\nnpm install 包名称 -s  或 npm install 包名称 --save\n\n// 仅开发环境才会用到，把模块和版本号添加到devdependencies\nnpm install 包名称 -d 或 npm install 包名称 --save-dev\n\n// 卸载包\nnpm uninstall 包名称\n\n// 查看镜像源\nnpm config get registry\n\n// 修改镜像源地址\nnpm config set registry http://registry.npm.taobao.org\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# nrm\n\n方便快速的在不同的镜像之间进行切换，如切换到 npm、yarn、cnpm、taobao 等等\n\nnrm 常用命令\n\n// 全局安装nrm\nnpm install nrm -g\n\n// 查看所有可用的镜像\nnrm ls\n\n// 切换镜像\nnrm use 镜像名称\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# nvm\n\nnvm 是一个 node 版本管理工具，方便在一台电脑上随时切换 node 版本\n\n\n# 安装 nvm（mac 上安装如下）\n\nbrew install nvm\n\n\n1\n\n\n或者从 github 上下载 nvm 仓库到本地\n\n// 第1步，克隆仓库到本地\ngit clone https://github.com/nvm-sh/nvm.git\n\n// 第2步,进入nvm项目，执行install.sh\n\n\n1\n2\n3\n4\n\n\n\n# 配置 nvm 环境变量\n\n// 第1步，将下述代码复制到 ~/.bash_profile文件中保存\nexport nvm_dir="$home/.nvm"\n[ -s "$nvm_dir/nvm.sh" ] && \\. "$nvm_dir/nvm.sh"  # this loads nvm\n[ -s "$nvm_dir/bash_completion" ] && \\. "$nvm_dir/bash_completion"  # this loads nvm bash_completion\n\n// 第2步，执行以下命令，让配置文件在修改后立即生效\nsource ~/.bash_profile\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n至此，nvm 安装完毕。\n\n\n# nvm 常用命令\n\n// 查看当前已安装的node版本\nnvm list 或nvm ls\n\n// 查看远程所有可安装的node版本\nnvm ls-remote\n\n// 安装指定版本的node\nnvm install 版本号\n\n// 安装最新版本的node\nnvm install node\n\n// 使用指定版本的node，仅针对当前当次命令窗口生效\nnvm use 版本号\n\n// 写在指定版本的node\nnvm uninstall 版本号\n\n// 设置默认版本的node\nnvm alias default 版本号\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',charsets:{cjk:!0}},{title:"React之生命周期钩子",frontmatter:{title:"React之生命周期钩子",date:"2024-03-11T14:28:55.000Z",permalink:"/pages/81ee3b/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/06.React%E4%B9%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90.html",relativePath:"《React》笔记/01.React/06.React之生命周期钩子.md",key:"v-a99d4dc2",path:"/pages/81ee3b/",headers:[{level:2,title:"React 17.x之前",slug:"react-17-x之前",normalizedTitle:"react 17.x 之前",charIndex:41},{level:3,title:"constructor：在类式组件挂载之前运行。",slug:"constructor-在类式组件挂载之前运行。",normalizedTitle:"constructor：在类式组件挂载之前运行。",charIndex:88},{level:3,title:"componentWillMount：组件挂载前调用",slug:"componentwillmount-组件挂载前调用",normalizedTitle:"componentwillmount：组件挂载前调用",charIndex:185},{level:3,title:"componentDidMount：组件挂载完毕调用",slug:"componentdidmount-组件挂载完毕调用",normalizedTitle:"componentdidmount：组件挂载完毕调用",charIndex:356},{level:3,title:"shouldComponentUpdate(nextProps, nextState, nextContext)：组件是否需要更新",slug:"shouldcomponentupdate-nextprops-nextstate-nextcontext-组件是否需要更新",normalizedTitle:"shouldcomponentupdate (nextprops, nextstate, nextcontext)：组件是否需要更新",charIndex:433},{level:3,title:"componentWillUpdate(nextProps, nextState)：组件将要更新时调用",slug:"componentwillupdate-nextprops-nextstate-组件将要更新时调用",normalizedTitle:"componentwillupdate (nextprops, nextstate)：组件将要更新时调用",charIndex:755},{level:3,title:"componentDidUpdate(prevProps, prevState, snapshot?)：组件更新了 props 或 state 重新渲染后立即调用它",slug:"componentdidupdate-prevprops-prevstate-snapshot-组件更新了-props-或-state-重新渲染后立即调用它",normalizedTitle:"componentdidupdate (prevprops, prevstate, snapshot?)：组件更新了 props 或 state 重新渲染后立即调用它",charIndex:954},{level:3,title:"componentWillReceiveProps(nextProps)：子组件将要接收新的props时调用，第一次不会调用",slug:"componentwillreceiveprops-nextprops-子组件将要接收新的props时调用-第一次不会调用",normalizedTitle:"componentwillreceiveprops (nextprops)：子组件将要接收新的 props 时调用，第一次不会调用",charIndex:1269},{level:3,title:"componentWillUnmount：组件将要卸载前调用",slug:"componentwillunmount-组件将要卸载前调用",normalizedTitle:"componentwillunmount：组件将要卸载前调用",charIndex:1493},{level:2,title:"旧版总结",slug:"旧版总结",normalizedTitle:"旧版总结",charIndex:1566},{level:2,title:"React 17.x之后",slug:"react-17-x之后",normalizedTitle:"react 17.x 之后",charIndex:1629},{level:3,title:"getDerivedStateFromProps(props, state)：返回一个对象来更新 state，或返回 null 不更新任何内容。（使用场景极罕见）",slug:"getderivedstatefromprops-props-state-返回一个对象来更新-state-或返回-null-不更新任何内容。-使用场景极罕见",normalizedTitle:"getderivedstatefromprops (props, state)：返回一个对象来更新 state，或返回 null 不更新任何内容。（使用场景极罕见）",charIndex:1676},{level:3,title:"getSnapshotBeforeUpdate(prevProps, prevState)：在 React 更新 DOM 之前时直接调用它，使你的组件能够在 DOM 发生更改之前捕获一些信息（使用场景极罕见）",slug:"getsnapshotbeforeupdate-prevprops-prevstate-在-react-更新-dom-之前时直接调用它-使你的组件能够在-dom-发生更改之前捕获一些信息-使用场景极罕见",normalizedTitle:"getsnapshotbeforeupdate (prevprops, prevstate)：在 react 更新 dom 之前时直接调用它，使你的组件能够在 dom 发生更改之前捕获一些信息（使用场景极罕见）",charIndex:1903},{level:2,title:"新版总结",slug:"新版总结",normalizedTitle:"新版总结",charIndex:2210}],lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:"React 17.x之前 constructor：在类式组件挂载之前运行。 componentWillMount：组件挂载前调用 componentDidMount：组件挂载完毕调用 shouldComponentUpdate(nextProps, nextState, nextContext)：组件是否需要更新 componentWillUpdate(nextProps, nextState)：组件将要更新时调用 componentDidUpdate(prevProps, prevState, snapshot?)：组件更新了 props 或 state 重新渲染后立即调用它 componentWillReceiveProps(nextProps)：子组件将要接收新的props时调用，第一次不会调用 componentWillUnmount：组件将要卸载前调用 旧版总结 React 17.x之后 getDerivedStateFromProps(props, state)：返回一个对象来更新 state，或返回 null 不更新任何内容。（使用场景极罕见） getSnapshotBeforeUpdate(prevProps, prevState)：在 React 更新 DOM 之前时直接调用它，使你的组件能够在 DOM 发生更改之前捕获一些信息（使用场景极罕见） 新版总结",content:"在 React 中，因为涉及到新旧版本，所以生命周期钩子也是有所不同的。\n\n\n# React 17.x 之前\n\n在 React 17.x 之前，生命周期钩子是这样的\n\n\n\n# constructor：在类式组件挂载之前运行。\n\n * 一般来说，在 React 中 constructor 仅用于两个目的，即声明 state 以及将你的类方法绑定到你的类实例上。\n\n\n# componentWillMount：组件挂载前调用\n\n * 在 React 17.x 之前叫 componentWillMount，在 17.x 中使用该钩子，控制台会警告，使用 UNSAFE_componentWillMount 可解决警告问题。在 18.x 中旧名称已被弃用，在 React 未来的主版本中，只有新名称才有效。\n\n\n# componentDidMount：组件挂载完毕调用\n\n * 在这个钩子里可以做一些常用的初始化操作，例如，发送网络请求、开启定时器，订阅消息等\n\n\n# shouldComponentUpdate (nextProps, nextState, nextContext)：组件是否需要更新\n\n * 返回一个布尔值，返回 true 表示组件需要更新，false 表示不需要更新，默认值为 true。\n * 当收到新的 props 或 state 时，React 会在渲染之前调用 shouldComponentUpdate。\n * 初始渲染或使用 forceUpdate 时将不会调用此方法。\n * 接收三个参数，nextProps（组件即将用来渲染的下一个 props），nextState（组件即将渲染的下一个 state），nextContext（组件将要渲染的下一个 context）\n\n\n# componentWillUpdate (nextProps, nextState)：组件将要更新时调用\n\n * 在 React 17.x 之前叫 componentWillUpdate，在 17.x 中使用该钩子，控制台会警告，使用 UNSAFE_componentWillUpdate 可解决警告问题。在 18.x 中旧名称已被弃用，在 React 未来的主版本中，只有新名称才有效。\n\n\n# componentDidUpdate (prevProps, prevState, snapshot?)：组件更新了 props 或 state 重新渲染后立即调用它\n\n * 不会在首次渲染时调用\n * prevProps (更新之前的 props)，prevState (更新之前的 state)，snapshot (如果你实现了 getSnapshotBeforeUpdate 方法，那么 snapshot 将包含从该方法返回的值。否则它将是 undefined)\n * 如果定义了 shouldComponentUpdate 并且返回值是 false 的话，那么 componentDidUpdate 将不会被调用\n\n\n# componentWillReceiveProps (nextProps)：子组件将要接收新的 props 时调用，第一次不会调用\n\n * 在 React 17.x 之前叫 componentWillReceiveProps，在 17.x 中使用该钩子，控制台会警告，使用 UNSAFE_componentWillReceiveProps 可解决警告问题。在 18.x 中旧名称已被弃用，在 React 未来的主版本中，只有新名称才有效。\n\n\n# componentWillUnmount：组件将要卸载前调用\n\n * 在这个钩子里，可以做一些收尾工作，例如，清除定时器，取消订阅消息等\n\n\n# 旧版总结\n\nReact 旧版本（17.x 之前）生命周期钩子主要分三个阶段，初始化阶段、更新阶段、卸载阶段。如图：\n\n\n\n# React 17.x 之后\n\n在 React 17.x 之后，生命周期钩子有所调整\n\n\n\n# getDerivedStateFromProps (props, state)：返回一个对象来更新 state，或返回 null 不更新任何内容。（使用场景极罕见）\n\n * 如果定义了 static getDerivedStateFromProps，React 会在初始挂载和后续更新时调用 render 之前调用它\n * 接收 2 个参数，props (组件即将用来渲染的下一个 props)、state (组件即将渲染的下一个 state)\n\n\n# getSnapshotBeforeUpdate (prevProps, prevState)：在 React 更新 DOM 之前时直接调用它，使你的组件能够在 DOM 发生更改之前捕获一些信息（使用场景极罕见）\n\n * 可以返回你想要的任何类型的快照值，或者是 null，返回的值将作为第三个参数传递给 componentDidUpdate\n * 如果定义了 shouldComponentUpdate 并返回了 false，则 getSnapshotBeforeUpdate 不会被调用\n * 接收两个参数，prevProps (更新之前的 Props)、prevState (更新之前的 State)\n\n\n# 新版总结\n\nReact 17.x 之后生命周期钩子也分三个阶段，初始化阶段、更新阶段、卸载阶段。\n\n\n与老版本相比，新版本遗弃了 componentWillMount、componentWillUpdate、componentWillReceiveProps 这三个钩子，新增加了两个使用场景极罕见的钩子，getDerivedStateFromProps、getSnapshotBeforeUpdate",normalizedContent:"在 react 中，因为涉及到新旧版本，所以生命周期钩子也是有所不同的。\n\n\n# react 17.x 之前\n\n在 react 17.x 之前，生命周期钩子是这样的\n\n\n\n# constructor：在类式组件挂载之前运行。\n\n * 一般来说，在 react 中 constructor 仅用于两个目的，即声明 state 以及将你的类方法绑定到你的类实例上。\n\n\n# componentwillmount：组件挂载前调用\n\n * 在 react 17.x 之前叫 componentwillmount，在 17.x 中使用该钩子，控制台会警告，使用 unsafe_componentwillmount 可解决警告问题。在 18.x 中旧名称已被弃用，在 react 未来的主版本中，只有新名称才有效。\n\n\n# componentdidmount：组件挂载完毕调用\n\n * 在这个钩子里可以做一些常用的初始化操作，例如，发送网络请求、开启定时器，订阅消息等\n\n\n# shouldcomponentupdate (nextprops, nextstate, nextcontext)：组件是否需要更新\n\n * 返回一个布尔值，返回 true 表示组件需要更新，false 表示不需要更新，默认值为 true。\n * 当收到新的 props 或 state 时，react 会在渲染之前调用 shouldcomponentupdate。\n * 初始渲染或使用 forceupdate 时将不会调用此方法。\n * 接收三个参数，nextprops（组件即将用来渲染的下一个 props），nextstate（组件即将渲染的下一个 state），nextcontext（组件将要渲染的下一个 context）\n\n\n# componentwillupdate (nextprops, nextstate)：组件将要更新时调用\n\n * 在 react 17.x 之前叫 componentwillupdate，在 17.x 中使用该钩子，控制台会警告，使用 unsafe_componentwillupdate 可解决警告问题。在 18.x 中旧名称已被弃用，在 react 未来的主版本中，只有新名称才有效。\n\n\n# componentdidupdate (prevprops, prevstate, snapshot?)：组件更新了 props 或 state 重新渲染后立即调用它\n\n * 不会在首次渲染时调用\n * prevprops (更新之前的 props)，prevstate (更新之前的 state)，snapshot (如果你实现了 getsnapshotbeforeupdate 方法，那么 snapshot 将包含从该方法返回的值。否则它将是 undefined)\n * 如果定义了 shouldcomponentupdate 并且返回值是 false 的话，那么 componentdidupdate 将不会被调用\n\n\n# componentwillreceiveprops (nextprops)：子组件将要接收新的 props 时调用，第一次不会调用\n\n * 在 react 17.x 之前叫 componentwillreceiveprops，在 17.x 中使用该钩子，控制台会警告，使用 unsafe_componentwillreceiveprops 可解决警告问题。在 18.x 中旧名称已被弃用，在 react 未来的主版本中，只有新名称才有效。\n\n\n# componentwillunmount：组件将要卸载前调用\n\n * 在这个钩子里，可以做一些收尾工作，例如，清除定时器，取消订阅消息等\n\n\n# 旧版总结\n\nreact 旧版本（17.x 之前）生命周期钩子主要分三个阶段，初始化阶段、更新阶段、卸载阶段。如图：\n\n\n\n# react 17.x 之后\n\n在 react 17.x 之后，生命周期钩子有所调整\n\n\n\n# getderivedstatefromprops (props, state)：返回一个对象来更新 state，或返回 null 不更新任何内容。（使用场景极罕见）\n\n * 如果定义了 static getderivedstatefromprops，react 会在初始挂载和后续更新时调用 render 之前调用它\n * 接收 2 个参数，props (组件即将用来渲染的下一个 props)、state (组件即将渲染的下一个 state)\n\n\n# getsnapshotbeforeupdate (prevprops, prevstate)：在 react 更新 dom 之前时直接调用它，使你的组件能够在 dom 发生更改之前捕获一些信息（使用场景极罕见）\n\n * 可以返回你想要的任何类型的快照值，或者是 null，返回的值将作为第三个参数传递给 componentdidupdate\n * 如果定义了 shouldcomponentupdate 并返回了 false，则 getsnapshotbeforeupdate 不会被调用\n * 接收两个参数，prevprops (更新之前的 props)、prevstate (更新之前的 state)\n\n\n# 新版总结\n\nreact 17.x 之后生命周期钩子也分三个阶段，初始化阶段、更新阶段、卸载阶段。\n\n\n与老版本相比，新版本遗弃了 componentwillmount、componentwillupdate、componentwillreceiveprops 这三个钩子，新增加了两个使用场景极罕见的钩子，getderivedstatefromprops、getsnapshotbeforeupdate",charsets:{cjk:!0}},{title:"React之key的使用",frontmatter:{title:"React之key的使用",date:"2024-03-11T17:00:53.000Z",permalink:"/pages/a9fc09/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/07.React%E4%B9%8Bkey%E7%9A%84%E4%BD%BF%E7%94%A8.html",relativePath:"《React》笔记/01.React/07.React之key的使用.md",key:"v-126035b2",path:"/pages/a9fc09/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"我们在进行列表渲染的时候，经常会需要给数组中的每一项指定一个 key，否则控制台会有警告，类似这种警告，Warning: Each child in a list should have a unique “key” prop.\n\n那么问题来了，为什么需要指定 key？如何指定 key？key 的作用是啥？\n\n首先，key 是虚拟 Dom 对象的标识，在更新显示时 key 有着十分重要的作用，当状态中的数据发生变化时，React 会根据新数据生成新的虚拟 Dom，随后 React 进行新的虚拟 Dom 与旧的虚拟 Dom 进行 diff 比较，规则如下：\n\n * 旧虚拟 Dom 中找到了与新虚拟 Dom 相同的 key：\n   \n   《1》、若虚拟 Dom 中内容没变，直接使用之前的真实 Dom\n   \n   《2》、若虚拟 Dom 中内容变了，则生成新的真实 Dom，随后替换掉页面之前的真实 Dom\n * 旧虚拟 Dom 中未找到与新的虚拟 Dom 相同的 key：\n   根据数据创建新的真实 Dom，随后渲染到页面。\n\n如何设定 key？\n\n1、最好使用每条数据的唯一标识作为 key，如 id、手机号、身份证号、学号等唯一值。\n\n2、如果只是简单的展示数据，则可以使用 index\n\nkey 需要满足的条件：\n\n * key 值在兄弟节点之间必须是唯一的。 不过不要求全局唯一，在不同的数组中可以使用相同的 key。\n * key 值不能改变，否则就失去了使用 key 的意义！所以千万不要在渲染时动态地生成 key。\n\n在项目中我们经常会使用 index 作为 key，这除了有效率问题外，在多数情况下都不会引发界面效果问题，然而，在有些时候，key 确实会引发问题：\n\n比如，在对数据进行逆序添加、逆序删除等破坏顺序的操作时，会产生没有必要的真实 Dom 更新，虽然界面上不会有啥问题，但是会有效率问题，在数据量少的时候不会有什么影响，但是如果数据量非常大的时候，影响就很大了。\n\n\n再比如，页面结构中包含了输入类的 Dom，那么则会产生错误的 Dom 更新，导致界面出现问题",normalizedContent:"我们在进行列表渲染的时候，经常会需要给数组中的每一项指定一个 key，否则控制台会有警告，类似这种警告，warning: each child in a list should have a unique “key” prop.\n\n那么问题来了，为什么需要指定 key？如何指定 key？key 的作用是啥？\n\n首先，key 是虚拟 dom 对象的标识，在更新显示时 key 有着十分重要的作用，当状态中的数据发生变化时，react 会根据新数据生成新的虚拟 dom，随后 react 进行新的虚拟 dom 与旧的虚拟 dom 进行 diff 比较，规则如下：\n\n * 旧虚拟 dom 中找到了与新虚拟 dom 相同的 key：\n   \n   《1》、若虚拟 dom 中内容没变，直接使用之前的真实 dom\n   \n   《2》、若虚拟 dom 中内容变了，则生成新的真实 dom，随后替换掉页面之前的真实 dom\n * 旧虚拟 dom 中未找到与新的虚拟 dom 相同的 key：\n   根据数据创建新的真实 dom，随后渲染到页面。\n\n如何设定 key？\n\n1、最好使用每条数据的唯一标识作为 key，如 id、手机号、身份证号、学号等唯一值。\n\n2、如果只是简单的展示数据，则可以使用 index\n\nkey 需要满足的条件：\n\n * key 值在兄弟节点之间必须是唯一的。 不过不要求全局唯一，在不同的数组中可以使用相同的 key。\n * key 值不能改变，否则就失去了使用 key 的意义！所以千万不要在渲染时动态地生成 key。\n\n在项目中我们经常会使用 index 作为 key，这除了有效率问题外，在多数情况下都不会引发界面效果问题，然而，在有些时候，key 确实会引发问题：\n\n比如，在对数据进行逆序添加、逆序删除等破坏顺序的操作时，会产生没有必要的真实 dom 更新，虽然界面上不会有啥问题，但是会有效率问题，在数据量少的时候不会有什么影响，但是如果数据量非常大的时候，影响就很大了。\n\n\n再比如，页面结构中包含了输入类的 dom，那么则会产生错误的 dom 更新，导致界面出现问题",charsets:{cjk:!0}},{title:"React之代理服务器配置",frontmatter:{title:"React之代理服务器配置",date:"2024-03-12T18:24:06.000Z",permalink:"/pages/c59606/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/08.React%E4%B9%8B%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE.html",relativePath:"《React》笔记/01.React/08.React之代理服务器配置.md",key:"v-3ae7c090",path:"/pages/c59606/",headers:[{level:2,title:"两种实现方法",slug:"两种实现方法",normalizedTitle:"两种实现方法",charIndex:81},{level:3,title:"1、在项目根目录下的package.json中配置：",slug:"_1、在项目根目录下的package-json中配置",normalizedTitle:"1、在项目根目录下的 package.json 中配置：",charIndex:92},{level:3,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:263},{level:3,title:"2、通过编写setupProxy.js来配置",slug:"_2、通过编写setupproxy-js来配置",normalizedTitle:"2、通过编写 setupproxy.js 来配置",charIndex:370},{level:3,title:"总结",slug:"总结-2",normalizedTitle:"总结",charIndex:263}],lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:"两种实现方法 1、在项目根目录下的package.json中配置： 总结 2、通过编写setupProxy.js来配置 总结",content:"在日常项目开发时，经常需要向服务器发送请求来获取数据，由于浏览器的同源策略限制，有时候会出现跨域的问题，这时候我们可以通过配置代理来实现请求的正常访问。\n\n\n# 两种实现方法\n\n\n# 1、在项目根目录下的 package.json 中配置：\n\n\"proxy\": \"http://localhost:8090\",  // 需要请求的服务器地址\n\n\n1\n\n\n然后将需要发送请求的地方的接口地址改为你本地的地址，而不是远程服务器的地址，如：http://localhost:8081、 至此，发送请求就能够正常访问到数据了\n\n\n# 总结\n\n优点：配置简单，前端请求资源时可以不加任何前缀。\n\n缺点：不能配置多个代理\n\n工作方式：当请求了本地不存在的资源时，会将请求转发给 http://localhost:8090 （优先匹配前端资源）\n\n\n# 2、通过编写 setupProxy.js 来配置\n\n删除之前 package.json 中增加的配置项，在 src 目录下新建 setupProxy.js 文件\n\n老版配置如下：\n\nconst proxy = require('http-proxy-middleware');\n\nmodule.exports = function(app) {\n  app.use(\n    proxy('/api1', {\n      target: 'http://localhost:3000',\n      changeOrigin: true,\n      pathRewrite: {'^/api1': ''}\n    })\n    // 增加多个配置\n    proxy('/api2', {\n      target: 'http://localhost:8090',\n      changeOrigin: true,\n      pathRewrite: {'^/api2': ''}\n    })\n  );\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n然后在发送请求的地方增加 /api 字段，如原来请求地址是 http://localhost:3000/students, 现在改为 http://localhost:3000/api/students, 由于新增加了配置文件，所以需要重新启动项目，启动后，也许会出现新老版本不兼容问题，出现如下警告: DeprecationWarning: 'onAfterSetupMiddleware' option is deprecated. Please use the'setupMiddlewares' option.\n\n如果出现这种警告，且项目不能正常启动，那么则应该更换新的配置，使用 createProxyMiddleware，配置如下：\n\nconst { createProxyMiddleware } = require('http-proxy-middleware');\nmodule.exports = function(app) {\n  app.use(\n      \"/api1\",  // /api1是需要转发的请求（所有带有/api1前缀的请求都会转发给3000）\n      createProxyMiddleware({\n          target: \"http://localhost:3000\", // 服务器地址\n          changeOrigin: true,  // 控制服务器接收到的请求头中host字段的值，默认为false\n          pathRewrite: {\n              \"^/api1\": \"\"  // 去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)\n          }\n      })\n  );\n  // 如果想配置多个代理，可以继续添加\n  app.use(\n      \"/api2\",\n      createProxyMiddleware({\n          target: \"http://localhost:8088\",\n          changeOrigin: true,\n          pathRewrite: {\n              \"^/api2\": \"\"\n          }\n      })\n  );\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n至此，重新启动项目，就会发现能够正常发送请求获取到数据了。\n\n\n# 总结\n\n优点：可以配置多个代理，能够指定哪些请求走代理\n\n缺点：前端在请求时需要添加相应的前缀，配置相对繁琐。",normalizedContent:"在日常项目开发时，经常需要向服务器发送请求来获取数据，由于浏览器的同源策略限制，有时候会出现跨域的问题，这时候我们可以通过配置代理来实现请求的正常访问。\n\n\n# 两种实现方法\n\n\n# 1、在项目根目录下的 package.json 中配置：\n\n\"proxy\": \"http://localhost:8090\",  // 需要请求的服务器地址\n\n\n1\n\n\n然后将需要发送请求的地方的接口地址改为你本地的地址，而不是远程服务器的地址，如：http://localhost:8081、 至此，发送请求就能够正常访问到数据了\n\n\n# 总结\n\n优点：配置简单，前端请求资源时可以不加任何前缀。\n\n缺点：不能配置多个代理\n\n工作方式：当请求了本地不存在的资源时，会将请求转发给 http://localhost:8090 （优先匹配前端资源）\n\n\n# 2、通过编写 setupproxy.js 来配置\n\n删除之前 package.json 中增加的配置项，在 src 目录下新建 setupproxy.js 文件\n\n老版配置如下：\n\nconst proxy = require('http-proxy-middleware');\n\nmodule.exports = function(app) {\n  app.use(\n    proxy('/api1', {\n      target: 'http://localhost:3000',\n      changeorigin: true,\n      pathrewrite: {'^/api1': ''}\n    })\n    // 增加多个配置\n    proxy('/api2', {\n      target: 'http://localhost:8090',\n      changeorigin: true,\n      pathrewrite: {'^/api2': ''}\n    })\n  );\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n然后在发送请求的地方增加 /api 字段，如原来请求地址是 http://localhost:3000/students, 现在改为 http://localhost:3000/api/students, 由于新增加了配置文件，所以需要重新启动项目，启动后，也许会出现新老版本不兼容问题，出现如下警告: deprecationwarning: 'onaftersetupmiddleware' option is deprecated. please use the'setupmiddlewares' option.\n\n如果出现这种警告，且项目不能正常启动，那么则应该更换新的配置，使用 createproxymiddleware，配置如下：\n\nconst { createproxymiddleware } = require('http-proxy-middleware');\nmodule.exports = function(app) {\n  app.use(\n      \"/api1\",  // /api1是需要转发的请求（所有带有/api1前缀的请求都会转发给3000）\n      createproxymiddleware({\n          target: \"http://localhost:3000\", // 服务器地址\n          changeorigin: true,  // 控制服务器接收到的请求头中host字段的值，默认为false\n          pathrewrite: {\n              \"^/api1\": \"\"  // 去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)\n          }\n      })\n  );\n  // 如果想配置多个代理，可以继续添加\n  app.use(\n      \"/api2\",\n      createproxymiddleware({\n          target: \"http://localhost:8088\",\n          changeorigin: true,\n          pathrewrite: {\n              \"^/api2\": \"\"\n          }\n      })\n  );\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n至此，重新启动项目，就会发现能够正常发送请求获取到数据了。\n\n\n# 总结\n\n优点：可以配置多个代理，能够指定哪些请求走代理\n\n缺点：前端在请求时需要添加相应的前缀，配置相对繁琐。",charsets:{cjk:!0}},{title:"React之封装全局Loading组件",frontmatter:{title:"React之封装全局Loading组件",date:"2024-03-14T11:13:30.000Z",permalink:"/pages/266ff7/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/09.React%E4%B9%8B%E5%B0%81%E8%A3%85%E5%85%A8%E5%B1%80Loading%E7%BB%84%E4%BB%B6.html",relativePath:"《React》笔记/01.React/09.React之封装全局Loading组件.md",key:"v-46f6b44c",path:"/pages/266ff7/",headers:[{level:2,title:"1、安装antd-mobile、axios",slug:"_1、安装antd-mobile、axios",normalizedTitle:"1、安装 antd-mobile、axios",charIndex:159},{level:2,title:"2、Loading组件显示与隐藏方法封装，建立Loading.js文件",slug:"_2、loading组件显示与隐藏方法封装-建立loading-js文件",normalizedTitle:"2、loading 组件显示与隐藏方法封装，建立 loading.js 文件",charIndex:222},{level:2,title:"3、axios简单封装",slug:"_3、axios简单封装",normalizedTitle:"3、axios 简单封装",charIndex:2203}],lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:"1、安装antd-mobile、axios 2、Loading组件显示与隐藏方法封装，建立Loading.js文件 3、axios简单封装",content:'在日常项目开发中，由于经常需要发送网络请求，在这期间，页面可能会出现短暂的白屏，因此需要有一个 loading 效果以提升用户体验。\n\n这里我使用了 antd-mobile 5.2.2 中的 SpinLoading 转圈组件，使用了 axios 的请求拦截器和相应拦截器来控制 loading 的展示与隐藏。\n\n\n# 1、安装 antd-mobile、axios\n\nnpm install antd-mobile axios\n\n\n1\n\n\n\n# 2、Loading 组件显示与隐藏方法封装，建立 Loading.js 文件\n\nimport React from "react";\nimport ReactDOM from "react-dom";\nimport { SpinLoading } from "antd-mobile";\nimport "./Loading.css";\n\n// 当前正在请求的数量\nlet requestCount = 0\nfunction LoadingComponent (props) {\n    return (\n        <div className="loading-box" style={{backgroundColor: props.showBg ? "rgba(0, 0, 0, 0.7)" : "transparent"}}>\n            <div className="loading-wrapper">\n                <SpinLoading color="primary" />\n                <p className="loading-text">{ props.loadingText }</p>\n            </div>\n        </div>\n    )\n}\n\nconst Loading = {\n    show(config = {loadingText: "玩命加载中...", showBg: false}) {\n        if (requestCount === 0) {\n            const dom = document.createElement(\'div\');\n            dom.setAttribute(\'id\', \'loading\')\n            document.body.appendChild(dom)\n            ReactDOM.createRoot(dom).render(<LoadingComponent {...config} />);\n        }\n        requestCount++\n    },\n    hide() {\n        if (requestCount > 0) {\n          requestCount--;\n        }\n        if (requestCount === 0) {\n            document.body.removeChild(document.getElementById(\'loading\'))\n        }\n    },\n}\n\nexport default Loading;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\nLoading.css 代码如下：\n\n#loading {\n    width:100%;\n    height: 100%;\n    position: fixed;\n    left: 0;\n    top: 0;\n}\n.loading-box {\n    width:100%;\n    height: 100%;\n    position: fixed;\n    left: 0;\n    top: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.loading-wrapper {\n    padding: 20px 40px;\n    border-radius: 10px;\n    background: #fff;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n.loading-wrapper .loading-text {\n    padding: 0;\n    margin: 10px 0 0;\n    font-size: 18px;\n    color: #000000;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 3、axios 简单封装\n\n在项目 src 文件夹下建立 networking 文件夹，在该文件夹下建立 index.js 文件，代码如下\n\nimport axios from "axios"\nimport Loading from "../components/Loading/Loading";  // 引入Loading文件\n\naxios.defaults.baseURL = "http://localhost:3002"\n\naxios.interceptors.request.use((config) => {\n  Loading.show()\n  // 可在此处添加一些通用参数\n  return config\n}, (error) => {\n  setTimeout(() => {\n    Loading.hide()\n  }, 200)\n  return Promise.reject(error)\n})\n\naxios.interceptors.response.use((response) => {\n  setTimeout(() => {\n    Loading.hide()\n  }, 200)\n  return response\n}, (error) => {\n  setTimeout(() => {\n    Loading.hide()\n  }, 200)\n  return Promise.reject(error)\n})\n\nexport default axios\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n在项目 src 文件夹下的 index.js 文件中引入刚封装的 axios 请求方法\n\nimport "./networking"\n\n\n1\n\n\n至此，全局 Loading 组件就可以正常工作了。',normalizedContent:'在日常项目开发中，由于经常需要发送网络请求，在这期间，页面可能会出现短暂的白屏，因此需要有一个 loading 效果以提升用户体验。\n\n这里我使用了 antd-mobile 5.2.2 中的 spinloading 转圈组件，使用了 axios 的请求拦截器和相应拦截器来控制 loading 的展示与隐藏。\n\n\n# 1、安装 antd-mobile、axios\n\nnpm install antd-mobile axios\n\n\n1\n\n\n\n# 2、loading 组件显示与隐藏方法封装，建立 loading.js 文件\n\nimport react from "react";\nimport reactdom from "react-dom";\nimport { spinloading } from "antd-mobile";\nimport "./loading.css";\n\n// 当前正在请求的数量\nlet requestcount = 0\nfunction loadingcomponent (props) {\n    return (\n        <div classname="loading-box" style={{backgroundcolor: props.showbg ? "rgba(0, 0, 0, 0.7)" : "transparent"}}>\n            <div classname="loading-wrapper">\n                <spinloading color="primary" />\n                <p classname="loading-text">{ props.loadingtext }</p>\n            </div>\n        </div>\n    )\n}\n\nconst loading = {\n    show(config = {loadingtext: "玩命加载中...", showbg: false}) {\n        if (requestcount === 0) {\n            const dom = document.createelement(\'div\');\n            dom.setattribute(\'id\', \'loading\')\n            document.body.appendchild(dom)\n            reactdom.createroot(dom).render(<loadingcomponent {...config} />);\n        }\n        requestcount++\n    },\n    hide() {\n        if (requestcount > 0) {\n          requestcount--;\n        }\n        if (requestcount === 0) {\n            document.body.removechild(document.getelementbyid(\'loading\'))\n        }\n    },\n}\n\nexport default loading;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\nloading.css 代码如下：\n\n#loading {\n    width:100%;\n    height: 100%;\n    position: fixed;\n    left: 0;\n    top: 0;\n}\n.loading-box {\n    width:100%;\n    height: 100%;\n    position: fixed;\n    left: 0;\n    top: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.loading-wrapper {\n    padding: 20px 40px;\n    border-radius: 10px;\n    background: #fff;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n.loading-wrapper .loading-text {\n    padding: 0;\n    margin: 10px 0 0;\n    font-size: 18px;\n    color: #000000;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 3、axios 简单封装\n\n在项目 src 文件夹下建立 networking 文件夹，在该文件夹下建立 index.js 文件，代码如下\n\nimport axios from "axios"\nimport loading from "../components/loading/loading";  // 引入loading文件\n\naxios.defaults.baseurl = "http://localhost:3002"\n\naxios.interceptors.request.use((config) => {\n  loading.show()\n  // 可在此处添加一些通用参数\n  return config\n}, (error) => {\n  settimeout(() => {\n    loading.hide()\n  }, 200)\n  return promise.reject(error)\n})\n\naxios.interceptors.response.use((response) => {\n  settimeout(() => {\n    loading.hide()\n  }, 200)\n  return response\n}, (error) => {\n  settimeout(() => {\n    loading.hide()\n  }, 200)\n  return promise.reject(error)\n})\n\nexport default axios\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n在项目 src 文件夹下的 index.js 文件中引入刚封装的 axios 请求方法\n\nimport "./networking"\n\n\n1\n\n\n至此，全局 loading 组件就可以正常工作了。',charsets:{cjk:!0}},{title:"React之消息的发布-订阅(pubsub-js)",frontmatter:{title:"React之消息的发布-订阅(pubsub-js)",date:"2024-03-14T12:05:05.000Z",permalink:"/pages/dcc0fa/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/10.React%E4%B9%8B%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85(pubsub-js).html",relativePath:"《React》笔记/01.React/10.React之消息的发布-订阅(pubsub-js).md",key:"v-17889702",path:"/pages/dcc0fa/",headers:[{level:2,title:"1、安装pubsub-js",slug:"_1、安装pubsub-js",normalizedTitle:"1、安装 pubsub-js",charIndex:116},{level:2,title:"2、在需要接收消息的组件中订阅",slug:"_2、在需要接收消息的组件中订阅",normalizedTitle:"2、在需要接收消息的组件中订阅",charIndex:163},{level:3,title:"2.1 类组件中使用",slug:"_2-1-类组件中使用",normalizedTitle:"2.1 类组件中使用",charIndex:183},{level:3,title:"2.2 函数组件中使用",slug:"_2-2-函数组件中使用",normalizedTitle:"2.2 函数组件中使用",charIndex:1557}],lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:"1、安装pubsub-js 2、在需要接收消息的组件中订阅 2.1 类组件中使用 2.2 函数组件中使用",content:'在项目中经常会涉及到不同组件之间的通信，特别是兄弟组件、祖孙组件这种，如果是通过 props 来传值，会比较繁琐，因此我们可以通过发布 - 订阅模式来实现不同组件间的通信，这里使用到了 pubsub-js 这个 js 库.\n\n\n# 1、安装 pubsub-js\n\nnpm install pubsub-js\n\n\n1\n\n\n\n# 2、在需要接收消息的组件中订阅\n\n\n# 2.1 类组件中使用\n\n创建 Parent.jsx 组件，Child1.jsx 组件，Child2.jsx 组件\n\n// Child1.jsx组件\nimport React from "react";\nimport pubsub from "pubsub-js";\n\nexport default class Child1 extends React.Component {\n    handlePublish = () => {\n        console.log("Child1发布消息了");\n        pubsub.publish("message", "hello world");\n    }\n    render() {\n        return (\n            <div>\n                <button onClick={() => this.handlePublish() }>发布消息</button>\n            </div>\n        );\n    }\n}\n\n// Child2.jsx组件\nimport React from "react";\nimport pubsub from "pubsub-js";\n\nexport default class Child2 extends React.Component {\n    token = ""\n    // 组件挂载完毕开始订阅组件\n    componentDidMount() {\n        this.token = pubsub.subscribe("message", (msg, data) => {\n            console.log("Child2订阅消息了", data)\n        })\n    }\n\n    // 组件即将卸载时取消订阅\n    componentWillUnmount() {\n    \tpubsub.unsubscribe(this.token)\n    }\n\n    render() {\n        return <div>订阅消息</div>\n    }\n}\n\n// Parent.jsx组件\nimport Child1 from "./Child1"\nimport Child2 from "./Child2"\n\nexport default class Parent extends React.Component {\n    render() {\n        return (\n            <div>\n                <Child1 />\n                <Child2 />\n            </div>\n        )\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# 2.2 函数组件中使用\n\n创建 Parent.jsx 组件、Child1 组件、Child2 组件\n\n// Child1.jsx组件\nimport React from "react";\nimport pubsub from "pubsub-js";\n\nexport default function Child1() {\n    function handlePublish () {\n        console.log("Child1发布消息了");\n        pubsub.publish("message", "hello world");\n    }\n    return (\n        <div>\n            <button onClick={() => handlePublish() }>发布消息</button>\n        </div>\n    );\n}\n\n// Child2.jsx组件\nimport React, { useState, useEffect } from "react";\nimport pubsub from "pubsub-js";\n\nexport default function Child2() {\n    const [message, setMessage] = useState("")\n    // 组件挂载完毕开始订阅组件\n    useEffect(() => {\n    \tconst token = pubsub.subscribe("message", (msg, data) => {\n          console.log("Child2订阅消息了", data)\n          setMessage(data)\n      })\n      return () => {\n      \tpubsub.unsubscribe(token)  // 取消订阅\n      }\n    }, []) // 传空数组，表示仅在组件挂载和卸载时执行\n\n    return <div>订阅消息{ message }</div>\n}\n\n// Parent.jsx组件\nimport Child1 from "./Child1"\nimport Child2 from "./Child2"\n\nexport default function Parent() {\n    return (\n        <div>\n            <Child1 />\n            <Child2 />\n        </div>\n    )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n',normalizedContent:'在项目中经常会涉及到不同组件之间的通信，特别是兄弟组件、祖孙组件这种，如果是通过 props 来传值，会比较繁琐，因此我们可以通过发布 - 订阅模式来实现不同组件间的通信，这里使用到了 pubsub-js 这个 js 库.\n\n\n# 1、安装 pubsub-js\n\nnpm install pubsub-js\n\n\n1\n\n\n\n# 2、在需要接收消息的组件中订阅\n\n\n# 2.1 类组件中使用\n\n创建 parent.jsx 组件，child1.jsx 组件，child2.jsx 组件\n\n// child1.jsx组件\nimport react from "react";\nimport pubsub from "pubsub-js";\n\nexport default class child1 extends react.component {\n    handlepublish = () => {\n        console.log("child1发布消息了");\n        pubsub.publish("message", "hello world");\n    }\n    render() {\n        return (\n            <div>\n                <button onclick={() => this.handlepublish() }>发布消息</button>\n            </div>\n        );\n    }\n}\n\n// child2.jsx组件\nimport react from "react";\nimport pubsub from "pubsub-js";\n\nexport default class child2 extends react.component {\n    token = ""\n    // 组件挂载完毕开始订阅组件\n    componentdidmount() {\n        this.token = pubsub.subscribe("message", (msg, data) => {\n            console.log("child2订阅消息了", data)\n        })\n    }\n\n    // 组件即将卸载时取消订阅\n    componentwillunmount() {\n    \tpubsub.unsubscribe(this.token)\n    }\n\n    render() {\n        return <div>订阅消息</div>\n    }\n}\n\n// parent.jsx组件\nimport child1 from "./child1"\nimport child2 from "./child2"\n\nexport default class parent extends react.component {\n    render() {\n        return (\n            <div>\n                <child1 />\n                <child2 />\n            </div>\n        )\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# 2.2 函数组件中使用\n\n创建 parent.jsx 组件、child1 组件、child2 组件\n\n// child1.jsx组件\nimport react from "react";\nimport pubsub from "pubsub-js";\n\nexport default function child1() {\n    function handlepublish () {\n        console.log("child1发布消息了");\n        pubsub.publish("message", "hello world");\n    }\n    return (\n        <div>\n            <button onclick={() => handlepublish() }>发布消息</button>\n        </div>\n    );\n}\n\n// child2.jsx组件\nimport react, { usestate, useeffect } from "react";\nimport pubsub from "pubsub-js";\n\nexport default function child2() {\n    const [message, setmessage] = usestate("")\n    // 组件挂载完毕开始订阅组件\n    useeffect(() => {\n    \tconst token = pubsub.subscribe("message", (msg, data) => {\n          console.log("child2订阅消息了", data)\n          setmessage(data)\n      })\n      return () => {\n      \tpubsub.unsubscribe(token)  // 取消订阅\n      }\n    }, []) // 传空数组，表示仅在组件挂载和卸载时执行\n\n    return <div>订阅消息{ message }</div>\n}\n\n// parent.jsx组件\nimport child1 from "./child1"\nimport child2 from "./child2"\n\nexport default function parent() {\n    return (\n        <div>\n            <child1 />\n            <child2 />\n        </div>\n    )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n',charsets:{cjk:!0}},{title:"React之props传值并对其进行限制",frontmatter:{title:"React之props传值并对其进行限制",date:"2024-03-07T15:13:14.000Z",permalink:"/pages/ca05b9/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/04.React%E4%B9%8Bprops%E4%BC%A0%E5%80%BC%E5%B9%B6%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8C%E9%99%90%E5%88%B6.html",relativePath:"《React》笔记/01.React/04.React之props传值并对其进行限制.md",key:"v-6242d2ea",path:"/pages/ca05b9/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"在进行开发时，我们经常需要对组件传递 props，来实现数据的动态改变。可以这样使用：\n\nclass App extends React.Component {\n\trender () {\n\t\treturn (\n\t\t\t<ul>\n\t\t\t\t<li>姓名：{ this.props.name }</li>\n\t\t\t\t<li>年龄：{ this.props.age }</li>\n\t\t\t</ul>\n\t\t)\n\t}\n}\n\nexport default App;\n\n// 组件使用时是这样\nlet data = {\n\tname: \"张三\",\n\tage: 18\n}\n<App name={data.name} age={data.age} />\n\n// 或者\n<App {...data} />\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n但是，有时候我们想限制所传递的 props 的类型，或者是否必传，是否有初始值，该怎么办呢？这里需要借助一款库，就是 prop-types。在 React v15.5 之前，可以使用 React 内置的方法，即 React.PropTypes，但是在 React v15.5 之后，已经被废弃了，需要使用 prop-types 库代替。\n\n1、安装\n\nnpm install prop-types -S\n\n\n1\n\n\n2、引入 prop-types 并使用\n\nimport PropTypes from \"prop-types\"\n\n// 使用方式\n组件名.PropTyps = {\n\t组件属性：校验格式\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n对于上面的 App 组件则可以这样写：\n\nclass App extends React.Component {\n\trender () {\n\t\treturn (\n\t\t\t<ul>\n\t\t\t\t<li>姓名：{ this.props.name }</li>\n\t\t\t\t<li>年龄：{ this.props.age }</li>\n\t\t\t</ul>\n\t\t)\n\t}\n}\nApp.propTypes = {\n\tname: PropTypes.string,\n\tage: PropTypes.number\n}\n\n// 如果想限制name属性是必传的，那么可以这样写\nApp.propTypes = {\n\tname: PropTypes.string.isRequired,\n\tage: PropTypes.number\n}\n\n// 如果想给age初始值，则这样写\nApp.defaultProps = {\n\tage: 18\n}\n\nexport default App;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n组件 props 传值及条件限制的简写：\n\nclass App extends React.Component {\n\tstatic propTypes = {\n\t\tname: PropTypes.string.isRequired,\n\t\tage: PropTypes.number\n\t}\n\tstatic defaultProps = {\n\t\tage: 18\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<ul>\n\t\t\t\t<li>姓名：{ this.props.name }</li>\n\t\t\t\t<li>年龄：{ this.props.age }</li>\n\t\t\t</ul>\n\t\t)\n\t}\n}\n\nexport default App;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nprop-types 的检验规则：\n\nApp.propTypes = {\n\t// 可以声明 prop 为指定的 JS 基本数据类型，默认情况，这些数据是可选的\n\tmyPropArray: PropTypes.array,  // 数组类型\n\tmyPropBool: PropTypes.bool,    // 布尔值\n\tmyPropFunc: PropTypes.func,    // 函数\n\tmyPropNumber: PropTypes.number,\n\tmyPropObject: PropTypes.object,\n\tmyPropString: PropTypes.string,\n \n\t// 可以被渲染的对象 numbers, strings, elements 或 array\n\tmyPropNode: PropTypes.node,\n \n\t//  React 元素\n\tmyPropElement: PropTypes.element,\n \n\t// 用 JS 的 instanceof 操作符声明 prop 为类的实例。\n\tmyPropMessage: PropTypes.instanceOf(Message),\n \n\t// 用 enum 来限制 prop 只接受指定的值。\n\tmyPropEnum: PropTypes.oneOf(['News', 'Photos']),\n \n\t// 可以是多个对象类型中的一个\n\tmyPropUnion: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.number,\n\t\tPropTypes.instanceOf(Message)\n\t]),\n \n\t// 指定类型组成的数组\n\tmyPropArrayOf: PropTypes.arrayOf(PropTypes.number),\n \n\t// 指定类型的属性构成的对象\n\tmyPropObjectOf: PropTypes.objectOf(PropTypes.number),\n \n\t// 特定 shape 参数的对象\n\tmyPropObjectWithShape: PropTypes.shape({\n\t\tcolor: PropTypes.string,\n\t\tfontSize: PropTypes.number\n\t}),\n \n  // 任意类型加上 `isRequired` 来使 prop为必传项。\n  myPropFunc: PropTypes.func.isRequired,\n\n  // 不可空的任意类型\n  myPropAny: PropTypes.any.isRequired,\n\n  // 自定义验证器。如果验证失败需要返回一个 Error 对象。不要直接使用 `console.warn` 或抛异常，因为这样 `oneOfType` 会失效。\n  myCustomProp: function(props, propName, componentName) {\n\t\tif (!/matchme/.test(props[propName])) {\n\t\t\treturn new Error('Validation failed!');\n\t\t}\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n",normalizedContent:"在进行开发时，我们经常需要对组件传递 props，来实现数据的动态改变。可以这样使用：\n\nclass app extends react.component {\n\trender () {\n\t\treturn (\n\t\t\t<ul>\n\t\t\t\t<li>姓名：{ this.props.name }</li>\n\t\t\t\t<li>年龄：{ this.props.age }</li>\n\t\t\t</ul>\n\t\t)\n\t}\n}\n\nexport default app;\n\n// 组件使用时是这样\nlet data = {\n\tname: \"张三\",\n\tage: 18\n}\n<app name={data.name} age={data.age} />\n\n// 或者\n<app {...data} />\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n但是，有时候我们想限制所传递的 props 的类型，或者是否必传，是否有初始值，该怎么办呢？这里需要借助一款库，就是 prop-types。在 react v15.5 之前，可以使用 react 内置的方法，即 react.proptypes，但是在 react v15.5 之后，已经被废弃了，需要使用 prop-types 库代替。\n\n1、安装\n\nnpm install prop-types -s\n\n\n1\n\n\n2、引入 prop-types 并使用\n\nimport proptypes from \"prop-types\"\n\n// 使用方式\n组件名.proptyps = {\n\t组件属性：校验格式\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n对于上面的 app 组件则可以这样写：\n\nclass app extends react.component {\n\trender () {\n\t\treturn (\n\t\t\t<ul>\n\t\t\t\t<li>姓名：{ this.props.name }</li>\n\t\t\t\t<li>年龄：{ this.props.age }</li>\n\t\t\t</ul>\n\t\t)\n\t}\n}\napp.proptypes = {\n\tname: proptypes.string,\n\tage: proptypes.number\n}\n\n// 如果想限制name属性是必传的，那么可以这样写\napp.proptypes = {\n\tname: proptypes.string.isrequired,\n\tage: proptypes.number\n}\n\n// 如果想给age初始值，则这样写\napp.defaultprops = {\n\tage: 18\n}\n\nexport default app;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n组件 props 传值及条件限制的简写：\n\nclass app extends react.component {\n\tstatic proptypes = {\n\t\tname: proptypes.string.isrequired,\n\t\tage: proptypes.number\n\t}\n\tstatic defaultprops = {\n\t\tage: 18\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<ul>\n\t\t\t\t<li>姓名：{ this.props.name }</li>\n\t\t\t\t<li>年龄：{ this.props.age }</li>\n\t\t\t</ul>\n\t\t)\n\t}\n}\n\nexport default app;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nprop-types 的检验规则：\n\napp.proptypes = {\n\t// 可以声明 prop 为指定的 js 基本数据类型，默认情况，这些数据是可选的\n\tmyproparray: proptypes.array,  // 数组类型\n\tmypropbool: proptypes.bool,    // 布尔值\n\tmypropfunc: proptypes.func,    // 函数\n\tmypropnumber: proptypes.number,\n\tmypropobject: proptypes.object,\n\tmypropstring: proptypes.string,\n \n\t// 可以被渲染的对象 numbers, strings, elements 或 array\n\tmypropnode: proptypes.node,\n \n\t//  react 元素\n\tmypropelement: proptypes.element,\n \n\t// 用 js 的 instanceof 操作符声明 prop 为类的实例。\n\tmypropmessage: proptypes.instanceof(message),\n \n\t// 用 enum 来限制 prop 只接受指定的值。\n\tmypropenum: proptypes.oneof(['news', 'photos']),\n \n\t// 可以是多个对象类型中的一个\n\tmypropunion: proptypes.oneoftype([\n\t\tproptypes.string,\n\t\tproptypes.number,\n\t\tproptypes.instanceof(message)\n\t]),\n \n\t// 指定类型组成的数组\n\tmyproparrayof: proptypes.arrayof(proptypes.number),\n \n\t// 指定类型的属性构成的对象\n\tmypropobjectof: proptypes.objectof(proptypes.number),\n \n\t// 特定 shape 参数的对象\n\tmypropobjectwithshape: proptypes.shape({\n\t\tcolor: proptypes.string,\n\t\tfontsize: proptypes.number\n\t}),\n \n  // 任意类型加上 `isrequired` 来使 prop为必传项。\n  mypropfunc: proptypes.func.isrequired,\n\n  // 不可空的任意类型\n  mypropany: proptypes.any.isrequired,\n\n  // 自定义验证器。如果验证失败需要返回一个 error 对象。不要直接使用 `console.warn` 或抛异常，因为这样 `oneoftype` 会失效。\n  mycustomprop: function(props, propname, componentname) {\n\t\tif (!/matchme/.test(props[propname])) {\n\t\t\treturn new error('validation failed!');\n\t\t}\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n",charsets:{cjk:!0}},{title:"React之事件绑定及简写方式",frontmatter:{title:"React之事件绑定及简写方式",date:"2024-03-07T11:38:25.000Z",permalink:"/pages/517c91/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/03.React%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%8F%8A%E7%AE%80%E5%86%99%E6%96%B9%E5%BC%8F.html",relativePath:"《React》笔记/01.React/03.React之事件绑定及简写方式.md",key:"v-1267ca51",path:"/pages/517c91/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'在 React 中绑定事件有以下几种方式：\n\n①：在构造函数中使用 bind 绑定 this：\n\nclass App extends React.Component {\n\tconstructor (props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tbtnTxt: "保存"\n\t\t}\n\t\tthis.changeBtnTxt = this.changeBtnTxt.bind(this)\n\t}\n\tchangeBtnTxt () {\n\t\tthis.setState({\n\t\t\tbtnTxt: this.state.btnTxt === "保存" ? "编辑" : "保存"\n\t\t})\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onClick = { this.changeBtnTxt }>\n\t\t\t\t\t{ this.state.btnTxt }\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n②：在调用时使用 bind 绑定 this：\n\nclass App extends React.Component {\n\tconstructor (props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tbtnTxt: "保存"\n\t\t}\n\t}\n\tchangeBtnTxt () {\n\t\tthis.setState({\n\t\t\tbtnTxt: this.state.btnTxt === "保存" ? "编辑" : "保存"\n\t\t})\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onClick = { this.changeBtnTxt.bind(this) }>\n\t\t\t\t\t{ this.state.btnTxt }\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n③：在调用时使用箭头函数绑定 this：\n\nclass App extends React.Component {\n\tconstructor (props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tbtnTxt: "保存"\n\t\t}\n\t}\n\tchangeBtnTxt () {\n\t\tthis.setState({\n\t\t\tbtnTxt: this.state.btnTxt === "保存" ? "编辑" : "保存"\n\t\t})\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onClick = { () => this.changeBtnTxt() }>\n\t\t\t\t\t{ this.state.btnTxt }\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n④：使用属性初始化器语法绑定 this：\n\nclass App extends React.Component {\n\tconstructor (props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tbtnTxt: "保存"\n\t\t}\n\t}\n\tchangeBtnTxt = () => {\n\t\tthis.setState({\n\t\t\tbtnTxt: this.state.btnTxt === "保存" ? "编辑" : "保存"\n\t\t})\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onClick = { this.changeBtnTxt }>\n\t\t\t\t\t{ this.state.btnTxt }\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n比较：\n\n方式 2 和方式 3 都是在调用的时候再绑定 this。\n\n\n * 优点：写法比较简单，当组件中没有 state 的时候就不需要添加类构造函数来绑定 this\n * 缺点：每一次调用的时候都会生成一个新的方法实例，因此对性能有影响，并且当这个函数作为属性值传入低阶组件的时候，这些组件可能会进行额外的重新渲染，因为每一次都是新的方法实例作为的新的属性传递。\n\n方式 1 在类构造函数中绑定 this，调用的时候不需要再绑定\n\n * 优点：只会生成一个方法实例，并且绑定一次之后如果多次用到这个方法也不需要再绑定。\n * 缺点：即使不用到 state，也需要添加类构造函数来绑定 this，代码量多一点。。。\n\n方式 4：利用属性初始化语法，将方法初始化为箭头函数，因此在创建函数的时候就绑定了 this。\n\n * 优点：创建方法就绑定 this，不需要在类构造函数中绑定，调用的时候不需要再作绑定。结合了方式 1、方式 2、方式 3 的优点\n * 缺点：需要用 babel 转译\n\n简写方式（推荐，虽然需要 babel 进行转译，但是在使用 Create React App 开发时，默认是启用这种语法的）：\n\nclass App extends React.Component {\n\t// 表示给App组件实例添加一个state属性，值为一个对象\n\tstate = {\n\t\tbtnTxt: "保存"\n\t}\n\tchangeBtnTxt = () => {\n\t\tthis.setState({\n\t\t\tbtnTxt: this.state.btnTxt === "保存" ? "编辑" : "保存"\n\t\t})\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onClick = { this.changeBtnTxt }>\n\t\t\t\t\t{ this.state.btnTxt }\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',normalizedContent:'在 react 中绑定事件有以下几种方式：\n\n①：在构造函数中使用 bind 绑定 this：\n\nclass app extends react.component {\n\tconstructor (props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tbtntxt: "保存"\n\t\t}\n\t\tthis.changebtntxt = this.changebtntxt.bind(this)\n\t}\n\tchangebtntxt () {\n\t\tthis.setstate({\n\t\t\tbtntxt: this.state.btntxt === "保存" ? "编辑" : "保存"\n\t\t})\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onclick = { this.changebtntxt }>\n\t\t\t\t\t{ this.state.btntxt }\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n②：在调用时使用 bind 绑定 this：\n\nclass app extends react.component {\n\tconstructor (props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tbtntxt: "保存"\n\t\t}\n\t}\n\tchangebtntxt () {\n\t\tthis.setstate({\n\t\t\tbtntxt: this.state.btntxt === "保存" ? "编辑" : "保存"\n\t\t})\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onclick = { this.changebtntxt.bind(this) }>\n\t\t\t\t\t{ this.state.btntxt }\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n③：在调用时使用箭头函数绑定 this：\n\nclass app extends react.component {\n\tconstructor (props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tbtntxt: "保存"\n\t\t}\n\t}\n\tchangebtntxt () {\n\t\tthis.setstate({\n\t\t\tbtntxt: this.state.btntxt === "保存" ? "编辑" : "保存"\n\t\t})\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onclick = { () => this.changebtntxt() }>\n\t\t\t\t\t{ this.state.btntxt }\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n④：使用属性初始化器语法绑定 this：\n\nclass app extends react.component {\n\tconstructor (props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tbtntxt: "保存"\n\t\t}\n\t}\n\tchangebtntxt = () => {\n\t\tthis.setstate({\n\t\t\tbtntxt: this.state.btntxt === "保存" ? "编辑" : "保存"\n\t\t})\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onclick = { this.changebtntxt }>\n\t\t\t\t\t{ this.state.btntxt }\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n比较：\n\n方式 2 和方式 3 都是在调用的时候再绑定 this。\n\n\n * 优点：写法比较简单，当组件中没有 state 的时候就不需要添加类构造函数来绑定 this\n * 缺点：每一次调用的时候都会生成一个新的方法实例，因此对性能有影响，并且当这个函数作为属性值传入低阶组件的时候，这些组件可能会进行额外的重新渲染，因为每一次都是新的方法实例作为的新的属性传递。\n\n方式 1 在类构造函数中绑定 this，调用的时候不需要再绑定\n\n * 优点：只会生成一个方法实例，并且绑定一次之后如果多次用到这个方法也不需要再绑定。\n * 缺点：即使不用到 state，也需要添加类构造函数来绑定 this，代码量多一点。。。\n\n方式 4：利用属性初始化语法，将方法初始化为箭头函数，因此在创建函数的时候就绑定了 this。\n\n * 优点：创建方法就绑定 this，不需要在类构造函数中绑定，调用的时候不需要再作绑定。结合了方式 1、方式 2、方式 3 的优点\n * 缺点：需要用 babel 转译\n\n简写方式（推荐，虽然需要 babel 进行转译，但是在使用 create react app 开发时，默认是启用这种语法的）：\n\nclass app extends react.component {\n\t// 表示给app组件实例添加一个state属性，值为一个对象\n\tstate = {\n\t\tbtntxt: "保存"\n\t}\n\tchangebtntxt = () => {\n\t\tthis.setstate({\n\t\t\tbtntxt: this.state.btntxt === "保存" ? "编辑" : "保存"\n\t\t})\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onclick = { this.changebtntxt }>\n\t\t\t\t\t{ this.state.btntxt }\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',charsets:{cjk:!0}},{title:"分类",frontmatter:{categoriesPage:!0,title:"分类",permalink:"/categories/",article:!1},regularPath:"/@pages/categoriesPage.html",relativePath:"@pages/categoriesPage.md",key:"v-058fed96",path:"/categories/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"React之Redux的基本使用",frontmatter:{title:"React之Redux的基本使用",date:"2024-03-19T12:21:18.000Z",permalink:"/pages/707c70/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/11.React%E4%B9%8BRedux%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html",relativePath:"《React》笔记/01.React/11.React之Redux的基本使用.md",key:"v-aeeee3d6",path:"/pages/707c70/",headers:[{level:3,title:"redux使用",slug:"redux使用",normalizedTitle:"redux 使用",charIndex:443},{level:4,title:"1、安装Redux",slug:"_1、安装redux",normalizedTitle:"1、安装 redux",charIndex:455},{level:4,title:"2、编写store和reducer文件",slug:"_2、编写store和reducer文件",normalizedTitle:"2、编写 store 和 reducer 文件",charIndex:493},{level:4,title:"3、创建组件Count.jsx",slug:"_3、创建组件count-jsx",normalizedTitle:"3、创建组件 count.jsx",charIndex:1075}],lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:"redux使用 1、安装Redux 2、编写store和reducer文件 3、创建组件Count.jsx",content:'在项目中有这样的使用场景，就是多个组件需要共享同一个状态，或者其他组件想要更改某个组件里的状态，如果用组件传值跟消息发布 - 订阅虽然也能实现，但是实现起来却很繁琐，因此这时候就需要使用到 Redux 了，它是一个状态管理容器，帮助我们集中管理状态。\n\nRedux 三要素：\n\n * actions：js 普通对象，必须含有一个字符串类型的 type 字段表示将要执行的动作。\n * store：维持应用的 state，提供 getState () 方法获取 state；通过 dispatch (action) 更新 state，通过 subscribe (listener) 注册监听器，通过 subscribe (listener) 返回的函数注销监听器。Redux 应用只有一个单一的 store\n * reducers：纯函数，接收先前的 state 和 action，并返回新的 state\n\n原理图：\n\n\n现在就用一个加减运算的案例来说明 redux 如何使用。\n\n\n# redux 使用\n\n# 1、安装 Redux\n\nnpm install redux\n\n\n1\n\n\n# 2、编写 store 和 reducer 文件\n\n在项目根目录的 src 文件夹下创建 redux 文件夹，在该文件夹下创建 store.js 文件和 countReducer.js 文件\n\n// src/redux/countReducer.js\nconst initialState = 0\nconst countReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \'ADD\':\n      return state + 1\n    case \'MINUS\':\n      return state - 1\n    default:\n      return state\n  }\n}\n\nexport default countReducer\n\n\n// src/redux/store.js\nimport { createStore } from "redux"\nimport countReducer from "./countReducer";\n\nexport default createStore(countReducer)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n# 3、创建组件 Count.jsx\n\n// class组件实现\nimport React, { Component } from \'react\';\nimport store from "../../redux/store";\n\nclass Count extends Component {\n    state = {\n        count: store.getState()\n    }\n    // 加运算\n    handleAdd = () => {\n        store.dispatch({type: "ADD"})\n    }\n    // 减运算\n    handleReduce = () => {\n        store.dispatch({type: "MINUS"})\n    }\n    // 组件挂载时，监听store改变时，更新状态\n    componentDidMount() {\n        this.storeSubscribe = store.subscribe(() => {\n            this.setState({\n                count: store.getState()\n            })\n        })\n    }\n    // 组件卸载时取消监听\n    componentWillUnmount() {\n        this.storeSubscribe()\n    }\n\n    render() {\n        return (\n            <div>\n               <h3>当前结果：{this.state.count}</h3>\n                <button onClick={ () => this.handleAdd() }>加1</button>\n                <button onClick={ () => this.handleReduce() }>减1</button>\n            </div>\n        );\n    }\n}\n\nexport default Count;\n\n\n\n// function组件实现\nimport React, { useState, useEffect } from \'react\';\nimport store from "../../redux/store";\n\nconst Count = () => {\n    const [count, setCount] = useState(store.getState());\n    useEffect(() => {\n        const unsubscribe = store.subscribe(() => {\n            setCount(store.getState())\n        })\n        return () => {\n            unsubscribe()\n        }\n    }, [count])\n    const handleAdd = () => {\n        store.dispatch({type: "ADD"})\n    }\n    const handleReduce = () => {\n        store.dispatch({type: "MINUS"})\n    }\n    return (\n        <div>\n           <h3>当前结果：{count}</h3>\n           <button onClick={ () => handleAdd() }>加1</button>\n           <button onClick={ () => handleReduce() }>减1</button>\n        </div>\n    );\n};\n\nexport default Count;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n\n\n当应用越来越复杂时，我们可以将 reducer 函数拆分成多个单独的函数，拆分后的函数负责独立管理 state 的一部分，这里需要用到 combineReducers 辅助函数，它的作用是把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 createStore 方法。\n\n例如，现在还有一个管理用户信息的 reducer，\n\nconst initialState = {\n    name: "张三",\n    age: 28\n}\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case "changeAge":\n      return {\n          ...state,\n          age: action.payload\n      }\n    default:\n      return state\n  }\n}\nexport default userReducer\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n那么 src/redux/store.js 文件则更改如下：\n\nimport { createStore, combineReducers } from "redux"\nimport countReducer from "./countReducer";\nimport userReducer from "./userReducer";\n\nconst reducer = combineReducers({\n  countReducer,\n  userReducer\n})\nexport default createStore(reducer)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n此时，在 Count.jsx 组件中使用如下：\n\nimport React, {useState, useEffect} from \'react\';\nimport store from "../../redux/store";\n\nconst Count = () => {\n    const [count, setCount] = useState(store.getState().countReducer);\n    const [user, setUser] = useState(store.getState().userReducer);\n    useEffect(() => {\n        const unsubscribe = store.subscribe(() => {\n            setCount(store.getState().countReducer)\n            setUser(store.getState().userReducer)\n        })\n        return () => {\n            unsubscribe()\n        }\n    }, [count, user])\n    const handleAdd = () => {\n        store.dispatch({type: "ADD"})\n    }\n    const handleReduce = () => {\n        store.dispatch({type: "MINUS"})\n    }\n    const changeAge = () => {\n        store.dispatch({type: "changeAge", payload: 100})\n    }\n    return (\n        <div>\n           <h3>当前结果：{count}</h3>\n            <h3>用户信息：姓名：{user.name}，年龄：{user.age}</h3>\n           <button onClick={ () => handleAdd() }>加1</button>\n           <button onClick={ () => handleReduce() }>减1</button>\n           <button onClick={ () => changeAge() }>更改年龄</button>\n        </div>\n    );\n};\n\nexport default Count;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n',normalizedContent:'在项目中有这样的使用场景，就是多个组件需要共享同一个状态，或者其他组件想要更改某个组件里的状态，如果用组件传值跟消息发布 - 订阅虽然也能实现，但是实现起来却很繁琐，因此这时候就需要使用到 redux 了，它是一个状态管理容器，帮助我们集中管理状态。\n\nredux 三要素：\n\n * actions：js 普通对象，必须含有一个字符串类型的 type 字段表示将要执行的动作。\n * store：维持应用的 state，提供 getstate () 方法获取 state；通过 dispatch (action) 更新 state，通过 subscribe (listener) 注册监听器，通过 subscribe (listener) 返回的函数注销监听器。redux 应用只有一个单一的 store\n * reducers：纯函数，接收先前的 state 和 action，并返回新的 state\n\n原理图：\n\n\n现在就用一个加减运算的案例来说明 redux 如何使用。\n\n\n# redux 使用\n\n# 1、安装 redux\n\nnpm install redux\n\n\n1\n\n\n# 2、编写 store 和 reducer 文件\n\n在项目根目录的 src 文件夹下创建 redux 文件夹，在该文件夹下创建 store.js 文件和 countreducer.js 文件\n\n// src/redux/countreducer.js\nconst initialstate = 0\nconst countreducer = (state = initialstate, action) => {\n  switch (action.type) {\n    case \'add\':\n      return state + 1\n    case \'minus\':\n      return state - 1\n    default:\n      return state\n  }\n}\n\nexport default countreducer\n\n\n// src/redux/store.js\nimport { createstore } from "redux"\nimport countreducer from "./countreducer";\n\nexport default createstore(countreducer)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n# 3、创建组件 count.jsx\n\n// class组件实现\nimport react, { component } from \'react\';\nimport store from "../../redux/store";\n\nclass count extends component {\n    state = {\n        count: store.getstate()\n    }\n    // 加运算\n    handleadd = () => {\n        store.dispatch({type: "add"})\n    }\n    // 减运算\n    handlereduce = () => {\n        store.dispatch({type: "minus"})\n    }\n    // 组件挂载时，监听store改变时，更新状态\n    componentdidmount() {\n        this.storesubscribe = store.subscribe(() => {\n            this.setstate({\n                count: store.getstate()\n            })\n        })\n    }\n    // 组件卸载时取消监听\n    componentwillunmount() {\n        this.storesubscribe()\n    }\n\n    render() {\n        return (\n            <div>\n               <h3>当前结果：{this.state.count}</h3>\n                <button onclick={ () => this.handleadd() }>加1</button>\n                <button onclick={ () => this.handlereduce() }>减1</button>\n            </div>\n        );\n    }\n}\n\nexport default count;\n\n\n\n// function组件实现\nimport react, { usestate, useeffect } from \'react\';\nimport store from "../../redux/store";\n\nconst count = () => {\n    const [count, setcount] = usestate(store.getstate());\n    useeffect(() => {\n        const unsubscribe = store.subscribe(() => {\n            setcount(store.getstate())\n        })\n        return () => {\n            unsubscribe()\n        }\n    }, [count])\n    const handleadd = () => {\n        store.dispatch({type: "add"})\n    }\n    const handlereduce = () => {\n        store.dispatch({type: "minus"})\n    }\n    return (\n        <div>\n           <h3>当前结果：{count}</h3>\n           <button onclick={ () => handleadd() }>加1</button>\n           <button onclick={ () => handlereduce() }>减1</button>\n        </div>\n    );\n};\n\nexport default count;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n\n\n当应用越来越复杂时，我们可以将 reducer 函数拆分成多个单独的函数，拆分后的函数负责独立管理 state 的一部分，这里需要用到 combinereducers 辅助函数，它的作用是把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 createstore 方法。\n\n例如，现在还有一个管理用户信息的 reducer，\n\nconst initialstate = {\n    name: "张三",\n    age: 28\n}\n\nconst userreducer = (state = initialstate, action) => {\n  switch (action.type) {\n    case "changeage":\n      return {\n          ...state,\n          age: action.payload\n      }\n    default:\n      return state\n  }\n}\nexport default userreducer\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n那么 src/redux/store.js 文件则更改如下：\n\nimport { createstore, combinereducers } from "redux"\nimport countreducer from "./countreducer";\nimport userreducer from "./userreducer";\n\nconst reducer = combinereducers({\n  countreducer,\n  userreducer\n})\nexport default createstore(reducer)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n此时，在 count.jsx 组件中使用如下：\n\nimport react, {usestate, useeffect} from \'react\';\nimport store from "../../redux/store";\n\nconst count = () => {\n    const [count, setcount] = usestate(store.getstate().countreducer);\n    const [user, setuser] = usestate(store.getstate().userreducer);\n    useeffect(() => {\n        const unsubscribe = store.subscribe(() => {\n            setcount(store.getstate().countreducer)\n            setuser(store.getstate().userreducer)\n        })\n        return () => {\n            unsubscribe()\n        }\n    }, [count, user])\n    const handleadd = () => {\n        store.dispatch({type: "add"})\n    }\n    const handlereduce = () => {\n        store.dispatch({type: "minus"})\n    }\n    const changeage = () => {\n        store.dispatch({type: "changeage", payload: 100})\n    }\n    return (\n        <div>\n           <h3>当前结果：{count}</h3>\n            <h3>用户信息：姓名：{user.name}，年龄：{user.age}</h3>\n           <button onclick={ () => handleadd() }>加1</button>\n           <button onclick={ () => handlereduce() }>减1</button>\n           <button onclick={ () => changeage() }>更改年龄</button>\n        </div>\n    );\n};\n\nexport default count;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n',charsets:{cjk:!0}},{title:"React之redux的数据持久化存储",frontmatter:{title:"React之redux的数据持久化存储",date:"2024-03-22T11:22:50.000Z",permalink:"/pages/424f92/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/13.React%E4%B9%8Bredux%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8.html",relativePath:"《React》笔记/01.React/13.React之redux的数据持久化存储.md",key:"v-7431bba6",path:"/pages/424f92/",lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:null,content:"我们在使用 redux 的时候，发现有个问题，就是刷新页面后，数据会丢失，这时候我们希望数据能持久化存储，而 redux 中刚好有这样一款中间件，能够持久化保存数据，它就是 redux-persist。\n\n1、安装中间件 redux-persist\n\nnpm install redux-persist\n\n\n1\n\n\n2、配置 persistStore 和 persistReducer\n\n// /src/react-redux/index.js\nimport { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";  // 默认是localStorage存储\n//import storageSession  from 'redux-persist/lib/storage/session'; //存储到sessionStorage\nimport countReducer from './reducers/countReducer';\nimport studentReducer from \"./reducers/studentReducer\"\n\n// 设置持久化配置\nconst persistConfig = {\n    key: \"my-redux\", // key是必须要配置的\n    storage,   // 选择存储方式，localStorage还是sessionStorage\n    whitelist: [\"countReducer\", \"studentReducer\"],  // 选择需要持久化存储的数据\n    blacklist: [],  // 配置黑名单，选择不需要持久化存储的数据\n}\n\n/*\n 合并reducer，将多个reducer函数合并为一个最终的 reducer 函数\n */\nconst rootReducer = combineReducers({\n    countReducer,\n    studentReducer\n})\n\n// 创建持久化reducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\n// 使用configureStore方法创建store配置如下：\nexport const store = configureStore({\n    reducer: persistedReducer,\n    // 关闭redux序列化检测，否则会报错，类似A non-serializable value was detected in an action\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n        serializableCheck: false\n    })\n})\n\n// 使用createStore方法创建store配置如下，此时需要从redux中引入createStore：\n// export const store = createStore(persistedReducer)\n\nexport const persistor = persistStore(store)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n3、在项目根目录下的 index.js 中配置如下\n\nimport React, {StrictMode} from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistor, store } from \"./reactRedux/index\"\n\n\nReactDOM.render(\n    <StrictMode>\n        <Provider store={store}>\n            <PersistGate persistor={persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n至此，数据持久化存储就搞定了",normalizedContent:"我们在使用 redux 的时候，发现有个问题，就是刷新页面后，数据会丢失，这时候我们希望数据能持久化存储，而 redux 中刚好有这样一款中间件，能够持久化保存数据，它就是 redux-persist。\n\n1、安装中间件 redux-persist\n\nnpm install redux-persist\n\n\n1\n\n\n2、配置 persiststore 和 persistreducer\n\n// /src/react-redux/index.js\nimport { configurestore, combinereducers } from '@reduxjs/toolkit';\nimport { persiststore, persistreducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";  // 默认是localstorage存储\n//import storagesession  from 'redux-persist/lib/storage/session'; //存储到sessionstorage\nimport countreducer from './reducers/countreducer';\nimport studentreducer from \"./reducers/studentreducer\"\n\n// 设置持久化配置\nconst persistconfig = {\n    key: \"my-redux\", // key是必须要配置的\n    storage,   // 选择存储方式，localstorage还是sessionstorage\n    whitelist: [\"countreducer\", \"studentreducer\"],  // 选择需要持久化存储的数据\n    blacklist: [],  // 配置黑名单，选择不需要持久化存储的数据\n}\n\n/*\n 合并reducer，将多个reducer函数合并为一个最终的 reducer 函数\n */\nconst rootreducer = combinereducers({\n    countreducer,\n    studentreducer\n})\n\n// 创建持久化reducer\nconst persistedreducer = persistreducer(persistconfig, rootreducer)\n\n// 使用configurestore方法创建store配置如下：\nexport const store = configurestore({\n    reducer: persistedreducer,\n    // 关闭redux序列化检测，否则会报错，类似a non-serializable value was detected in an action\n    middleware: (getdefaultmiddleware) => getdefaultmiddleware({\n        serializablecheck: false\n    })\n})\n\n// 使用createstore方法创建store配置如下，此时需要从redux中引入createstore：\n// export const store = createstore(persistedreducer)\n\nexport const persistor = persiststore(store)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n3、在项目根目录下的 index.js 中配置如下\n\nimport react, {strictmode} from 'react';\nimport reactdom from 'react-dom';\nimport app from './app';\nimport { provider } from 'react-redux'\nimport { persistgate } from 'redux-persist/integration/react'\nimport { persistor, store } from \"./reactredux/index\"\n\n\nreactdom.render(\n    <strictmode>\n        <provider store={store}>\n            <persistgate persistor={persistor}>\n                <app />\n            </persistgate>\n        </provider>\n    </strictmode>,\n  document.getelementbyid('root')\n);\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n至此，数据持久化存储就搞定了",charsets:{cjk:!0}},{title:"React之路由懒加载",frontmatter:{title:"React之路由懒加载",date:"2024-03-22T17:18:44.000Z",permalink:"/pages/13dc2b/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/14.React%E4%B9%8B%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD.html",relativePath:"《React》笔记/01.React/14.React之路由懒加载.md",key:"v-ef68ffac",path:"/pages/13dc2b/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'在项目中，经常不会是只有一两个组件，而是存在着许许多多的路由组件，而默认情况下，react 会全部加载，不管某个组件你是否用得上，一次性给你加载完，这样体验不太好。那么可不可以这样，就是在我们需要使用的时候才加载该组件呢？答案当然是有的，这里用到了 react 自带的 lazy 方法，在配置路由的时候这样配置\n\n1、在路由配置文件中配置如下：\n\n// /src/routes/routes.js\nimport {lazy} from \'react\';\nconst Home = lazy(() => import("../components/Home"))\nconst Page1 = lazy(() => import("../components/Page1/Page1"))\nconst Page2 = lazy(() => import("../components/Page2/Page2"))\n\n// 嵌套路由配置\nconst routes = [\n\t{\n\t\tpath: "/",\n\t\telement: <Home />,\n\t\tchildren: [\n\t\t\t{\n\t\t\t\tpath: "page1",\n\t\t\t\telement: <Page1 />\n\t\t\t},\n\t\t\t{\n\t\t\t\tpath: "page2",\n\t\t\t\telement: <Page2 />\n\t\t\t}\n\t\t]\n\t},\n]\n\n// 非嵌套路由配置\n// const routes = [\n// \t{\n// \t\tpath: "/",\n// \t\telement: <Home />,\n// \t\tchildren: []\n// \t},\n// \t{\n// \t\tpath: "/page1",\n// \t\telement: <Page1 />\n// \t},\n// \t{\n// \t\tpath: "/page2",\n// \t\telement: <Page2 />\n// \t}\n// ]\n\nexport default routes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n2、在项目根目录下的 app 组件中配置如下：\n\nimport React, { Suspense } from \'react\';\nimport { BrowserRouter as Router, useRoutes } from \'react-router-dom\';\nimport routes from \'./routes/routes.js\'\n\nexport default function App () {\n  const GetRoutes = () => {\n    const route = useRoutes(routes)\n    return route\n  }\n  return (\n    <Router>\n    \t{/* Suspense是必须要配置的，否则会报错，fallback表示懒加载中的提示，当组件未加载时展示该内容 */}\n      <Suspense fallback={<div>Loading...</div>}>\n        <GetRoutes />\n      </Suspense>\n    </Router>\n  )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n这样，路由懒加载功能就实现了，需要用到某个组件时才会加载，而不是一次性加载完。',normalizedContent:'在项目中，经常不会是只有一两个组件，而是存在着许许多多的路由组件，而默认情况下，react 会全部加载，不管某个组件你是否用得上，一次性给你加载完，这样体验不太好。那么可不可以这样，就是在我们需要使用的时候才加载该组件呢？答案当然是有的，这里用到了 react 自带的 lazy 方法，在配置路由的时候这样配置\n\n1、在路由配置文件中配置如下：\n\n// /src/routes/routes.js\nimport {lazy} from \'react\';\nconst home = lazy(() => import("../components/home"))\nconst page1 = lazy(() => import("../components/page1/page1"))\nconst page2 = lazy(() => import("../components/page2/page2"))\n\n// 嵌套路由配置\nconst routes = [\n\t{\n\t\tpath: "/",\n\t\telement: <home />,\n\t\tchildren: [\n\t\t\t{\n\t\t\t\tpath: "page1",\n\t\t\t\telement: <page1 />\n\t\t\t},\n\t\t\t{\n\t\t\t\tpath: "page2",\n\t\t\t\telement: <page2 />\n\t\t\t}\n\t\t]\n\t},\n]\n\n// 非嵌套路由配置\n// const routes = [\n// \t{\n// \t\tpath: "/",\n// \t\telement: <home />,\n// \t\tchildren: []\n// \t},\n// \t{\n// \t\tpath: "/page1",\n// \t\telement: <page1 />\n// \t},\n// \t{\n// \t\tpath: "/page2",\n// \t\telement: <page2 />\n// \t}\n// ]\n\nexport default routes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n2、在项目根目录下的 app 组件中配置如下：\n\nimport react, { suspense } from \'react\';\nimport { browserrouter as router, useroutes } from \'react-router-dom\';\nimport routes from \'./routes/routes.js\'\n\nexport default function app () {\n  const getroutes = () => {\n    const route = useroutes(routes)\n    return route\n  }\n  return (\n    <router>\n    \t{/* suspense是必须要配置的，否则会报错，fallback表示懒加载中的提示，当组件未加载时展示该内容 */}\n      <suspense fallback={<div>loading...</div>}>\n        <getroutes />\n      </suspense>\n    </router>\n  )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n这样，路由懒加载功能就实现了，需要用到某个组件时才会加载，而不是一次性加载完。',charsets:{cjk:!0}},{title:"React之Refs的基本使用",frontmatter:{title:"React之Refs的基本使用",date:"2024-03-08T10:11:27.000Z",permalink:"/pages/d89cab/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/05.React%E4%B9%8BRefs%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html",relativePath:"《React》笔记/01.React/05.React之Refs的基本使用.md",key:"v-3bf85657",path:"/pages/d89cab/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'在 React 中，允许我们通过 refs 来访问和操作 Dom 元素或组件实例。\n\n在类组件中使用 refs 有三种方式：\n\n①、字符串形式的 ref：(不推荐使用，该 API 在 React 未来的版本中将会被移除)\n\nclass App extends React.Component {\n\tgetInput = () => {\n\t\tconsole.log(this.refs.myInput) // 获取input的dom元素\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type="text" ref="myInput" onBlur={ this.getInput } />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n②、回调形式的 ref：\n\n// ref回调被定义为内联函数\nclass App extends React.Component {\n\tgetInput = () => {\n\t\tconsole.log(this.myInput) // 获取input的dom元素\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type="text" ref={ el => this.myInput = el } onBlur={ this.getInput } />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n\n\n// 或者也可以写成下面这种形式，ref回调被定义为类上的绑定方法\nclass App extends React.Component {\n\tgetInputRef = (el) => {\n\t\tthis.inputRef = el\n\t}\n\tgetInput = () => {\n\t\tconsole.log(this.inputRef)  // 获取input的dom元素\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type="text" ref={ this.getInputRef } onBlur={ this.getInput } />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n③、使用 createRef（主要用于类组件，在函数组件中通常使用 useRef）\n\nclass App extends React.Component {\n\tmyRef = React.createRef()\n\tgetInput = () => {\n\t\tconsole.log(this.myRef.current) // 获取input的dom元素\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type="text" ref={ this.myRef } onBlur={ this.getInput } />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n在函数组件中使用 refs 主要是通过 useRef 这个 API 来实现的\n\nimport { useRef } from "react"\nexport default function App () {\n    const myRef = useRef(null)\n    function getInput () {\n        console.log(myRef.current)\n    }\n    return (\n        <div>\n            <input type="text" ref={myRef} onBlur={ getInput } />\n        </div>\n    )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n',normalizedContent:'在 react 中，允许我们通过 refs 来访问和操作 dom 元素或组件实例。\n\n在类组件中使用 refs 有三种方式：\n\n①、字符串形式的 ref：(不推荐使用，该 api 在 react 未来的版本中将会被移除)\n\nclass app extends react.component {\n\tgetinput = () => {\n\t\tconsole.log(this.refs.myinput) // 获取input的dom元素\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type="text" ref="myinput" onblur={ this.getinput } />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default app;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n②、回调形式的 ref：\n\n// ref回调被定义为内联函数\nclass app extends react.component {\n\tgetinput = () => {\n\t\tconsole.log(this.myinput) // 获取input的dom元素\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type="text" ref={ el => this.myinput = el } onblur={ this.getinput } />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default app;\n\n\n// 或者也可以写成下面这种形式，ref回调被定义为类上的绑定方法\nclass app extends react.component {\n\tgetinputref = (el) => {\n\t\tthis.inputref = el\n\t}\n\tgetinput = () => {\n\t\tconsole.log(this.inputref)  // 获取input的dom元素\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type="text" ref={ this.getinputref } onblur={ this.getinput } />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default app;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n③、使用 createref（主要用于类组件，在函数组件中通常使用 useref）\n\nclass app extends react.component {\n\tmyref = react.createref()\n\tgetinput = () => {\n\t\tconsole.log(this.myref.current) // 获取input的dom元素\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type="text" ref={ this.myref } onblur={ this.getinput } />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default app;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n在函数组件中使用 refs 主要是通过 useref 这个 api 来实现的\n\nimport { useref } from "react"\nexport default function app () {\n    const myref = useref(null)\n    function getinput () {\n        console.log(myref.current)\n    }\n    return (\n        <div>\n            <input type="text" ref={myref} onblur={ getinput } />\n        </div>\n    )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n',charsets:{cjk:!0}},{title:"React之Render Props的使用",frontmatter:{title:"React之Render Props的使用",date:"2024-03-26T15:22:05.000Z",permalink:"/pages/e3496f/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/15.React%E4%B9%8BRender%20Props%E7%9A%84%E4%BD%BF%E7%94%A8.html",relativePath:"《React》笔记/01.React/15.React之Render Props的使用.md",key:"v-61f38f29",path:"/pages/e3496f/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'当涉及到多层组件嵌套时，如 A 组件里嵌套 B 组件，B 组件又嵌套 C 组件，如下：\n\nimport React, { Component } from \'react\'\nimport styles from "./RenderContent.module.css"\n\nexport default class A extends Component {\n  render() {\n    return (\n      <div className={styles.a}>\n        <div>我是组件A</div>\n        <B>\n          <C /> \n        </B>\n      </div>\n    )\n  }\n}\n\nclass B extends Component {\n  render() {\n    return (\n      <div className={ styles.b }>\n        我是组件B\n      </div>\n    )\n  }\n}\n\nclass C extends Component {\n  render () {\n    console.log("props", this.props)\n\n    return (\n      <div className={styles.c}>我是组件C</div>\n    )\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n此时，会发现组件 A、组件 B 都能正常渲染，但是组件 C 的内容是无法渲染出来的，这是需要将组件 B 的代码修改如下：\n\nclass B extends Component {\n  render() {\n    return (\n      <div className={ styles.b }>\n        我是组件B\n        { this.props.children }\n      </div>\n    )\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n这时，组件 C 也能正常渲染了，但是，如果通过这种组件嵌套的方式，想把组件 B 中的状态传给组件 C 又该如何做呢？代码如下：\n\nimport React, { Component } from \'react\'\nimport styles from "./RenderContent.module.css"\n\nexport default class A extends Component {\n  render() {\n    return (\n      <div className={styles.a}>\n        <div>我是组件A</div>\n        {/* renderContent字段可取任何名字，必须与组件B中的props对应 */}\n        <B renderContent={ (data) => <C {...data} /> }></B>\n      </div>\n    )\n  }\n}\n\nclass B extends Component {\n  state = {\n    name: "张三",\n    age: 34\n  }\n  render() {\n    return (\n      <div className={ styles.b }>\n        我是组件B\n        { this.props.renderContent(this.state) }\n      </div>\n    )\n  }\n}\n\nclass C extends Component {\n  render () {\n    console.log("props", this.props)\n\n    return (\n      <div className={styles.c}>我是组件C</div>\n    )\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n像 renderContent 这样的参数会被称为渲染属性，渲染属性是函数，所以可以向它们传递参数，这种方法相当于 Vue 中的 Slot',normalizedContent:'当涉及到多层组件嵌套时，如 a 组件里嵌套 b 组件，b 组件又嵌套 c 组件，如下：\n\nimport react, { component } from \'react\'\nimport styles from "./rendercontent.module.css"\n\nexport default class a extends component {\n  render() {\n    return (\n      <div classname={styles.a}>\n        <div>我是组件a</div>\n        <b>\n          <c /> \n        </b>\n      </div>\n    )\n  }\n}\n\nclass b extends component {\n  render() {\n    return (\n      <div classname={ styles.b }>\n        我是组件b\n      </div>\n    )\n  }\n}\n\nclass c extends component {\n  render () {\n    console.log("props", this.props)\n\n    return (\n      <div classname={styles.c}>我是组件c</div>\n    )\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n此时，会发现组件 a、组件 b 都能正常渲染，但是组件 c 的内容是无法渲染出来的，这是需要将组件 b 的代码修改如下：\n\nclass b extends component {\n  render() {\n    return (\n      <div classname={ styles.b }>\n        我是组件b\n        { this.props.children }\n      </div>\n    )\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n这时，组件 c 也能正常渲染了，但是，如果通过这种组件嵌套的方式，想把组件 b 中的状态传给组件 c 又该如何做呢？代码如下：\n\nimport react, { component } from \'react\'\nimport styles from "./rendercontent.module.css"\n\nexport default class a extends component {\n  render() {\n    return (\n      <div classname={styles.a}>\n        <div>我是组件a</div>\n        {/* rendercontent字段可取任何名字，必须与组件b中的props对应 */}\n        <b rendercontent={ (data) => <c {...data} /> }></b>\n      </div>\n    )\n  }\n}\n\nclass b extends component {\n  state = {\n    name: "张三",\n    age: 34\n  }\n  render() {\n    return (\n      <div classname={ styles.b }>\n        我是组件b\n        { this.props.rendercontent(this.state) }\n      </div>\n    )\n  }\n}\n\nclass c extends component {\n  render () {\n    console.log("props", this.props)\n\n    return (\n      <div classname={styles.c}>我是组件c</div>\n    )\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n像 rendercontent 这样的参数会被称为渲染属性，渲染属性是函数，所以可以向它们传递参数，这种方法相当于 vue 中的 slot',charsets:{cjk:!0}},{title:"React之createBrowserRouter",frontmatter:{title:"React之createBrowserRouter",date:"2024-04-01T11:53:26.000Z",permalink:"/pages/a729d6/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/16.React%E4%B9%8BcreateBrowserRouter.html",relativePath:"《React》笔记/01.React/16.React之createBrowserRouter.md",key:"v-dadd89f2",path:"/pages/a729d6/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'这是 react-router-dom v6.4 的 API，createBrowserRouter, 用官方的说法就是 This is the recommended router for all React Router web projects。翻译成人话就是 这是所有 React router web 项目的推荐路由器。\n\n如果你的项目使用的是 react-router-dom 6.4 之前的版本，那么你需要更新 react-router-dom\n\n1、安装 react-router-dom\n\nnpm install react-router-dom@6.x // 会下载最新版本，也可以执行具体的下载版本\n\n\n1\n\n\n2、路由配置更改如下：\n\n// /src/routes/routes.js\nimport React, {lazy, Suspense} from \'react\';\nimport {createBrowserRouter} from \'react-router-dom\'\nconst Home = lazy(() => import("../components/Home"))\nconst Page1 = lazy(() => import("../components/Page1/Page1"))\nconst Page2 = lazy(() => import("../components/Page2/Page2"))\nconst Page3 = lazy(() => import("../components/Page3/Page3"))\nconst Page4 = lazy(() => import("../components/Page4/Page4"))\n\n\nfunction LoadingComponent (props) {\n\treturn (\n\t\t<Suspense fallback={"加载中"}>{props.children}</Suspense>\n\t)\n}\n\nconst routes = createBrowserRouter([\n\t{\n\t\tpath: "/",\n\t\telement: <LoadingComponent><Home /></LoadingComponent>,\n\t\tchildren: [\n\t\t\t{\n\t\t\t\tpath: "page1",\n\t\t\t\telement: <LoadingComponent><Page1 /></LoadingComponent>\n\t\t\t},\n\t\t\t{\n\t\t\t\tpath: "page2",\n\t\t\t\telement: <LoadingComponent><Page2 /></LoadingComponent>\n\t\t\t},\n\t\t\t{\n\t\t\t\tpath: "page3",\n\t\t\t\telement: <LoadingComponent><Page3 /></LoadingComponent>\n\t\t\t},\n\t\t\t{\n\t\t\t\tpath: "page4",\n\t\t\t\telement: <LoadingComponent><Page4 /></LoadingComponent>\n\t\t\t},\n\t\t]\n\t}\n])\n\nexport default routes\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n3、在 /src/index.js 或 index.jsx 中配置如下，\n\n// 如果使用的是react 18和react-dom 18版本的，\nimport React, {StrictMode, Suspense} from \'react\';\nimport ReactDOM from \'react-dom/client\';  // react-dom 18版本\nimport { RouterProvider } from "react-router-dom"\nimport router from \'./routes/routes\'\nimport { Provider } from \'react-redux\'\n/* redux数据持久化 */\nimport {PersistGate} from \'redux-persist/integration/react\'\nimport {persistor, store} from "./reactRedux/index"\n\nReactDOM.createRoot(document.getElementById(\'root\')).render(\n\t<StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<PersistGate persistor={persistor}>\n\t\t\t\t<RouterProvider router={router}></RouterProvider>\n\t\t\t</PersistGate>\n\t\t</Provider>\n\t</StrictMode>\n)\n\n// 如果使用的是react 17和react-dom 17版本的，\nimport React, {StrictMode, Suspense} from \'react\';\nimport ReactDOM from \'react-dom\';  \nimport { RouterProvider } from "react-router-dom"\nimport router from \'./routes/routes\'\nimport { Provider } from \'react-redux\'\n/* redux数据持久化 */\nimport {PersistGate} from \'redux-persist/integration/react\'\nimport {persistor, store} from "./reactRedux/index"\n\nReactDOM.render(\n    <StrictMode>\n        <Provider store={store}>\n            <PersistGate persistor={persistor}>\n                <RouterProvider router={router}></RouterProvider>\n            </PersistGate>\n        </Provider>\n    </StrictMode>,\n  document.getElementById(\'root\')\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n至此，一个路由懒加载、redux 数据持久化的基本框架已经搭建好了',normalizedContent:'这是 react-router-dom v6.4 的 api，createbrowserrouter, 用官方的说法就是 this is the recommended router for all react router web projects。翻译成人话就是 这是所有 react router web 项目的推荐路由器。\n\n如果你的项目使用的是 react-router-dom 6.4 之前的版本，那么你需要更新 react-router-dom\n\n1、安装 react-router-dom\n\nnpm install react-router-dom@6.x // 会下载最新版本，也可以执行具体的下载版本\n\n\n1\n\n\n2、路由配置更改如下：\n\n// /src/routes/routes.js\nimport react, {lazy, suspense} from \'react\';\nimport {createbrowserrouter} from \'react-router-dom\'\nconst home = lazy(() => import("../components/home"))\nconst page1 = lazy(() => import("../components/page1/page1"))\nconst page2 = lazy(() => import("../components/page2/page2"))\nconst page3 = lazy(() => import("../components/page3/page3"))\nconst page4 = lazy(() => import("../components/page4/page4"))\n\n\nfunction loadingcomponent (props) {\n\treturn (\n\t\t<suspense fallback={"加载中"}>{props.children}</suspense>\n\t)\n}\n\nconst routes = createbrowserrouter([\n\t{\n\t\tpath: "/",\n\t\telement: <loadingcomponent><home /></loadingcomponent>,\n\t\tchildren: [\n\t\t\t{\n\t\t\t\tpath: "page1",\n\t\t\t\telement: <loadingcomponent><page1 /></loadingcomponent>\n\t\t\t},\n\t\t\t{\n\t\t\t\tpath: "page2",\n\t\t\t\telement: <loadingcomponent><page2 /></loadingcomponent>\n\t\t\t},\n\t\t\t{\n\t\t\t\tpath: "page3",\n\t\t\t\telement: <loadingcomponent><page3 /></loadingcomponent>\n\t\t\t},\n\t\t\t{\n\t\t\t\tpath: "page4",\n\t\t\t\telement: <loadingcomponent><page4 /></loadingcomponent>\n\t\t\t},\n\t\t]\n\t}\n])\n\nexport default routes\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n3、在 /src/index.js 或 index.jsx 中配置如下，\n\n// 如果使用的是react 18和react-dom 18版本的，\nimport react, {strictmode, suspense} from \'react\';\nimport reactdom from \'react-dom/client\';  // react-dom 18版本\nimport { routerprovider } from "react-router-dom"\nimport router from \'./routes/routes\'\nimport { provider } from \'react-redux\'\n/* redux数据持久化 */\nimport {persistgate} from \'redux-persist/integration/react\'\nimport {persistor, store} from "./reactredux/index"\n\nreactdom.createroot(document.getelementbyid(\'root\')).render(\n\t<strictmode>\n\t\t<provider store={store}>\n\t\t\t<persistgate persistor={persistor}>\n\t\t\t\t<routerprovider router={router}></routerprovider>\n\t\t\t</persistgate>\n\t\t</provider>\n\t</strictmode>\n)\n\n// 如果使用的是react 17和react-dom 17版本的，\nimport react, {strictmode, suspense} from \'react\';\nimport reactdom from \'react-dom\';  \nimport { routerprovider } from "react-router-dom"\nimport router from \'./routes/routes\'\nimport { provider } from \'react-redux\'\n/* redux数据持久化 */\nimport {persistgate} from \'redux-persist/integration/react\'\nimport {persistor, store} from "./reactredux/index"\n\nreactdom.render(\n    <strictmode>\n        <provider store={store}>\n            <persistgate persistor={persistor}>\n                <routerprovider router={router}></routerprovider>\n            </persistgate>\n        </provider>\n    </strictmode>,\n  document.getelementbyid(\'root\')\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n至此，一个路由懒加载、redux 数据持久化的基本框架已经搭建好了',charsets:{cjk:!0}},{title:"React之craco打包优化配置",frontmatter:{title:"React之craco打包优化配置",date:"2024-04-02T15:43:08.000Z",permalink:"/pages/9c12e8/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/18.React%E4%B9%8Bcraco%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE.html",relativePath:"《React》笔记/01.React/18.React之craco打包优化配置.md",key:"v-1635394c",path:"/pages/9c12e8/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"随着项目规模的增加，当文件越来越多、引入的第三方组件库越来越多的时候，如果使用脚手架默认配置的话，打包出来的项目体积会变得越来越大，为了解决这个问题，需要我们去自定义 webpack 配置。\n\n这里有两种方法，第一种是执行 npm run eject 暴露出 webpack 的配置项，然后更改里面的配置文件（不推荐）。第二种方法是使用第三方库 @craco/craco，这里使用的是第二种\n\n需求是开启 gzip 压缩，关闭 sourcemap 文件生成，js 分模块打包，开启 tree-shaking，路径别名配置，cdn 外部资源不打包等\n\n1、安装相关依赖\n\nnpm install @craco/craco\n\n// 由于这些插件只是在打包的时候需要，生产环境下不需要，因此我们安装到开发环境下\nnpm install uglifyjs-webpack-plugin@2 compression-webpack-plugin@6 css-minimizer-webpack-plugin@1 terser-webpack-plugin@4 -D --force\n\n\n1\n2\n3\n4\n\n\n2、在项目根目录下创建 craco.config.js 配置文件\n\n// craco.config.js\nconst path=require( 'path' );\n// Webpack 4及以下版本使用该插件\n// 用于js代码压缩和混淆的插件，减小js代码体积，提高加载速度，保护代码不被轻易篡改\n// const UglifyJsPlugin=require( \"uglifyjs-webpack-plugin\" );\n\n// 安装版本5或6，高版本会报错\nconst CompressionWebpackPlugin=require( 'compression-webpack-plugin' ); \n\n// 安装1版本的，高版本会报错\nconst CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\"); \n\n// 如果使用 webpack v4，则必须安装 terser-webpack-plugin v4 的版本，否则配置sourceMap时会报错\n// Webpack 5及以上版本使用这个\n// 用于js代码压缩和混淆的插件，减小js代码体积，提高加载速度，保护代码不被轻易篡改\nconst TerserPlugin = require(\"terser-webpack-plugin\"); \n\n// 用于打包性能分析\n// const { BundleAnalyzerPlugin }=require( \"webpack-bundle-analyzer\" )\n\nmodule.exports = {\n  webpack: {\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n    },\n    plugins: [\n    \t// 打包性能分析\n    \t// new BundleAnalyzerPlugin({\n    \t// \topenAnalyzer: false,     // 是否在默认浏览器中自动打开报告\n     \t//    analyzerMode: 'static',  // 生成分析报告report.html\n    \t// })\n      // 建议安装5或6版本，过高会报错\n      new CompressionWebpackPlugin( {\n        algorithm: 'gzip',\n        test: /\\.js$|\\.html$|\\.json$|\\.css/,\n        threshold: 10240, // 只有大小超过10k的资源会被处理\n        minRatio: 0.8, // 最小压缩比达到0.8时才会被压缩\n        deleteOriginalAssets: false, // 是否删除原文件，默认为false\n      } ),\n      /*\n      \tWebpack 5及以上版本\n        用于js代码压缩和混淆的插件，减小js代码体积，提高加载速度，保护代码不被轻易篡改\n      */\n      new TerserPlugin( {\n        parallel: true,\n        sourceMap: false,\n        terserOptions: {\n          compress: {\n            drop_console: true,\n            drop_debugger: true\n          },\n        },\n      } ),\n      // 压缩css代码\n      new CssMinimizerPlugin(\n        {\n          parallel: true, // 使用多进程并行执行任务来提高构建效率\n          sourceMap: false, // 不生成map文件\n        }\n      ),\n\n      // Webpack 4及以下版本\n      // new UglifyJsPlugin({\n      //   uglifyOptions: {\n      //     compress: {\n      //       drop_debugger: true,\n      //       drop_console: true, //生产环境自动删除console\n      //     },\n      //     warnings: false,\n      //   },\n      //   sourceMap: false,\n      //   parallel: true, //使用多进程并行运行来提高构建速度。默认并发运行数：os.cpus().length - 1。\n      // } ),\n    ],\n    optimization: {\n      splitChunks: {\n        chunks: 'all',\n        cacheGroups: {\n          vendors: {\n            test: /[\\\\/]node_modules[\\\\/]/,\n            priority: -10,\n            name (module) {\n              // node_modules/packageName\n              const packageName = module.context.match(\n                /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\n              )[1]\n              return `npm.${packageName.replace(\"@\", \"\")}`\n            },\n          },\n        }\n      },\n      runtimeChunk: true, // 避免文件的频繁变更导致浏览器缓存失效\n      usedExports: true, // 开启tree-shaking\n      minimize: true,\n    },\n    // 不生成map文件\n    devtool: false,\n    // 配置cdn外部资源不打包\n    externals: {\n      'react': 'React',\n      'react-dom': 'ReactDOM',\n    }\n  },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n\n\n上述配置也可更改如下：\n\nconst path=require( 'path' );\n// Webpack 4及以下版本使用该插件\n// 用于js代码压缩和混淆的插件，减小js代码体积，提高加载速度，保护代码不被轻易篡改\n// const UglifyJsPlugin=require( \"uglifyjs-webpack-plugin\" );\n\n// 如果webpack版本不够高，则建议安装版本5或6，否则高版本会报错\nconst CompressionWebpackPlugin=require( 'compression-webpack-plugin' ); \n\n// 如果webpack版本不够高，则建议安装1版本的，否则高版本会报错\nconst CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\"); \n\n// 如果使用 webpack v4，则必须安装 terser-webpack-plugin v4 的版本，否则配置sourceMap时会报错\n// Webpack 5及以上版本使用这个\n// 用于js代码压缩和混淆的插件，减小js代码体积，提高加载速度，保护代码不被轻易篡改\nconst TerserPlugin=require( \"terser-webpack-plugin\" ); \n\n\nmodule.exports = {\n  webpack: {\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n    },\n    configure: ( webpackConfig, { env, paths } ) => {\n      const isEnvProduction = env === 'production';\n      webpackConfig.devtool = false; // 不生成map文件\n      if ( isEnvProduction ) { \n        // 用于js代码压缩和混淆的插件，减小js代码体积，提高加载速度，保护代码不被轻易篡改\n        webpackConfig.plugins.push(\n          new CompressionWebpackPlugin( {\n            algorithm: 'gzip',\n            test: /\\.js$|\\.html$|\\.json$|\\.css/,\n            threshold: 10240, // 只有大小超过10k的资源会被处理\n            minRatio: 0.8, // 最小压缩比达到0.8时才会被压缩\n            deleteOriginalAssets: false, // 是否删除原文件，默认为false\n          } )\n        )\n        webpackConfig.plugins.push(\n          new TerserPlugin({\n            parallel: true,\n            terserOptions: {\n              compress: {\n                drop_console: true,\n                drop_debugger: true,\n              },\n            },\n          })\n        )\n        webpackConfig.plugins.push(\n          new CssMinimizerPlugin(\n            {\n              parallel: true, // 使用多进程并行执行任务来提高构建效率\n            }\n          )\n        )\n\n        webpackConfig.optimization = {\n          splitChunks: {\n            chunks: 'all',\n            maxInitialRequests: Infinity,\n            minSize: 20000,\n            cacheGroups: {\n              vendor: {\n                test: /[\\\\/]node_modules[\\\\/]/,\n                name ( module, chunks, cacheGroupKey ) {\n                  const moduleFileName = module\n                    .identifier()\n                    .split('/').reduceRight((item) => item);\n                  const allChunksNames = chunks\n                    .map( ( chunk ) => chunk.name )\n                    .join( ',' );\n                  return `${cacheGroupKey}-${allChunksNames}-${moduleFileName}`\n                }\n              }\n            },\n          },\n          runtimeChunk: true,\n          usedExports: true,\n          minimize: true,\n        }\n\n\t\t// 配置cdn外部资源不打包\n        webpackConfig.externals = {\n        \t'react': 'React',\n      \t\t'react-dom': 'ReactDOM',\n      \t\t'echarts': 'echarts'\n        }\n      }\n      return webpackConfig\n    },\n  }\n};\n\n// 如果想cdn外部资源不打包还需要在index.html文件中引入相应的三方包\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n\n\n此时，配置已完成，可以愉快的玩耍了",normalizedContent:"随着项目规模的增加，当文件越来越多、引入的第三方组件库越来越多的时候，如果使用脚手架默认配置的话，打包出来的项目体积会变得越来越大，为了解决这个问题，需要我们去自定义 webpack 配置。\n\n这里有两种方法，第一种是执行 npm run eject 暴露出 webpack 的配置项，然后更改里面的配置文件（不推荐）。第二种方法是使用第三方库 @craco/craco，这里使用的是第二种\n\n需求是开启 gzip 压缩，关闭 sourcemap 文件生成，js 分模块打包，开启 tree-shaking，路径别名配置，cdn 外部资源不打包等\n\n1、安装相关依赖\n\nnpm install @craco/craco\n\n// 由于这些插件只是在打包的时候需要，生产环境下不需要，因此我们安装到开发环境下\nnpm install uglifyjs-webpack-plugin@2 compression-webpack-plugin@6 css-minimizer-webpack-plugin@1 terser-webpack-plugin@4 -d --force\n\n\n1\n2\n3\n4\n\n\n2、在项目根目录下创建 craco.config.js 配置文件\n\n// craco.config.js\nconst path=require( 'path' );\n// webpack 4及以下版本使用该插件\n// 用于js代码压缩和混淆的插件，减小js代码体积，提高加载速度，保护代码不被轻易篡改\n// const uglifyjsplugin=require( \"uglifyjs-webpack-plugin\" );\n\n// 安装版本5或6，高版本会报错\nconst compressionwebpackplugin=require( 'compression-webpack-plugin' ); \n\n// 安装1版本的，高版本会报错\nconst cssminimizerplugin = require(\"css-minimizer-webpack-plugin\"); \n\n// 如果使用 webpack v4，则必须安装 terser-webpack-plugin v4 的版本，否则配置sourcemap时会报错\n// webpack 5及以上版本使用这个\n// 用于js代码压缩和混淆的插件，减小js代码体积，提高加载速度，保护代码不被轻易篡改\nconst terserplugin = require(\"terser-webpack-plugin\"); \n\n// 用于打包性能分析\n// const { bundleanalyzerplugin }=require( \"webpack-bundle-analyzer\" )\n\nmodule.exports = {\n  webpack: {\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n    },\n    plugins: [\n    \t// 打包性能分析\n    \t// new bundleanalyzerplugin({\n    \t// \topenanalyzer: false,     // 是否在默认浏览器中自动打开报告\n     \t//    analyzermode: 'static',  // 生成分析报告report.html\n    \t// })\n      // 建议安装5或6版本，过高会报错\n      new compressionwebpackplugin( {\n        algorithm: 'gzip',\n        test: /\\.js$|\\.html$|\\.json$|\\.css/,\n        threshold: 10240, // 只有大小超过10k的资源会被处理\n        minratio: 0.8, // 最小压缩比达到0.8时才会被压缩\n        deleteoriginalassets: false, // 是否删除原文件，默认为false\n      } ),\n      /*\n      \twebpack 5及以上版本\n        用于js代码压缩和混淆的插件，减小js代码体积，提高加载速度，保护代码不被轻易篡改\n      */\n      new terserplugin( {\n        parallel: true,\n        sourcemap: false,\n        terseroptions: {\n          compress: {\n            drop_console: true,\n            drop_debugger: true\n          },\n        },\n      } ),\n      // 压缩css代码\n      new cssminimizerplugin(\n        {\n          parallel: true, // 使用多进程并行执行任务来提高构建效率\n          sourcemap: false, // 不生成map文件\n        }\n      ),\n\n      // webpack 4及以下版本\n      // new uglifyjsplugin({\n      //   uglifyoptions: {\n      //     compress: {\n      //       drop_debugger: true,\n      //       drop_console: true, //生产环境自动删除console\n      //     },\n      //     warnings: false,\n      //   },\n      //   sourcemap: false,\n      //   parallel: true, //使用多进程并行运行来提高构建速度。默认并发运行数：os.cpus().length - 1。\n      // } ),\n    ],\n    optimization: {\n      splitchunks: {\n        chunks: 'all',\n        cachegroups: {\n          vendors: {\n            test: /[\\\\/]node_modules[\\\\/]/,\n            priority: -10,\n            name (module) {\n              // node_modules/packagename\n              const packagename = module.context.match(\n                /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\n              )[1]\n              return `npm.${packagename.replace(\"@\", \"\")}`\n            },\n          },\n        }\n      },\n      runtimechunk: true, // 避免文件的频繁变更导致浏览器缓存失效\n      usedexports: true, // 开启tree-shaking\n      minimize: true,\n    },\n    // 不生成map文件\n    devtool: false,\n    // 配置cdn外部资源不打包\n    externals: {\n      'react': 'react',\n      'react-dom': 'reactdom',\n    }\n  },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n\n\n上述配置也可更改如下：\n\nconst path=require( 'path' );\n// webpack 4及以下版本使用该插件\n// 用于js代码压缩和混淆的插件，减小js代码体积，提高加载速度，保护代码不被轻易篡改\n// const uglifyjsplugin=require( \"uglifyjs-webpack-plugin\" );\n\n// 如果webpack版本不够高，则建议安装版本5或6，否则高版本会报错\nconst compressionwebpackplugin=require( 'compression-webpack-plugin' ); \n\n// 如果webpack版本不够高，则建议安装1版本的，否则高版本会报错\nconst cssminimizerplugin = require(\"css-minimizer-webpack-plugin\"); \n\n// 如果使用 webpack v4，则必须安装 terser-webpack-plugin v4 的版本，否则配置sourcemap时会报错\n// webpack 5及以上版本使用这个\n// 用于js代码压缩和混淆的插件，减小js代码体积，提高加载速度，保护代码不被轻易篡改\nconst terserplugin=require( \"terser-webpack-plugin\" ); \n\n\nmodule.exports = {\n  webpack: {\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n    },\n    configure: ( webpackconfig, { env, paths } ) => {\n      const isenvproduction = env === 'production';\n      webpackconfig.devtool = false; // 不生成map文件\n      if ( isenvproduction ) { \n        // 用于js代码压缩和混淆的插件，减小js代码体积，提高加载速度，保护代码不被轻易篡改\n        webpackconfig.plugins.push(\n          new compressionwebpackplugin( {\n            algorithm: 'gzip',\n            test: /\\.js$|\\.html$|\\.json$|\\.css/,\n            threshold: 10240, // 只有大小超过10k的资源会被处理\n            minratio: 0.8, // 最小压缩比达到0.8时才会被压缩\n            deleteoriginalassets: false, // 是否删除原文件，默认为false\n          } )\n        )\n        webpackconfig.plugins.push(\n          new terserplugin({\n            parallel: true,\n            terseroptions: {\n              compress: {\n                drop_console: true,\n                drop_debugger: true,\n              },\n            },\n          })\n        )\n        webpackconfig.plugins.push(\n          new cssminimizerplugin(\n            {\n              parallel: true, // 使用多进程并行执行任务来提高构建效率\n            }\n          )\n        )\n\n        webpackconfig.optimization = {\n          splitchunks: {\n            chunks: 'all',\n            maxinitialrequests: infinity,\n            minsize: 20000,\n            cachegroups: {\n              vendor: {\n                test: /[\\\\/]node_modules[\\\\/]/,\n                name ( module, chunks, cachegroupkey ) {\n                  const modulefilename = module\n                    .identifier()\n                    .split('/').reduceright((item) => item);\n                  const allchunksnames = chunks\n                    .map( ( chunk ) => chunk.name )\n                    .join( ',' );\n                  return `${cachegroupkey}-${allchunksnames}-${modulefilename}`\n                }\n              }\n            },\n          },\n          runtimechunk: true,\n          usedexports: true,\n          minimize: true,\n        }\n\n\t\t// 配置cdn外部资源不打包\n        webpackconfig.externals = {\n        \t'react': 'react',\n      \t\t'react-dom': 'reactdom',\n      \t\t'echarts': 'echarts'\n        }\n      }\n      return webpackconfig\n    },\n  }\n};\n\n// 如果想cdn外部资源不打包还需要在index.html文件中引入相应的三方包\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n\n\n此时，配置已完成，可以愉快的玩耍了",charsets:{cjk:!0}},{title:"React之使用vite创建项目",frontmatter:{title:"React之使用vite创建项目",date:"2024-06-21T10:54:59.000Z",permalink:"/pages/a51345/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/21.React%E4%B9%8B%E4%BD%BF%E7%94%A8vite%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.html",relativePath:"《React》笔记/01.React/21.React之使用vite创建项目.md",key:"v-084f1662",path:"/pages/a51345/",headers:[{level:2,title:"1、创建react + ts项目",slug:"_1、创建react-ts项目",normalizedTitle:"1、创建 react + ts 项目",charIndex:51},{level:2,title:"2、创建完成后，安装相关依赖",slug:"_2、创建完成后-安装相关依赖",normalizedTitle:"2、创建完成后，安装相关依赖",charIndex:237},{level:2,title:"3、npm run dev启动项目发现能正常运行。",slug:"_3、npm-run-dev启动项目发现能正常运行。",normalizedTitle:"3、npm run dev 启动项目发现能正常运行。",charIndex:274},{level:2,title:"4、项目开发相关配置",slug:"_4、项目开发相关配置",normalizedTitle:"4、项目开发相关配置",charIndex:305},{level:3,title:"(1)、安装postcss-pxtorem、autoprefixer、vite-plugin-compression",slug:"_1-、安装postcss-pxtorem、autoprefixer、vite-plugin-compression",normalizedTitle:"(1)、安装 postcss-pxtorem、autoprefixer、vite-plugin-compression",charIndex:320},{level:3,title:"(2)、开启打包后js、css、图片等文件夹分离。",slug:"_2-、开启打包后js、css、图片等文件夹分离。",normalizedTitle:"(2)、开启打包后 js、css、图片等文件夹分离。",charIndex:494},{level:3,title:"(3)、配置@路径别名",slug:"_3-、配置-路径别名",normalizedTitle:"(3)、配置 @路径别名",charIndex:754},{level:3,title:"(4)、react-router-dom安装及配置",slug:"_4-、react-router-dom安装及配置",normalizedTitle:"(4)、react-router-dom 安装及配置",charIndex:1072},{level:3,title:"(5)、配置路由管理文件",slug:"_5-、配置路由管理文件",normalizedTitle:"(5)、配置路由管理文件",charIndex:1138},{level:3,title:"(6)、配置自动按需引入",slug:"_6-、配置自动按需引入",normalizedTitle:"(6)、配置自动按需引入",charIndex:2417},{level:3,title:"(7)、配置prettier以实现代码格式化。",slug:"_7-、配置prettier以实现代码格式化。",normalizedTitle:"(7)、配置 prettier 以实现代码格式化。",charIndex:3303}],lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:"1、创建react + ts项目 2、创建完成后，安装相关依赖 3、npm run dev启动项目发现能正常运行。 4、项目开发相关配置 (1)、安装postcss-pxtorem、autoprefixer、vite-plugin-compression (2)、开启打包后js、css、图片等文件夹分离。 (3)、配置@路径别名 (4)、react-router-dom安装及配置 (5)、配置路由管理文件 (6)、配置自动按需引入 (7)、配置prettier以实现代码格式化。",content:"虽然使用官方脚手架创建项目使用的多点，但也想尝试下使用 vite 创建项目。这里特此记录下。\n\n\n# 1、创建 react + ts 项目\n\n// npm 6.x\nnpm create vite@latest vite-react-ts-demo --template react-ts\n\n// npm 7+\nnpm create vite@latest vite-react-ts-demo -- --template react-ts\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2、创建完成后，安装相关依赖\n\nnpm install\n\n\n1\n\n\n\n# 3、npm run dev 启动项目发现能正常运行。\n\n\n# 4、项目开发相关配置\n\n\n# (1)、安装 postcss-pxtorem、autoprefixer、vite-plugin-compression\n\n具体配置同使用 vite 搭建 vue3+TS 项目及基础配置中一样\n\nnpm install postcss-pxtorem autoprefixer vite-plugin-compression -D\n\n\n1\n\n\n\n# (2)、开启打包后 js、css、图片等文件夹分离。\n\n配置也与在 vue 中配置相同，执行完后可能会报错，[vite:terser] terser not found. Since Vite v3, terser has become an optional dependency. You need to install it. 意思是在 vite v3 中，需要手动安装 terser\n\nnpm install terser -D\n\n\n1\n\n\n现在执行 npm run build 进行打包能正常工作了。\n\n\n# (3)、配置 @路径别名\n\nimport path from 'path'\n\nresolve: {\n  alias: {\n    '@': path.resolve(__dirname, 'src')\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n此时可能会报错，找不到模块 “path” 或其相应的类型声明，这是因为 path 模块是 node.js 内置的功能，但是 node.js 本身并不支持 typescript，所以直接在 typescript 项目里使用是不行的\n\n所以需要安装 @types/node 来解决这个问题\n\nnpm install @types/node -D\n\n\n1\n\n\n安装完后，警告就消失了\n\n\n# (4)、react-router-dom 安装及配置\n\nnpm install react-router-dom\n\n\n1\n\n\n\n# (5)、配置路由管理文件\n\nimport { lazy, Suspense, type ReactNode } from 'react'\nimport { createBrowserRouter } from 'react-router-dom'\nconst Home=lazy( () => import( '@/Pages/Home' ) )\n\nfunction LoadingComponent ({children}: {children: ReactNode}) {\n\treturn (\n\t\t<Suspense fallback={\"加载中\"}>{children}</Suspense>\n\t)\n}\n\nconst routes=createBrowserRouter( [\n  {\n    path: '/',\n    element: <LoadingComponent><Home /></LoadingComponent>,\n    children: [\n      {\n        path: 'page1',\n        element: <LoadingComponent><div>page1</div></LoadingComponent>\n      }\n    ]\n  }\n] )\n\nexport default routes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n在项目入口文件 main.tsx 中引入路由配置文件，并使用它\n\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { RouterProvider } from \"react-router-dom\"\nimport router from './router/index'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <RouterProvider router={router}></RouterProvider>\n  </React.StrictMode>,\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n现在项目就可以正常运行了。\n\n在路由配置文件中引入组件时，可能会报警告，如找不到某某模块等，这时，可以在 tsconfig.json 文件中增加如下配置\n\n{\n\t\"compilerOptions\": {\n\t\t\"baseUrl\": \".\",\n\t\t\"paths\": {\n\t\t\t\"@/*\": [\"src/*\"]\n\t\t}\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这时，警告就消失了。如果依然报警告的话，那就找是否有 tsconfig.app.json 文件，有的话也加入如上配置，警告问题即可解决。\n\n\n# (6)、配置自动按需引入\n\nnpm install unplugin-auto-import -D\n\n\n1\n\n\n在 vite.config.ts 配置文件中引入并进行配置\n\nimport AutoImport from 'unplugin-auto-import/vite'\n\nplugins: [\n\tAutoImport( {\n\t\timports: [\n\t\t\t'react',\n\t\t\t{\n\t\t\t  'react-router-dom': [\n\t\t\t  \t'createBrowserRouter',\n\t\t\t    'BrowserRouter',\n\t\t\t    'Routes',\n\t\t\t    'Route',\n\t\t\t    'Link',\n\t\t\t    'NavLink',\n\t\t\t    'useNavigate',\n\t\t\t    'useParams',\n\t\t\t    'useSearchParams',\n\t\t\t    'useLocation',\n\t\t\t    'useHistory',\n\t\t\t    'Outlet',\n\t\t\t  ]\n\t\t\t}\n\t\t],\n\t\tdts: 'src/auto-imports.d.ts', // 自动生成的类型声明文件路径\n\t\teslintrc: {\n\t\t  enabled: false,  // 1、改为true用于生成eslint配置。2、生成后改回false，避免重复生成消耗\n\t\t}\n\t})\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n在 tsconfig.json 中的 compilerOptions 字段下增加以下配置\n\n\"types\": [\"./src/auto-imports\"]\n\n\n1\n\n\n现在，项目中跟 react 和 react-router-dom 有关的 API 就可以不用手动引入便可以使用了。可能会遇到少数 API 不会自动导入，这时候手动引入一下就可以了\n\n\n# (7)、配置 prettier 以实现代码格式化。\n\n由于 vite 创建的项目默认是带有 eslint 的，然而 eslint 是用于运行代码质量检查的，并不会对代码进行格式化，因此需要 prettier\n(1)、安装格式化工具，prettier 和相应的 eslint 插件\n\nnpm install prettier eslint-plugin-prettier eslint-config-prettier -D\n\n\n1\n\n\n(2)、在.eslintrc.js 或.eslintrc.cjs 或相应的 eslint 配置文件中，启用 prettier 插件\n\nmodule.exports = {\n  // ...\n  plugins: ['prettier'],\n  rules: {\n    // 确保你的规则配置中使用了 prettier 插件\n    'prettier/prettier': 'error',\n  },\n  // ...\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n(3)、在 package.json 中添加一条脚本命令用来格式化代码\n\n{\n\t\"scripts\": {\n\t\t\"format\": \"eslint --fix src\"\n\t}\n}\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"虽然使用官方脚手架创建项目使用的多点，但也想尝试下使用 vite 创建项目。这里特此记录下。\n\n\n# 1、创建 react + ts 项目\n\n// npm 6.x\nnpm create vite@latest vite-react-ts-demo --template react-ts\n\n// npm 7+\nnpm create vite@latest vite-react-ts-demo -- --template react-ts\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2、创建完成后，安装相关依赖\n\nnpm install\n\n\n1\n\n\n\n# 3、npm run dev 启动项目发现能正常运行。\n\n\n# 4、项目开发相关配置\n\n\n# (1)、安装 postcss-pxtorem、autoprefixer、vite-plugin-compression\n\n具体配置同使用 vite 搭建 vue3+ts 项目及基础配置中一样\n\nnpm install postcss-pxtorem autoprefixer vite-plugin-compression -d\n\n\n1\n\n\n\n# (2)、开启打包后 js、css、图片等文件夹分离。\n\n配置也与在 vue 中配置相同，执行完后可能会报错，[vite:terser] terser not found. since vite v3, terser has become an optional dependency. you need to install it. 意思是在 vite v3 中，需要手动安装 terser\n\nnpm install terser -d\n\n\n1\n\n\n现在执行 npm run build 进行打包能正常工作了。\n\n\n# (3)、配置 @路径别名\n\nimport path from 'path'\n\nresolve: {\n  alias: {\n    '@': path.resolve(__dirname, 'src')\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n此时可能会报错，找不到模块 “path” 或其相应的类型声明，这是因为 path 模块是 node.js 内置的功能，但是 node.js 本身并不支持 typescript，所以直接在 typescript 项目里使用是不行的\n\n所以需要安装 @types/node 来解决这个问题\n\nnpm install @types/node -d\n\n\n1\n\n\n安装完后，警告就消失了\n\n\n# (4)、react-router-dom 安装及配置\n\nnpm install react-router-dom\n\n\n1\n\n\n\n# (5)、配置路由管理文件\n\nimport { lazy, suspense, type reactnode } from 'react'\nimport { createbrowserrouter } from 'react-router-dom'\nconst home=lazy( () => import( '@/pages/home' ) )\n\nfunction loadingcomponent ({children}: {children: reactnode}) {\n\treturn (\n\t\t<suspense fallback={\"加载中\"}>{children}</suspense>\n\t)\n}\n\nconst routes=createbrowserrouter( [\n  {\n    path: '/',\n    element: <loadingcomponent><home /></loadingcomponent>,\n    children: [\n      {\n        path: 'page1',\n        element: <loadingcomponent><div>page1</div></loadingcomponent>\n      }\n    ]\n  }\n] )\n\nexport default routes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n在项目入口文件 main.tsx 中引入路由配置文件，并使用它\n\nimport react from 'react'\nimport reactdom from 'react-dom/client'\nimport { routerprovider } from \"react-router-dom\"\nimport router from './router/index'\n\nreactdom.createroot(document.getelementbyid('root')!).render(\n  <react.strictmode>\n    <routerprovider router={router}></routerprovider>\n  </react.strictmode>,\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n现在项目就可以正常运行了。\n\n在路由配置文件中引入组件时，可能会报警告，如找不到某某模块等，这时，可以在 tsconfig.json 文件中增加如下配置\n\n{\n\t\"compileroptions\": {\n\t\t\"baseurl\": \".\",\n\t\t\"paths\": {\n\t\t\t\"@/*\": [\"src/*\"]\n\t\t}\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这时，警告就消失了。如果依然报警告的话，那就找是否有 tsconfig.app.json 文件，有的话也加入如上配置，警告问题即可解决。\n\n\n# (6)、配置自动按需引入\n\nnpm install unplugin-auto-import -d\n\n\n1\n\n\n在 vite.config.ts 配置文件中引入并进行配置\n\nimport autoimport from 'unplugin-auto-import/vite'\n\nplugins: [\n\tautoimport( {\n\t\timports: [\n\t\t\t'react',\n\t\t\t{\n\t\t\t  'react-router-dom': [\n\t\t\t  \t'createbrowserrouter',\n\t\t\t    'browserrouter',\n\t\t\t    'routes',\n\t\t\t    'route',\n\t\t\t    'link',\n\t\t\t    'navlink',\n\t\t\t    'usenavigate',\n\t\t\t    'useparams',\n\t\t\t    'usesearchparams',\n\t\t\t    'uselocation',\n\t\t\t    'usehistory',\n\t\t\t    'outlet',\n\t\t\t  ]\n\t\t\t}\n\t\t],\n\t\tdts: 'src/auto-imports.d.ts', // 自动生成的类型声明文件路径\n\t\teslintrc: {\n\t\t  enabled: false,  // 1、改为true用于生成eslint配置。2、生成后改回false，避免重复生成消耗\n\t\t}\n\t})\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n在 tsconfig.json 中的 compileroptions 字段下增加以下配置\n\n\"types\": [\"./src/auto-imports\"]\n\n\n1\n\n\n现在，项目中跟 react 和 react-router-dom 有关的 api 就可以不用手动引入便可以使用了。可能会遇到少数 api 不会自动导入，这时候手动引入一下就可以了\n\n\n# (7)、配置 prettier 以实现代码格式化。\n\n由于 vite 创建的项目默认是带有 eslint 的，然而 eslint 是用于运行代码质量检查的，并不会对代码进行格式化，因此需要 prettier\n(1)、安装格式化工具，prettier 和相应的 eslint 插件\n\nnpm install prettier eslint-plugin-prettier eslint-config-prettier -d\n\n\n1\n\n\n(2)、在.eslintrc.js 或.eslintrc.cjs 或相应的 eslint 配置文件中，启用 prettier 插件\n\nmodule.exports = {\n  // ...\n  plugins: ['prettier'],\n  rules: {\n    // 确保你的规则配置中使用了 prettier 插件\n    'prettier/prettier': 'error',\n  },\n  // ...\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n(3)、在 package.json 中添加一条脚本命令用来格式化代码\n\n{\n\t\"scripts\": {\n\t\t\"format\": \"eslint --fix src\"\n\t}\n}\n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0}},{title:"React之react-redux的基本使用",frontmatter:{title:"React之react-redux的基本使用",date:"2024-03-21T15:04:22.000Z",permalink:"/pages/82cb44/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/12.React%E4%B9%8Breact-redux%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html",relativePath:"《React》笔记/01.React/12.React之react-redux的基本使用.md",key:"v-e48af10a",path:"/pages/82cb44/",headers:[{level:3,title:"react-redux的基本使用",slug:"react-redux的基本使用",normalizedTitle:"react-redux 的基本使用",charIndex:157},{level:3,title:"react-redux的完整使用：",slug:"react-redux的完整使用",normalizedTitle:"react-redux 的完整使用：",charIndex:3676},{level:4,title:"1、创建reducer",slug:"_1、创建reducer",normalizedTitle:"1、创建 reducer",charIndex:3698},{level:4,title:"2、创建store",slug:"_2、创建store",normalizedTitle:"2、创建 store",charIndex:4287},{level:4,title:"3、在/src/index.js中引入刚创建的store，并使用Provider包裹App组件",slug:"_3、在-src-index-js中引入刚创建的store-并使用provider包裹app组件",normalizedTitle:"3、在 /src/index.js 中引入刚创建的 store，并使用 provider 包裹 app 组件",charIndex:5522},{level:4,title:"4、在需要使用redux的组件中使用",slug:"_4、在需要使用redux的组件中使用",normalizedTitle:"4、在需要使用 redux 的组件中使用",charIndex:5959},{level:3,title:"异步逻辑与数据获取",slug:"异步逻辑与数据获取",normalizedTitle:"异步逻辑与数据获取",charIndex:8506},{level:3,title:"react-redux总结",slug:"react-redux总结",normalizedTitle:"react-redux 总结",charIndex:11579}],lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:"react-redux的基本使用 react-redux的完整使用： 1、创建reducer 2、创建store 3、在/src/index.js中引入刚创建的store，并使用Provider包裹App组件 4、在需要使用redux的组件中使用 异步逻辑与数据获取 react-redux总结",content:'redux 需要我们手动在 componentDidMount 生命周期中订阅事件来更新 state，那么有没有一款工具能自己监听 state 的变化并自动更新呢？答案当然是有的，那就是 React-Redux，它是 React 官方推出的 redux 绑定库，会自己监听 state 的变化并进行更新。\n\n\n# react-redux 的基本使用\n\n1、安装 react-redux\n\nnpm install react-redux\n\n\n1\n\n\n2、创建 reducer\n\n// src/store/countReducer.js文件\nconst initialState = {\n  count: 0\n}\nconst countReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \'ADD\':\n    \t// 注意，一定要返回一个新对象，否则redux察觉不到数据变化\n      return {\n        ...state,\n        count: state.count + action.data\n      }\n    case \'MINUS\':\n      return {\n        ...state,\n        count: state.count - action.data\n      }\n    default:\n      return state\n  }\n}\n\nexport default countReducer\n\n\n// 使用createSlice的用法，需要前需要先安装@reduxjs/toolkit => npm install @reduxjs/toolkit\n// import { createSlice } from "@reduxjs/toolkit";\n\n// const countSlice = createSlice({\n//   name: "count",\n//   initialState: {   // 初始值须为对象或数组，否则更改时会报错\n//     count: 0\n//   },\n//   reducers: {\n//     increment: (state, action) => {\n//       state.count += action.payload;  // 这里必须是payload字段，不能换\n//     },\n//     decrement: (state, action) => {\n//       state.count -= action.payload;\n//     },\n//     incrementByAmount: (state, action) => {\n//       state.count += action.payload;\n//     },\n//   }\n// })\n\n// export const { increment, decrement, incrementByAmount } = countSlice.actions;\n// export default countSlice.reducer\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\n3、创建 Redux Store\n\n// /src/store/index.js\n\nimport { createStore, combineReducers } from "redux"\nimport countReducer from "./count/countReducer";\n// import userReducer from "./userReducer";\n\n// const reducer = combineReducers({\n//   countReducer,\n//   userReducer\n// })\nexport default createStore(countReducer)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n4、为 React 提供 Redux Store\n\n在 src/index.js 中引入我们刚刚创建的 store , 通过 React-Redux 的 Provider 组件将 App 组件 包裹起来，并将 store 作为 prop 传入\n\nimport React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\nimport store from "./store";\nimport { Provider } from \'react-redux\'\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById(\'root\')\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n5、创建 Count 组件\n\nimport React from \'react\';\nimport { useSelector, useDispatch } from "react-redux";\n\n// 这是使用createSlice方法创建reducer，需要如下引入,如果是createStore方式，则无需引入\nimport { increment, decrement, incrementByAmount } from "../../store/countReducer";\n\n\nconst CountRedux = () => {\n    const count = useSelector(state => state.countReducer.count);  // 读取store中的数据\n    const dispatch = useDispatch(); // 用于dispatch actions\n    const handleAdd = (data) => {\n    \t// createSlice方法\n        dispatch(increment(data));  \n\n        // 使用createAction方法\n        // dispatch({\n        // \ttype: "ADD",\n        // \tdata\n        // });\n    }\n    const handleAddAmount = (data) => {\n        dispatch(incrementByAmount(data));\n    }\n    const handleReduce = (data) => {\n        dispatch(decrement(data));\n    }\n    return (\n        <div>\n           <p>当前结果:{count}</p>\n            <button onClick={() => handleAdd(5)}>加</button>\n            <button onClick={() => handleAddAmount(10)}>加10</button>\n            <button onClick={() => handleReduce(5)}>减</button>\n        </div>\n    );\n};\n\nexport default CountRedux;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n上面虽然完成了 react-redux 实现加法的案例，但是我们用的仍然是之前 redux 的思路去实现，并没有真正用到 react-redux 的精髓，在 react-redux 中，其实是有这样两个概念的，即 UI 组件和容器组件，通过 connect 方法将容器组件与 UI 组件连接起来，然后在 UI 组件中就可以通过 props 来访问状态和操作状态的方法了。\n\n\n# react-redux 的完整使用：\n\n# 1、创建 reducer\n\n// /src/redux/countReducer.js\n/*\n\tReducer不应该更改原有 state，应该始终返回新的对象，否则，React Redux 觉察不到数据变化。\n */\nconst initialState = {\n  count: 0\n}\nconst countReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \'ADD\':\n    \t// 注意，一定要返回一个新对象，否则redux察觉不到数据变化\n      return {\n        ...state,\n        count: state.count + 1\n      }\n    case \'MINUS\':\n      return {\n        ...state,\n        count: state.count - 1\n      }\n    default:\n      return state\n  }\n}\n\nexport default countReducer\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n# 2、创建 store\n\n// /src/redux/store.js\n\n/* --------  老版本用法 ---------   */\n\n// 有多个reducer\nimport { createStore, combineReducers } from "redux"\nimport countReducer from "./countReducer";\nimport userReducer from "./userReducer";\n\nconst reducer = combineReducers({\n  countReducer,\n  userReducer\n})\nexport default createStore(reducer)\n\n// 单个reducer\nimport { createStore } from "redux"\nimport countReducer from "./countReducer";\n\nexport default createStore(countReducer)\n\n\n\n\n/* --------- 新版本用法 --------- */\n/* \n\t当我们在项目中使用createStore来创建store时，编辑器会有一个删除线，\n\t表示这个api是已经废弃的api，并且推荐我们使用configureStore,\n\t因此，我们需要安装Redux Toolkit， npm install @reduxjs/toolkit\n\t它是Redux官方团队提供的一个工具包，提供了一些实用的工具和函数，以便轻松地编写和组织Redux代码。\n\t常用的工具函数：\n\t1、createSlice函数：用于创建Redux的slice（片段），\n\t\t包括定义初始状态、定义reducer函数以及生成action creators等功能。\n\t2、configureStore函数：用于创建Redux的store对象，并自动集成了一些中间件和插件，\n\t\t包括Redux DevTools插件和redux-thunk中间件。它简化了Redux store的配置和初始化过程。\n*/\nimport { configureStore } from \'@reduxjs/toolkit\';\nimport countReducer from \'./countReducer\';\n\nconst store = configureStore({\n    reducer: {\n        countReducer\n    }\n})\n\nexport default store\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n# 3、在 /src/index.js 中引入刚创建的 store，并使用 Provider 包裹 App 组件\n\nimport React, {StrictMode} from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\nimport store from "./redux/store";\nimport { Provider } from \'react-redux\'\n\n\nReactDOM.render(\n    <StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </StrictMode>,\n  document.getElementById(\'root\')\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n# 4、在需要使用 redux 的组件中使用\n\nimport { Component } from "react";\nimport { connect } from "react-redux";\n\nclass Count extends Component {\n \n    render() {\n        return (\n            <div>\n                <h3>当前结果：{this.props.count}</h3>\n                <button onClick={ () => this.props.add() }>加1</button>\n                <button onClick={ () => this.props.minus() }>减1</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return state.countReducer // 多个reduder\n    // return state   // 单个reducer\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        add: () => {\n            dispatch({type: "ADD"})\n        },\n        minus: () => {\n            dispatch({type: "MINUS"})\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Count);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n如果将创建 action 的部分抽出来单独为一个文件，如 countActions.js\n\nexport function incrementAction(data) {\n  return {\n    type: "ADD",\n    data\n  }\n}\n\nexport function decrementAction(data) {\n  return {\n    type: "MINUS",\n    data\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n那么上面使用 redux 的组件就可以这样写：\n\nimport React from \'react\';\nimport { connect } from "react-redux"\nimport { incrementAction, decrementAction } from "../../reactRedux/countActions"\n\n\nconst CountRedux = (props) => {\n    return (\n        <div>\n           <p>当前结果:{props.count}</p>\n            <button onClick={() => props.handleAdd(5)}>加5</button>\n            <button onClick={() => props.handleReduce(10)}>减10</button>\n        </div>\n    );\n};\n\n/*\n\t1、mapStateToProps函数返回的是一个对象\n\t2、返回的对象中的key作为传递给UI组件props的key，value作为传递给UI组件props的value\n\t3、mapStateToProps用于传递状态\n */\nconst mapStateToProps = (state) => {\n    return state.countReducer\n}\n\n/*\n\t1、matDispatchToProps函数返回的是一个对象\n\t2、返回的对象中的key作为传递给UI组件props的key，value作为传递给UI组件props的value\n\t3、mapDispatchToProps用于传递操作状态的方法\n */\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleAdd: (data) => {\n            dispatch(incrementAction(data));\n        },\n        handleReduce: (data) => {\n            dispatch(decrementAction(data));\n        }\n    }\n}\n\n// 简写形式，mapDispatchToProps的值可以是一个函数，也可以是一个返回action的对象\n// const mapDispatchToProps = {\n//     handleAdd: incrementAction,\n//     handleReduce: decrementAction\n// }\n\n// 使用connect()()创建并暴露一个容器组件\nexport default connect(mapStateToProps, mapDispatchToProps)(CountRedux);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\n\n# 异步逻辑与数据获取\n\n在使用 redux 的时候，有时候需要进行异步操作，比如从服务端获取数据后再将这些数据存到 store 中，这时候就可以 dispatch 一个 action，这个 action 是一个函数类型的，这种我们称之为异步 action，正常情况下，我们的 action 应该是一个 object 对象，我们称之为同步 action，而在 redux 中，本身不能处理异步 action，因此，这里需要使用到一个中间件，redux-thunk\n\n1、安装中间件\n\nnpm install redux-thunk\n\n\n1\n\n\n2、创建保存 type 值的文件和生成 action 的文件\n\n/* \n\t\t  /src/redux/count/constant.js代码\n*/\nexport const GETDATA = \'getData\';\n\n\n\n/* \n\t\t\t/src/redux/count/count_actions.js代码\n*/\nimport { GETDATA } from \'./constant\'\nimport studentsApi from "../../api/studentsApi";  // 获取学生数据的api\n\n\n// 异步获取学生数据action\nexport function studentAction (data) {\n  return {\n    type: GETDATA,\n    data\n  }\n}\n\n// 异步获取数据\nexport function getDataAction() {\n  return async (dispatch) => {\n    const response = await studentsApi.getStudents()\n    if (response.data) {\n      dispatch(studentAction(response.data.data))\n    }\n    // studentsApi.getStudents().then((res) => {\n    //     console.log("res", res)\n    //   // dispatch(studentAction(res.data.data))\n    // })\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n3、创建 countReducer.js 文件\n\nimport { GETDATA } from "./constant";\n\nconst initialState = {\n  students: []\n}\nconst countReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GETDATA:\n      return {\n        ...state,\n        students: action.data\n      }\n    default:\n      return state\n  }\n}\n\nexport default countReducer\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n4、在创建 store 的地方引入 redux-thunk 中间件，和执行中间件的函数 applyMiddleware\n\n// /src/redux/store.js\nimport { createStore, applyMiddleware } from "redux"\nimport countReducer from "./count/countReducer";\nimport {thunk} from "redux-thunk";\n\nexport default createStore(countReducer, applyMiddleware(thunk))\n\n\n1\n2\n3\n4\n5\n6\n\n\n5、创建 Students.jsx 组件，并使用 redux\n\nimport { Component } from "react";\nimport { connect } from "react-redux";\nimport { getDataAction } from "../../redux/count/count_actions";\n\nclass Students extends Component {\n    render() {\n        return (\n            <div>\n                <h3>学生信息</h3>\n                <ul>\n                    {\n                        this.props.students.map((item, index) => {\n                            return (\n                                <li key={index}>\n                                    姓名：{item.name}，\n                                    年龄：{item.age}，\n                                    性别：{item.sex}\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n                <button onClick={ () => this.props.getData() }>获取数据</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return state\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getData: () => {\n            dispatch(getDataAction())\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Students);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n\n# react-redux 总结\n\n * 1、两个概念：\n   \n   ①、UI 组件：不用任何 redux 的 api，只负责页面的呈现和交互\n   \n   ②、容器组件：负责和 redux 通信，将结果交给 UI 组件\n\n * 2、如何创建容器组件\n   \n   靠 react-redux 中的 connect 函数，connect (mapStateToProps, mapDispatchToProps)(UI 组件)\n   \n   mapStateToProps：映射状态，返回一个对象\n   \n   mapDispatchToProps：映射操作状态的方法，返回值是一个对象，mapDispatchToProps 也可以是一个对象\n\n * 3、容器组件中的 store 是 props 传递进去的，而不是在容器组件中直接引入的',normalizedContent:'redux 需要我们手动在 componentdidmount 生命周期中订阅事件来更新 state，那么有没有一款工具能自己监听 state 的变化并自动更新呢？答案当然是有的，那就是 react-redux，它是 react 官方推出的 redux 绑定库，会自己监听 state 的变化并进行更新。\n\n\n# react-redux 的基本使用\n\n1、安装 react-redux\n\nnpm install react-redux\n\n\n1\n\n\n2、创建 reducer\n\n// src/store/countreducer.js文件\nconst initialstate = {\n  count: 0\n}\nconst countreducer = (state = initialstate, action) => {\n  switch (action.type) {\n    case \'add\':\n    \t// 注意，一定要返回一个新对象，否则redux察觉不到数据变化\n      return {\n        ...state,\n        count: state.count + action.data\n      }\n    case \'minus\':\n      return {\n        ...state,\n        count: state.count - action.data\n      }\n    default:\n      return state\n  }\n}\n\nexport default countreducer\n\n\n// 使用createslice的用法，需要前需要先安装@reduxjs/toolkit => npm install @reduxjs/toolkit\n// import { createslice } from "@reduxjs/toolkit";\n\n// const countslice = createslice({\n//   name: "count",\n//   initialstate: {   // 初始值须为对象或数组，否则更改时会报错\n//     count: 0\n//   },\n//   reducers: {\n//     increment: (state, action) => {\n//       state.count += action.payload;  // 这里必须是payload字段，不能换\n//     },\n//     decrement: (state, action) => {\n//       state.count -= action.payload;\n//     },\n//     incrementbyamount: (state, action) => {\n//       state.count += action.payload;\n//     },\n//   }\n// })\n\n// export const { increment, decrement, incrementbyamount } = countslice.actions;\n// export default countslice.reducer\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\n3、创建 redux store\n\n// /src/store/index.js\n\nimport { createstore, combinereducers } from "redux"\nimport countreducer from "./count/countreducer";\n// import userreducer from "./userreducer";\n\n// const reducer = combinereducers({\n//   countreducer,\n//   userreducer\n// })\nexport default createstore(countreducer)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n4、为 react 提供 redux store\n\n在 src/index.js 中引入我们刚刚创建的 store , 通过 react-redux 的 provider 组件将 app 组件 包裹起来，并将 store 作为 prop 传入\n\nimport react from \'react\';\nimport reactdom from \'react-dom\';\nimport app from \'./app\';\nimport store from "./store";\nimport { provider } from \'react-redux\'\n\n\nreactdom.render(\n  <provider store={store}>\n    <app/>\n  </provider>,\n  document.getelementbyid(\'root\')\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n5、创建 count 组件\n\nimport react from \'react\';\nimport { useselector, usedispatch } from "react-redux";\n\n// 这是使用createslice方法创建reducer，需要如下引入,如果是createstore方式，则无需引入\nimport { increment, decrement, incrementbyamount } from "../../store/countreducer";\n\n\nconst countredux = () => {\n    const count = useselector(state => state.countreducer.count);  // 读取store中的数据\n    const dispatch = usedispatch(); // 用于dispatch actions\n    const handleadd = (data) => {\n    \t// createslice方法\n        dispatch(increment(data));  \n\n        // 使用createaction方法\n        // dispatch({\n        // \ttype: "add",\n        // \tdata\n        // });\n    }\n    const handleaddamount = (data) => {\n        dispatch(incrementbyamount(data));\n    }\n    const handlereduce = (data) => {\n        dispatch(decrement(data));\n    }\n    return (\n        <div>\n           <p>当前结果:{count}</p>\n            <button onclick={() => handleadd(5)}>加</button>\n            <button onclick={() => handleaddamount(10)}>加10</button>\n            <button onclick={() => handlereduce(5)}>减</button>\n        </div>\n    );\n};\n\nexport default countredux;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n上面虽然完成了 react-redux 实现加法的案例，但是我们用的仍然是之前 redux 的思路去实现，并没有真正用到 react-redux 的精髓，在 react-redux 中，其实是有这样两个概念的，即 ui 组件和容器组件，通过 connect 方法将容器组件与 ui 组件连接起来，然后在 ui 组件中就可以通过 props 来访问状态和操作状态的方法了。\n\n\n# react-redux 的完整使用：\n\n# 1、创建 reducer\n\n// /src/redux/countreducer.js\n/*\n\treducer不应该更改原有 state，应该始终返回新的对象，否则，react redux 觉察不到数据变化。\n */\nconst initialstate = {\n  count: 0\n}\nconst countreducer = (state = initialstate, action) => {\n  switch (action.type) {\n    case \'add\':\n    \t// 注意，一定要返回一个新对象，否则redux察觉不到数据变化\n      return {\n        ...state,\n        count: state.count + 1\n      }\n    case \'minus\':\n      return {\n        ...state,\n        count: state.count - 1\n      }\n    default:\n      return state\n  }\n}\n\nexport default countreducer\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n# 2、创建 store\n\n// /src/redux/store.js\n\n/* --------  老版本用法 ---------   */\n\n// 有多个reducer\nimport { createstore, combinereducers } from "redux"\nimport countreducer from "./countreducer";\nimport userreducer from "./userreducer";\n\nconst reducer = combinereducers({\n  countreducer,\n  userreducer\n})\nexport default createstore(reducer)\n\n// 单个reducer\nimport { createstore } from "redux"\nimport countreducer from "./countreducer";\n\nexport default createstore(countreducer)\n\n\n\n\n/* --------- 新版本用法 --------- */\n/* \n\t当我们在项目中使用createstore来创建store时，编辑器会有一个删除线，\n\t表示这个api是已经废弃的api，并且推荐我们使用configurestore,\n\t因此，我们需要安装redux toolkit， npm install @reduxjs/toolkit\n\t它是redux官方团队提供的一个工具包，提供了一些实用的工具和函数，以便轻松地编写和组织redux代码。\n\t常用的工具函数：\n\t1、createslice函数：用于创建redux的slice（片段），\n\t\t包括定义初始状态、定义reducer函数以及生成action creators等功能。\n\t2、configurestore函数：用于创建redux的store对象，并自动集成了一些中间件和插件，\n\t\t包括redux devtools插件和redux-thunk中间件。它简化了redux store的配置和初始化过程。\n*/\nimport { configurestore } from \'@reduxjs/toolkit\';\nimport countreducer from \'./countreducer\';\n\nconst store = configurestore({\n    reducer: {\n        countreducer\n    }\n})\n\nexport default store\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n# 3、在 /src/index.js 中引入刚创建的 store，并使用 provider 包裹 app 组件\n\nimport react, {strictmode} from \'react\';\nimport reactdom from \'react-dom\';\nimport app from \'./app\';\nimport store from "./redux/store";\nimport { provider } from \'react-redux\'\n\n\nreactdom.render(\n    <strictmode>\n        <provider store={store}>\n            <app />\n        </provider>\n    </strictmode>,\n  document.getelementbyid(\'root\')\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n# 4、在需要使用 redux 的组件中使用\n\nimport { component } from "react";\nimport { connect } from "react-redux";\n\nclass count extends component {\n \n    render() {\n        return (\n            <div>\n                <h3>当前结果：{this.props.count}</h3>\n                <button onclick={ () => this.props.add() }>加1</button>\n                <button onclick={ () => this.props.minus() }>减1</button>\n            </div>\n        );\n    }\n}\n\nconst mapstatetoprops = (state) => {\n    return state.countreducer // 多个reduder\n    // return state   // 单个reducer\n}\n\nconst mapdispatchtoprops = (dispatch) => {\n    return {\n        add: () => {\n            dispatch({type: "add"})\n        },\n        minus: () => {\n            dispatch({type: "minus"})\n        }\n    }\n}\n\nexport default connect(mapstatetoprops, mapdispatchtoprops)(count);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n如果将创建 action 的部分抽出来单独为一个文件，如 countactions.js\n\nexport function incrementaction(data) {\n  return {\n    type: "add",\n    data\n  }\n}\n\nexport function decrementaction(data) {\n  return {\n    type: "minus",\n    data\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n那么上面使用 redux 的组件就可以这样写：\n\nimport react from \'react\';\nimport { connect } from "react-redux"\nimport { incrementaction, decrementaction } from "../../reactredux/countactions"\n\n\nconst countredux = (props) => {\n    return (\n        <div>\n           <p>当前结果:{props.count}</p>\n            <button onclick={() => props.handleadd(5)}>加5</button>\n            <button onclick={() => props.handlereduce(10)}>减10</button>\n        </div>\n    );\n};\n\n/*\n\t1、mapstatetoprops函数返回的是一个对象\n\t2、返回的对象中的key作为传递给ui组件props的key，value作为传递给ui组件props的value\n\t3、mapstatetoprops用于传递状态\n */\nconst mapstatetoprops = (state) => {\n    return state.countreducer\n}\n\n/*\n\t1、matdispatchtoprops函数返回的是一个对象\n\t2、返回的对象中的key作为传递给ui组件props的key，value作为传递给ui组件props的value\n\t3、mapdispatchtoprops用于传递操作状态的方法\n */\nconst mapdispatchtoprops = (dispatch) => {\n    return {\n        handleadd: (data) => {\n            dispatch(incrementaction(data));\n        },\n        handlereduce: (data) => {\n            dispatch(decrementaction(data));\n        }\n    }\n}\n\n// 简写形式，mapdispatchtoprops的值可以是一个函数，也可以是一个返回action的对象\n// const mapdispatchtoprops = {\n//     handleadd: incrementaction,\n//     handlereduce: decrementaction\n// }\n\n// 使用connect()()创建并暴露一个容器组件\nexport default connect(mapstatetoprops, mapdispatchtoprops)(countredux);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\n\n# 异步逻辑与数据获取\n\n在使用 redux 的时候，有时候需要进行异步操作，比如从服务端获取数据后再将这些数据存到 store 中，这时候就可以 dispatch 一个 action，这个 action 是一个函数类型的，这种我们称之为异步 action，正常情况下，我们的 action 应该是一个 object 对象，我们称之为同步 action，而在 redux 中，本身不能处理异步 action，因此，这里需要使用到一个中间件，redux-thunk\n\n1、安装中间件\n\nnpm install redux-thunk\n\n\n1\n\n\n2、创建保存 type 值的文件和生成 action 的文件\n\n/* \n\t\t  /src/redux/count/constant.js代码\n*/\nexport const getdata = \'getdata\';\n\n\n\n/* \n\t\t\t/src/redux/count/count_actions.js代码\n*/\nimport { getdata } from \'./constant\'\nimport studentsapi from "../../api/studentsapi";  // 获取学生数据的api\n\n\n// 异步获取学生数据action\nexport function studentaction (data) {\n  return {\n    type: getdata,\n    data\n  }\n}\n\n// 异步获取数据\nexport function getdataaction() {\n  return async (dispatch) => {\n    const response = await studentsapi.getstudents()\n    if (response.data) {\n      dispatch(studentaction(response.data.data))\n    }\n    // studentsapi.getstudents().then((res) => {\n    //     console.log("res", res)\n    //   // dispatch(studentaction(res.data.data))\n    // })\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n3、创建 countreducer.js 文件\n\nimport { getdata } from "./constant";\n\nconst initialstate = {\n  students: []\n}\nconst countreducer = (state = initialstate, action) => {\n  switch (action.type) {\n    case getdata:\n      return {\n        ...state,\n        students: action.data\n      }\n    default:\n      return state\n  }\n}\n\nexport default countreducer\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n4、在创建 store 的地方引入 redux-thunk 中间件，和执行中间件的函数 applymiddleware\n\n// /src/redux/store.js\nimport { createstore, applymiddleware } from "redux"\nimport countreducer from "./count/countreducer";\nimport {thunk} from "redux-thunk";\n\nexport default createstore(countreducer, applymiddleware(thunk))\n\n\n1\n2\n3\n4\n5\n6\n\n\n5、创建 students.jsx 组件，并使用 redux\n\nimport { component } from "react";\nimport { connect } from "react-redux";\nimport { getdataaction } from "../../redux/count/count_actions";\n\nclass students extends component {\n    render() {\n        return (\n            <div>\n                <h3>学生信息</h3>\n                <ul>\n                    {\n                        this.props.students.map((item, index) => {\n                            return (\n                                <li key={index}>\n                                    姓名：{item.name}，\n                                    年龄：{item.age}，\n                                    性别：{item.sex}\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n                <button onclick={ () => this.props.getdata() }>获取数据</button>\n            </div>\n        );\n    }\n}\n\nconst mapstatetoprops = (state) => {\n    return state\n}\n\nconst mapdispatchtoprops = (dispatch) => {\n    return {\n        getdata: () => {\n            dispatch(getdataaction())\n        }\n    }\n}\n\nexport default connect(mapstatetoprops, mapdispatchtoprops)(students);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n\n# react-redux 总结\n\n * 1、两个概念：\n   \n   ①、ui 组件：不用任何 redux 的 api，只负责页面的呈现和交互\n   \n   ②、容器组件：负责和 redux 通信，将结果交给 ui 组件\n\n * 2、如何创建容器组件\n   \n   靠 react-redux 中的 connect 函数，connect (mapstatetoprops, mapdispatchtoprops)(ui 组件)\n   \n   mapstatetoprops：映射状态，返回一个对象\n   \n   mapdispatchtoprops：映射操作状态的方法，返回值是一个对象，mapdispatchtoprops 也可以是一个对象\n\n * 3、容器组件中的 store 是 props 传递进去的，而不是在容器组件中直接引入的',charsets:{cjk:!0}},{title:"React之ts类型标注汇总",frontmatter:{title:"React之ts类型标注汇总",date:"2024-06-26T10:43:20.000Z",permalink:"/pages/255759/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/22.React%E4%B9%8Bts%E7%B1%BB%E5%9E%8B%E6%A0%87%E6%B3%A8%E6%B1%87%E6%80%BB.html",relativePath:"《React》笔记/01.React/22.React之ts类型标注汇总.md",key:"v-ccf187c2",path:"/pages/255759/",headers:[{level:3,title:"1、为函数组件标注props类型，并设置默认值",slug:"_1、为函数组件标注props类型-并设置默认值",normalizedTitle:"1、为函数组件标注 props 类型，并设置默认值",charIndex:2},{level:3,title:"2、事件类型标注",slug:"_2、事件类型标注",normalizedTitle:"2、事件类型标注",charIndex:282}],lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:"1、为函数组件标注props类型，并设置默认值 2、事件类型标注",content:"# 1、为函数组件标注 props 类型，并设置默认值\n\nimport React from 'react'\n\ninterface AppPropsTypes {\n\tname?: string\n\tage?: number\n}\n\nconst App: React.FC<AppPropsTypes> = function ({\n\tname = '张三',\n\tage = 18\n}) {\n\treturn <div>App组件</div>\n}\n\nexport default App\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 2、事件类型标注\n\n常用的事件类型有\n\n\n * 鼠标事件：React.MouseEvent\n * 键盘事件：React.KeyboardEvent\n * 表单事件：React.FormEvent\n * 更改事件：React.ChangeEvent\n * 焦点事件：React.FocusEvent\n * 拖拽事件：React.DragEvent\n * UI 事件：React.UIEvent\n * 滚动事件：React.UIEvent\n\nimport React from 'react';\n\n\n/* \n鼠标事件，\n如果是button按钮点击，是React.MouseEvent<HTMLButtonElement>，\n如果是div点击，则是React.MouseEvent<HTMLDivElement>\n*/\nconst handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n  console.log(e.currentTarget); // `e.currentTarget` 是 HTMLButtonElement\n};\n\nconst MyComponent: React.FC = () => {\n  return <button onClick={handleClick}>Click me</button>;\n};\n\n// 键盘事件\nconst handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n  console.log(e.key); // 可以获取按下的键\n};\n\nconst MyComponent: React.FC = () => {\n  return <input onKeyDown={handleKeyDown} />;\n};\n\n\n// 表单事件\nconst handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n  e.preventDefault(); // 防止表单提交\n  console.log('Form submitted');\n};\n\nconst MyComponent: React.FC = () => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\n\n// 更改事件\nconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  console.log(e.target.value); // 获取输入框的值\n};\n\nconst MyComponent: React.FC = () => {\n  return <input onChange={handleChange} />;\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n\n\n3、为 ref 元素标注类型\n\nimport React, { useEffect, useRef } from 'react';\n \nconst MyComponent: React.FC = () => {\n  const myDivRef = useRef<HTMLDivElement>(null);\n \n  useEffect(() => {\n    if (myDivRef.current) {\n      const height = myDivRef.current.scrollHeight;\n      // 使用获取到的高度\n    }\n  }, []); // 确保useEffect只在组件挂载时执行一次\n \n  return (\n    <div ref={myDivRef}>\n      \x3c!-- 组件内容 --\x3e\n    </div>\n  );\n};\n \nexport default MyComponent;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n",normalizedContent:"# 1、为函数组件标注 props 类型，并设置默认值\n\nimport react from 'react'\n\ninterface apppropstypes {\n\tname?: string\n\tage?: number\n}\n\nconst app: react.fc<apppropstypes> = function ({\n\tname = '张三',\n\tage = 18\n}) {\n\treturn <div>app组件</div>\n}\n\nexport default app\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 2、事件类型标注\n\n常用的事件类型有\n\n\n * 鼠标事件：react.mouseevent\n * 键盘事件：react.keyboardevent\n * 表单事件：react.formevent\n * 更改事件：react.changeevent\n * 焦点事件：react.focusevent\n * 拖拽事件：react.dragevent\n * ui 事件：react.uievent\n * 滚动事件：react.uievent\n\nimport react from 'react';\n\n\n/* \n鼠标事件，\n如果是button按钮点击，是react.mouseevent<htmlbuttonelement>，\n如果是div点击，则是react.mouseevent<htmldivelement>\n*/\nconst handleclick = (e: react.mouseevent<htmlbuttonelement>) => {\n  console.log(e.currenttarget); // `e.currenttarget` 是 htmlbuttonelement\n};\n\nconst mycomponent: react.fc = () => {\n  return <button onclick={handleclick}>click me</button>;\n};\n\n// 键盘事件\nconst handlekeydown = (e: react.keyboardevent<htmlinputelement>) => {\n  console.log(e.key); // 可以获取按下的键\n};\n\nconst mycomponent: react.fc = () => {\n  return <input onkeydown={handlekeydown} />;\n};\n\n\n// 表单事件\nconst handlesubmit = (e: react.formevent<htmlformelement>) => {\n  e.preventdefault(); // 防止表单提交\n  console.log('form submitted');\n};\n\nconst mycomponent: react.fc = () => {\n  return (\n    <form onsubmit={handlesubmit}>\n      <button type=\"submit\">submit</button>\n    </form>\n  );\n};\n\n\n// 更改事件\nconst handlechange = (e: react.changeevent<htmlinputelement>) => {\n  console.log(e.target.value); // 获取输入框的值\n};\n\nconst mycomponent: react.fc = () => {\n  return <input onchange={handlechange} />;\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n\n\n3、为 ref 元素标注类型\n\nimport react, { useeffect, useref } from 'react';\n \nconst mycomponent: react.fc = () => {\n  const mydivref = useref<htmldivelement>(null);\n \n  useeffect(() => {\n    if (mydivref.current) {\n      const height = mydivref.current.scrollheight;\n      // 使用获取到的高度\n    }\n  }, []); // 确保useeffect只在组件挂载时执行一次\n \n  return (\n    <div ref={mydivref}>\n      \x3c!-- 组件内容 --\x3e\n    </div>\n  );\n};\n \nexport default mycomponent;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n",charsets:{cjk:!0}},{title:"React之使用 ant design搭建后台管理之踩坑",frontmatter:{title:"React之使用 ant design搭建后台管理之踩坑",date:"2024-07-11T14:33:20.000Z",permalink:"/pages/982518/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/23.React%E4%B9%8B%E4%BD%BF%E7%94%A8%20ant%20design%E6%90%AD%E5%BB%BA%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86.html",relativePath:"《React》笔记/01.React/23.React之使用 ant design搭建后台管理.md",key:"v-14a81e9c",path:"/pages/982518/",lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:null,content:'最近，想着使用 ant design 搭一个后台管理的模板，中间踩了许多坑，特此记录下。\n\n * 1、登录的时候，需要点击按钮发送验证码，然后有 60 秒的倒计时功能，结果定时器是在跑，但是数字却没有变。\n   原因：定时器在运行的同时，导致状态的变更，继而导致组件重新渲染，状态被重置了，如此循环反复，所以状态一直都是 60 没有变。\n   解决办法：使用 ref 来保存状态\n\nconst count = useRef(60)\nconst [btnTxt, setBtnTxt] = useState("发送验证码");\n\nconst timer = setInterval(() => {\n  count.current -= 1\n  if (count.current <= 0) {\n      setBtnTxt("重新发送")\n      setIsSend(false)\n      count.current = 60\n      clearInterval(timer)\n      return;\n  }\n\n  setBtnTxt(`${count.current}秒后重新发送`)\n}, 1000)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n2、使用 ant design 的 Menu 组件设置出使选中和展开项时，静态写死是可以的，但是动态设置就不生效，或者要么出使选中跟展开是对的，再次点击就点击不了甚至报错。\n原因：使用方法不对，初始展开应该用 openKeys 字段，选中应该用 selectedKeys 字段，并且必须搭配 onOpenChange 事件\n\n/* \n\t例如当前选中的导航数据是这样的\n\tfindItem = {\n\t\tchildren: []\n\t\tparentid: 6\n\t\tresid: 62\n\t\tresourceattr: ""\n\t\tresourceicon: null\n\t\tresourcename: "用户列表"\n\t\tresourceurl: "/userList"\n\t\tsort: 1\n\t}\n*/\nconst [defaultSelected, setSelectedKeys] = useState<any>([]);\nconst [defaultOpen, setOpenKeys] = useState<any>([]);\n\nuseEffect(() => {\n  // .....这里先判断当前激活的是哪一个菜单项，然后再设置\n  // 这里应该与菜单栏时的key数据类型对应，如果菜单栏的key是数值型，这里也应该是数值型\n  setSelectedKeys([findItem.resid + \'\'])\n  setOpenKeys([findItem.parentid + \'\'])\n}, [])\n\n\n<Menu\n    selectedKeys = {defaultSelected}\n    openKeys = {defaultOpen}\n    onOpenChange = {e => setOpenKeys(e)}\n    mode = "inline"\n    theme = \'dark\'\n    items = {menuData}\n/>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n3、在 Form 表单组件中使用 Switch，无法设置默认值\n\nconst [form] = Form.useForm()\n\n/*\n\t发送请求拿到数据，并赋值，此时请求返给的isdisable值为0或1，0选中，1未选中\n\t所以需要先将isdisable的值转换一下\n\tForm.Item 默认绑定值属性到 value 上，而 Switch 的值属性为 checked。需要通过 valuePropName 来修改绑定的值属性。\n */ \ndata.isdisable = data.isdisable === 0 ? true : false\nform.setFieldsValue(data)\n\n<Form\n    form={form}\n    labelCol={ { span: 4 } }\n    initialValues={ { isdisable: form.getFieldValue(\'isdisable\') } }\n>\n    <Form.Item\n        label="状态"\n        name="isdisable"\n        valuePropName="checked">\n        <Switch checkedChildren="启用" unCheckedChildren="禁用" />\n    </Form.Item>\n</Form>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n4、在 Tree 组件中，使用 expandedKeys 后，点击父节点无法收起\n解决办法，需要搭配 onExpand 事件一起使用\n\nconst [expandedKeys, setExpandedKeys] = useState<React.Key[]>([])\nconst [treeData, setTreeData] = useState<any[]>([])\n\n<Tree\n    blockNode={true}\n    draggable\n    expandedKeys={expandedKeys}\n    treeData={treeData}\n    onExpand={(expandedKeys: React.Key[]) => {\n        setExpandedKeys(expandedKeys)\n    }}\n></Tree>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n5、由于 Ant Design 默认文案是英文的，如果需要切换语言，需要自行配置，好在其提供了 ConfigProvider 组件可以全局配置\n\nimport zhCN from \'antd/locale/zh_CN\';\n// for date-picker i18n\nimport \'dayjs/locale/zh-cn\';\n\nreturn (\n  <ConfigProvider locale={zhCN}>\n    <App />\n  </ConfigProvider>\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n照着官方文档一顿操作，不出意外的话，意外就要出现了，报错了，我这里使用的是 vite 构建工具，当我引入中文包后，就一直报错，ERR_ABORTED 504 (Outdated Optimize Dep)，解决该错误，需要通过配置优化选项来解决，在 vite.config.ts 中增加如下配置\n\noptimizeDeps: {\n  include: [\'antd/locale/zh_CN\'],\n},\n\n\n1\n2\n3\n',normalizedContent:'最近，想着使用 ant design 搭一个后台管理的模板，中间踩了许多坑，特此记录下。\n\n * 1、登录的时候，需要点击按钮发送验证码，然后有 60 秒的倒计时功能，结果定时器是在跑，但是数字却没有变。\n   原因：定时器在运行的同时，导致状态的变更，继而导致组件重新渲染，状态被重置了，如此循环反复，所以状态一直都是 60 没有变。\n   解决办法：使用 ref 来保存状态\n\nconst count = useref(60)\nconst [btntxt, setbtntxt] = usestate("发送验证码");\n\nconst timer = setinterval(() => {\n  count.current -= 1\n  if (count.current <= 0) {\n      setbtntxt("重新发送")\n      setissend(false)\n      count.current = 60\n      clearinterval(timer)\n      return;\n  }\n\n  setbtntxt(`${count.current}秒后重新发送`)\n}, 1000)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n2、使用 ant design 的 menu 组件设置出使选中和展开项时，静态写死是可以的，但是动态设置就不生效，或者要么出使选中跟展开是对的，再次点击就点击不了甚至报错。\n原因：使用方法不对，初始展开应该用 openkeys 字段，选中应该用 selectedkeys 字段，并且必须搭配 onopenchange 事件\n\n/* \n\t例如当前选中的导航数据是这样的\n\tfinditem = {\n\t\tchildren: []\n\t\tparentid: 6\n\t\tresid: 62\n\t\tresourceattr: ""\n\t\tresourceicon: null\n\t\tresourcename: "用户列表"\n\t\tresourceurl: "/userlist"\n\t\tsort: 1\n\t}\n*/\nconst [defaultselected, setselectedkeys] = usestate<any>([]);\nconst [defaultopen, setopenkeys] = usestate<any>([]);\n\nuseeffect(() => {\n  // .....这里先判断当前激活的是哪一个菜单项，然后再设置\n  // 这里应该与菜单栏时的key数据类型对应，如果菜单栏的key是数值型，这里也应该是数值型\n  setselectedkeys([finditem.resid + \'\'])\n  setopenkeys([finditem.parentid + \'\'])\n}, [])\n\n\n<menu\n    selectedkeys = {defaultselected}\n    openkeys = {defaultopen}\n    onopenchange = {e => setopenkeys(e)}\n    mode = "inline"\n    theme = \'dark\'\n    items = {menudata}\n/>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n3、在 form 表单组件中使用 switch，无法设置默认值\n\nconst [form] = form.useform()\n\n/*\n\t发送请求拿到数据，并赋值，此时请求返给的isdisable值为0或1，0选中，1未选中\n\t所以需要先将isdisable的值转换一下\n\tform.item 默认绑定值属性到 value 上，而 switch 的值属性为 checked。需要通过 valuepropname 来修改绑定的值属性。\n */ \ndata.isdisable = data.isdisable === 0 ? true : false\nform.setfieldsvalue(data)\n\n<form\n    form={form}\n    labelcol={ { span: 4 } }\n    initialvalues={ { isdisable: form.getfieldvalue(\'isdisable\') } }\n>\n    <form.item\n        label="状态"\n        name="isdisable"\n        valuepropname="checked">\n        <switch checkedchildren="启用" uncheckedchildren="禁用" />\n    </form.item>\n</form>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n4、在 tree 组件中，使用 expandedkeys 后，点击父节点无法收起\n解决办法，需要搭配 onexpand 事件一起使用\n\nconst [expandedkeys, setexpandedkeys] = usestate<react.key[]>([])\nconst [treedata, settreedata] = usestate<any[]>([])\n\n<tree\n    blocknode={true}\n    draggable\n    expandedkeys={expandedkeys}\n    treedata={treedata}\n    onexpand={(expandedkeys: react.key[]) => {\n        setexpandedkeys(expandedkeys)\n    }}\n></tree>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n5、由于 ant design 默认文案是英文的，如果需要切换语言，需要自行配置，好在其提供了 configprovider 组件可以全局配置\n\nimport zhcn from \'antd/locale/zh_cn\';\n// for date-picker i18n\nimport \'dayjs/locale/zh-cn\';\n\nreturn (\n  <configprovider locale={zhcn}>\n    <app />\n  </configprovider>\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n照着官方文档一顿操作，不出意外的话，意外就要出现了，报错了，我这里使用的是 vite 构建工具，当我引入中文包后，就一直报错，err_aborted 504 (outdated optimize dep)，解决该错误，需要通过配置优化选项来解决，在 vite.config.ts 中增加如下配置\n\noptimizedeps: {\n  include: [\'antd/locale/zh_cn\'],\n},\n\n\n1\n2\n3\n',charsets:{cjk:!0}},{title:"React之使用vite创建组件库并发布到npm",frontmatter:{title:"React之使用vite创建组件库并发布到npm",date:"2024-08-14T09:39:51.000Z",permalink:"/pages/918a62/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/25.React%E4%B9%8B%E4%BD%BF%E7%94%A8vite%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6%E5%BA%93%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0npm.html",relativePath:"《React》笔记/01.React/25.React之使用vite创建组件库并发布到npm.md",key:"v-51e34ce2",path:"/pages/918a62/",headers:[{level:2,title:"项目创建及基础配置",slug:"项目创建及基础配置",normalizedTitle:"项目创建及基础配置",charIndex:121},{level:2,title:"package.json文件配置说明",slug:"package-json文件配置说明",normalizedTitle:"package.json 文件配置说明",charIndex:3262},{level:2,title:"发布到npm以及可能会遇到的问题",slug:"发布到npm以及可能会遇到的问题",normalizedTitle:"发布到 npm 以及可能会遇到的问题",charIndex:3635},{level:2,title:"补充",slug:"补充",normalizedTitle:"补充",charIndex:4720},{level:3,title:"1、静态资源配置",slug:"_1、静态资源配置",normalizedTitle:"1、静态资源配置",charIndex:4727},{level:3,title:"2、组件中使用module css配置",slug:"_2、组件中使用module-css配置",normalizedTitle:"2、组件中使用 module css 配置",charIndex:7622}],lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:"项目创建及基础配置 package.json文件配置说明 发布到npm以及可能会遇到的问题 补充 1、静态资源配置 2、组件中使用module css配置",content:'在工作过程中，经常是好几个项目都需要用到同一个或几个功能，为了偷懒，所以想着研究下能不能将这几个功能封装成组件库，然后放到 npm 上，每次需要使用时，就安装一下就可以使用了。\n说干就干，这里的搭建环境是 vite+react+ts\n\n\n# 项目创建及基础配置\n\n1、初始化项目，如创建 my-react-library 文件夹，并进入，然后执行 npm init 初始化项目\n\n2、安装 Vite、React、TypeScript 以及相关依赖\n\nnpm install react react-dom\nnpm install --save-dev typescript vite @vitejs/plugin-react vite-plugin-dts\n\n\n1\n2\n\n\n3、设置 TypeScript\n在项目根目录下创建一个 tsconfig.json 文件，配置如下：\n\n{\n  "compilerOptions": {\n    "target": "ESNext",\n    "module": "ESNext",\n    "jsx": "react-jsx",\n    "strict": true,\n    "esModuleInterop": true,\n    "skipLibCheck": true,\n    "forceConsistentCasingInFileNames": true,\n    "declaration": true,\n    "emitDeclarationOnly": true,\n    "outDir": "dist",\n    "moduleResolution": "node"\n  },\n  "include": ["packages"],\n  "exclude": ["node_modules", "dist"]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nps：\n1、include：表示你需要将项目中的 packages 目录下的内容进行打包\n2、outDir：表示打包后的文件夹的名称\n\n4、在项目根目录下创建 packages 文件夹，用来存放各种组件\n以 Button 组件为例，在 packages 文件夹下创建 Button 文件夹，在 Button 文件夹下创建 Button.tsx、index.ts、index.css 文件\n\n// /packages/Button/Button.tsx\nimport React from "react";\nimport "./index.css"\n\nexport interface ButtonProps {\n    text: string;\n    onClick: () => void;\n}\n\nconst MyButton: React.FC<ButtonProps> = ({ text, onClick } = {\n    text: \'Button\',\n    onClick: () => {\n        console.log(\'click\');\n    }\n}) => {\n    return (\n        <div>\n            <button className="my-button" onClick={onClick}>{ text }</button>\n        </div>\n    );\n};\n\nexport default MyButton;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n/packages/Button/index.css\n\n.my-button {\n  width: 100px;\n  height: 20px;\n  background-color: #000;\n  color: #fff;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n// /packages/Button/index.ts\nimport Button from \'./Button\';\nexport type { ButtonProps } from \'./Button\';\nexport default Button;\nimport \'./index.css\';\n\n\n1\n2\n3\n4\n5\n\n\n5、添加打包配置\n在项目根目录下创建 vite.config.ts 文件，配置如下：\n\nimport { defineConfig } from \'vite\'\nimport { resolve } from \'path\'\nimport react from \'@vitejs/plugin-react\'\nimport dts from \'vite-plugin-dts\';  // 用于输出 .d.ts类型文件\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    dts({\n      insertTypesEntry: true,\n    }),\n  ],\n  build: {\n    lib: {\n    \t// 组件库源码的入口文件\n      entry: resolve(__dirname, \'packages/index.ts\'),\n      name: \'my-react-component\',\n      // 文件名称\n      fileName: (format) => `my-lib.${format}.js`,\n    },\n    rollupOptions: {\n    \t// 处理那些你不想打包进库的依赖\n      external: [\'react\', \'react-dom\'],\n      output: {\n      \t// 在 UMD 构建模式下为这些外部化的依赖提供一个全局变量\n        globals: {\n          react: \'React\',\n          \'react-dom\': \'ReactDOM\',\n        },\n      },\n    },\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n6、创建组件库的入口文件\n在 packages 目录下创建 index.ts 文件，将所有组件及 ts 类型导出\n\nexport { default as Button } from \'./Button\';\nexport type { ButtonProps } from \'./Button\';\n\n\n1\n2\n\n\n7、更新 package.json 文件，添加如下配置\n\n"type": "module",\n"files": [\n  "dist"\n],\n"main": "./dist/my-lib.umd.js",\n"module": "./dist/my-lib.es.js",\n"types": "./dist/index.d.ts",\n"scripts": {\n  "dev": "vite",\n  "build": "tsc -b && vite build"\n},\n"peerDependencies": {\n  "react": ">=16.8",\n  "react-dom": ">=16.8"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# package.json 文件配置说明\n\n1、files：包含在发布包中的文件，这里指定了 dist 目录，确保打包输出的文件会被包含在发布包中。。\n2、main: 指定 CommonJS 入口文件（通常用于 Node.js 环境）\n3、module：指定 ES Module 入口文件（通常用于现代前端工具链，如 Webpack、Rollup 等）\n4、types：指定类型声明文件入口\n5、peerDependencies：提示宿主环境去安装满足插件 peerDependencies 所指定依赖的包，然后在插件 import 或者 require 所依赖的包的时候，永远都是引用宿主环境统一安装的 npm 包，最终解决插件与所依赖包不一致的问题\n\n按如上步骤执行完后，执行打包命令，npm run build，生成文件结构如下：\n\n\n\n# 发布到 npm 以及可能会遇到的问题\n\n然后执行 npm login 登录 npm，当然，前提是你得先有一个 npm 账户，如果没有就创建一下吧，登录完后，执行 npm publish 或 npm publish --access public。\n这里可能会遇到这几个问题：\n1、由于创建的项目是私有的，会报错，即 package.json 中有 "private": true 的设置，将其更改为 false 即可\n2、使用非官方镜像源执行提交命令，如 cnpm 或者淘宝镜像源等等，可能会报错误，将镜像源切换为官方的 (https://registry.npmjs.org/) 即可（推荐安装 nrm 解决）\n3、由于 npm 服务器在国外，所以可能会很慢，建议耐心等待，当然，也可通过代理解决（npm config set proxy 代理 ip:port 或 npm config set https-proxy 代理 ip：port）（移除代理：npm config delete proxy 或 npm config delete https-proxy）\n4、由于与 npm 上已存在的项目冲突，会发布失败，建议更改 package.json 中的 name 字段的值\n5、如果是已经发布过，需要重新发布，需要更改 package.json 中 version 字段，更改版本号，否则会发布失败\n\n发布到 npm 成功后，使用如下：\n1、安装发布的组件\n\n// 组件的名字是你package.json文件中的name\nnpm install react-lib-lei\n\n\n1\n2\n\n\n2、在项目中使用如下，一个具有 ts 类型支持的组件就可以成功使用了\n\nimport { Button } from "react-lib-lei";\nimport "react-lib-lei/dist/style.css"\n\nconst MyComponent = () => {\n\tconst handleClick = () => {\n\t\tconsole.log("hello world")\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Button text="hello" onClick={ handleClick } />\n\t\t</div>\n\t)\n}\n\nexport default MyComponent;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n至此，一个组件库的发布与使用就成功解决了\n\n\n# 补充\n\n\n# 1、静态资源配置\n\n例如图片存放在了 /src/assets/ 目录下，那么可以借助 vite-plugin-static-copy 插件来处理静态资源的复制和引入，同时配置路径别名，后续要用，在 vite.config.ts 中增加如下配置\n\nimport {viteStaticCopy } from \'vite-plugin-static-copy\';\nimport { resolve } from \'path\';\n\nexport default defineConfig({\n\tresolve: {\n\t  alias: {\n\t    \'@\': path.resolve(__dirname, \'src\'),\n\t  },\n\t},\n\tplugins: [\n\t\tviteStaticCopy({\n\t\t  targets: [\n\t\t    {\n\t\t      src: \'src/assets/*\',\n\t\t      dest: \'assets\'\n\t\t    }\n\t\t  ]\n\t\t})\n\t],\n\tbuild: {\n\t\tassetsDir: \'assets\',\n\t\tassetsInlineLimit: 0, // 禁用资源内联\n\t}\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n修改 package.json，files 值改为：\n\n"files": [\n  "dist",\n  "assets"\n]\n\n\n1\n2\n3\n4\n\n\ntsconfig.json 中增加如下配置：\n\n{\n\t"compilerOptions": {\n\t\t"baseUrl": ".",\n\t\t"paths": {\n\t\t  "@/*": ["src/*"]\n\t\t}\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n此时，在组件中使用 import xx from "@/assets/xxxx" 就行了，这样打包以后，组件中也能正常访问到图片资源，不会丢失\n\npackage.json 部分配置如下：\n\n{\n\t"name": "react-lib-lei",\n\t"version": "0.0.8",\n\t"type": "module",\n\t"files": [\n\t  "dist",\n\t  "assets"\n\t],\n\t"main": "./dist/my-lib.umd.js",\n\t"module": "./dist/my-lib.es.js",\n\t"types": "./dist/index.d.ts",\n  // .......\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nvite.config.ts 配置如下：\n\nimport { defineConfig } from \'vite\'\nimport path, { resolve } from \'path\'\nimport react from \'@vitejs/plugin-react\'\nimport dts from \'vite-plugin-dts\';\nimport { viteStaticCopy } from \'vite-plugin-static-copy\';\n\nexport default defineConfig({\n\tresolve: {\n\t  alias: {\n\t    \'@\': path.resolve(__dirname, \'src\'),\n\t  },\n\t},\n\tplugins: [\n\t\treact(),\n\t\tdts({\n\t\t  insertTypesEntry: true,\n\t\t}),\n\t\tviteStaticCopy({\n\t\t  targets: [\n\t\t    {\n\t\t      src: \'src/assets/*\',\n\t\t      dest: \'assets\'\n\t\t    }\n\t\t  ]\n\t\t})\n\t],\n\tbase: \'./\',  // 确保资源路径相对于当前目录\n\tbuild: {\n\t  assetsDir: \'assets\',\n\t  assetsInlineLimit: 0, // 禁用资源内联\n\t  lib: {\n\t    entry: resolve(__dirname, \'packages/index.ts\'),\n\t    name: \'my-react-component\',\n\t    fileName: (format) => `my-lib.${format}.js`,\n\t  },\n\t  rollupOptions: {\n\t    external: [\'react\', \'react-dom\'],\n\t    output: {\n\t      globals: {\n\t        react: \'React\',\n\t        \'react-dom\': \'ReactDOM\',\n\t      },\n\t      assetFileNames: \'assets/[name].[ext]\'\n\t    },\n\t  },\n\t}\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\ntsconfig.json 配置如下：\n\n{\n  "compilerOptions": {\n    "target": "ESNext",\n    "module": "ESNext",\n    "jsx": "react-jsx",\n    "baseUrl": ".",\n    "paths": {\n      "@/*": ["src/*"]\n    },\n    "strict": true,\n    "moduleResolution": "node",\n    "esModuleInterop": true,\n    "skipLibCheck": true,\n    "forceConsistentCasingInFileNames": true,\n    "allowImportingTsExtensions": true,\n    "declaration": true,\n    "outDir": "dist",\n    "emitDeclarationOnly": true,\n    "isolatedModules": true\n  },\n  "include": ["packages"],\n  "exclude": ["node_modules", "dist"]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 2、组件中使用 module css 配置\n\n由于使用了 ts，而 ts 默认并不识别 .module.css 文件。因此需要创建或修改一个类型声明文件来解决这个问题。\n在项目根目录下创建 global.d.ts 文件\n\ndeclare module \'*.module.css\' {\n    const classes: { [key: string]: string };\n    export default classes;\n}\n\n\n1\n2\n3\n4\n\n\n在 tsconfig.json 中配置修改如下：\n\n{\n\t"include": ["packages", "global.d.ts"]   // 增加global.d.ts配置\n}\n\n\n1\n2\n3\n\n\n现在就可以在组件中使用 module css 了',normalizedContent:'在工作过程中，经常是好几个项目都需要用到同一个或几个功能，为了偷懒，所以想着研究下能不能将这几个功能封装成组件库，然后放到 npm 上，每次需要使用时，就安装一下就可以使用了。\n说干就干，这里的搭建环境是 vite+react+ts\n\n\n# 项目创建及基础配置\n\n1、初始化项目，如创建 my-react-library 文件夹，并进入，然后执行 npm init 初始化项目\n\n2、安装 vite、react、typescript 以及相关依赖\n\nnpm install react react-dom\nnpm install --save-dev typescript vite @vitejs/plugin-react vite-plugin-dts\n\n\n1\n2\n\n\n3、设置 typescript\n在项目根目录下创建一个 tsconfig.json 文件，配置如下：\n\n{\n  "compileroptions": {\n    "target": "esnext",\n    "module": "esnext",\n    "jsx": "react-jsx",\n    "strict": true,\n    "esmoduleinterop": true,\n    "skiplibcheck": true,\n    "forceconsistentcasinginfilenames": true,\n    "declaration": true,\n    "emitdeclarationonly": true,\n    "outdir": "dist",\n    "moduleresolution": "node"\n  },\n  "include": ["packages"],\n  "exclude": ["node_modules", "dist"]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nps：\n1、include：表示你需要将项目中的 packages 目录下的内容进行打包\n2、outdir：表示打包后的文件夹的名称\n\n4、在项目根目录下创建 packages 文件夹，用来存放各种组件\n以 button 组件为例，在 packages 文件夹下创建 button 文件夹，在 button 文件夹下创建 button.tsx、index.ts、index.css 文件\n\n// /packages/button/button.tsx\nimport react from "react";\nimport "./index.css"\n\nexport interface buttonprops {\n    text: string;\n    onclick: () => void;\n}\n\nconst mybutton: react.fc<buttonprops> = ({ text, onclick } = {\n    text: \'button\',\n    onclick: () => {\n        console.log(\'click\');\n    }\n}) => {\n    return (\n        <div>\n            <button classname="my-button" onclick={onclick}>{ text }</button>\n        </div>\n    );\n};\n\nexport default mybutton;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n/packages/button/index.css\n\n.my-button {\n  width: 100px;\n  height: 20px;\n  background-color: #000;\n  color: #fff;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n// /packages/button/index.ts\nimport button from \'./button\';\nexport type { buttonprops } from \'./button\';\nexport default button;\nimport \'./index.css\';\n\n\n1\n2\n3\n4\n5\n\n\n5、添加打包配置\n在项目根目录下创建 vite.config.ts 文件，配置如下：\n\nimport { defineconfig } from \'vite\'\nimport { resolve } from \'path\'\nimport react from \'@vitejs/plugin-react\'\nimport dts from \'vite-plugin-dts\';  // 用于输出 .d.ts类型文件\n\nexport default defineconfig({\n  plugins: [\n    react(),\n    dts({\n      inserttypesentry: true,\n    }),\n  ],\n  build: {\n    lib: {\n    \t// 组件库源码的入口文件\n      entry: resolve(__dirname, \'packages/index.ts\'),\n      name: \'my-react-component\',\n      // 文件名称\n      filename: (format) => `my-lib.${format}.js`,\n    },\n    rollupoptions: {\n    \t// 处理那些你不想打包进库的依赖\n      external: [\'react\', \'react-dom\'],\n      output: {\n      \t// 在 umd 构建模式下为这些外部化的依赖提供一个全局变量\n        globals: {\n          react: \'react\',\n          \'react-dom\': \'reactdom\',\n        },\n      },\n    },\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n6、创建组件库的入口文件\n在 packages 目录下创建 index.ts 文件，将所有组件及 ts 类型导出\n\nexport { default as button } from \'./button\';\nexport type { buttonprops } from \'./button\';\n\n\n1\n2\n\n\n7、更新 package.json 文件，添加如下配置\n\n"type": "module",\n"files": [\n  "dist"\n],\n"main": "./dist/my-lib.umd.js",\n"module": "./dist/my-lib.es.js",\n"types": "./dist/index.d.ts",\n"scripts": {\n  "dev": "vite",\n  "build": "tsc -b && vite build"\n},\n"peerdependencies": {\n  "react": ">=16.8",\n  "react-dom": ">=16.8"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# package.json 文件配置说明\n\n1、files：包含在发布包中的文件，这里指定了 dist 目录，确保打包输出的文件会被包含在发布包中。。\n2、main: 指定 commonjs 入口文件（通常用于 node.js 环境）\n3、module：指定 es module 入口文件（通常用于现代前端工具链，如 webpack、rollup 等）\n4、types：指定类型声明文件入口\n5、peerdependencies：提示宿主环境去安装满足插件 peerdependencies 所指定依赖的包，然后在插件 import 或者 require 所依赖的包的时候，永远都是引用宿主环境统一安装的 npm 包，最终解决插件与所依赖包不一致的问题\n\n按如上步骤执行完后，执行打包命令，npm run build，生成文件结构如下：\n\n\n\n# 发布到 npm 以及可能会遇到的问题\n\n然后执行 npm login 登录 npm，当然，前提是你得先有一个 npm 账户，如果没有就创建一下吧，登录完后，执行 npm publish 或 npm publish --access public。\n这里可能会遇到这几个问题：\n1、由于创建的项目是私有的，会报错，即 package.json 中有 "private": true 的设置，将其更改为 false 即可\n2、使用非官方镜像源执行提交命令，如 cnpm 或者淘宝镜像源等等，可能会报错误，将镜像源切换为官方的 (https://registry.npmjs.org/) 即可（推荐安装 nrm 解决）\n3、由于 npm 服务器在国外，所以可能会很慢，建议耐心等待，当然，也可通过代理解决（npm config set proxy 代理 ip:port 或 npm config set https-proxy 代理 ip：port）（移除代理：npm config delete proxy 或 npm config delete https-proxy）\n4、由于与 npm 上已存在的项目冲突，会发布失败，建议更改 package.json 中的 name 字段的值\n5、如果是已经发布过，需要重新发布，需要更改 package.json 中 version 字段，更改版本号，否则会发布失败\n\n发布到 npm 成功后，使用如下：\n1、安装发布的组件\n\n// 组件的名字是你package.json文件中的name\nnpm install react-lib-lei\n\n\n1\n2\n\n\n2、在项目中使用如下，一个具有 ts 类型支持的组件就可以成功使用了\n\nimport { button } from "react-lib-lei";\nimport "react-lib-lei/dist/style.css"\n\nconst mycomponent = () => {\n\tconst handleclick = () => {\n\t\tconsole.log("hello world")\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<button text="hello" onclick={ handleclick } />\n\t\t</div>\n\t)\n}\n\nexport default mycomponent;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n至此，一个组件库的发布与使用就成功解决了\n\n\n# 补充\n\n\n# 1、静态资源配置\n\n例如图片存放在了 /src/assets/ 目录下，那么可以借助 vite-plugin-static-copy 插件来处理静态资源的复制和引入，同时配置路径别名，后续要用，在 vite.config.ts 中增加如下配置\n\nimport {vitestaticcopy } from \'vite-plugin-static-copy\';\nimport { resolve } from \'path\';\n\nexport default defineconfig({\n\tresolve: {\n\t  alias: {\n\t    \'@\': path.resolve(__dirname, \'src\'),\n\t  },\n\t},\n\tplugins: [\n\t\tvitestaticcopy({\n\t\t  targets: [\n\t\t    {\n\t\t      src: \'src/assets/*\',\n\t\t      dest: \'assets\'\n\t\t    }\n\t\t  ]\n\t\t})\n\t],\n\tbuild: {\n\t\tassetsdir: \'assets\',\n\t\tassetsinlinelimit: 0, // 禁用资源内联\n\t}\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n修改 package.json，files 值改为：\n\n"files": [\n  "dist",\n  "assets"\n]\n\n\n1\n2\n3\n4\n\n\ntsconfig.json 中增加如下配置：\n\n{\n\t"compileroptions": {\n\t\t"baseurl": ".",\n\t\t"paths": {\n\t\t  "@/*": ["src/*"]\n\t\t}\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n此时，在组件中使用 import xx from "@/assets/xxxx" 就行了，这样打包以后，组件中也能正常访问到图片资源，不会丢失\n\npackage.json 部分配置如下：\n\n{\n\t"name": "react-lib-lei",\n\t"version": "0.0.8",\n\t"type": "module",\n\t"files": [\n\t  "dist",\n\t  "assets"\n\t],\n\t"main": "./dist/my-lib.umd.js",\n\t"module": "./dist/my-lib.es.js",\n\t"types": "./dist/index.d.ts",\n  // .......\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nvite.config.ts 配置如下：\n\nimport { defineconfig } from \'vite\'\nimport path, { resolve } from \'path\'\nimport react from \'@vitejs/plugin-react\'\nimport dts from \'vite-plugin-dts\';\nimport { vitestaticcopy } from \'vite-plugin-static-copy\';\n\nexport default defineconfig({\n\tresolve: {\n\t  alias: {\n\t    \'@\': path.resolve(__dirname, \'src\'),\n\t  },\n\t},\n\tplugins: [\n\t\treact(),\n\t\tdts({\n\t\t  inserttypesentry: true,\n\t\t}),\n\t\tvitestaticcopy({\n\t\t  targets: [\n\t\t    {\n\t\t      src: \'src/assets/*\',\n\t\t      dest: \'assets\'\n\t\t    }\n\t\t  ]\n\t\t})\n\t],\n\tbase: \'./\',  // 确保资源路径相对于当前目录\n\tbuild: {\n\t  assetsdir: \'assets\',\n\t  assetsinlinelimit: 0, // 禁用资源内联\n\t  lib: {\n\t    entry: resolve(__dirname, \'packages/index.ts\'),\n\t    name: \'my-react-component\',\n\t    filename: (format) => `my-lib.${format}.js`,\n\t  },\n\t  rollupoptions: {\n\t    external: [\'react\', \'react-dom\'],\n\t    output: {\n\t      globals: {\n\t        react: \'react\',\n\t        \'react-dom\': \'reactdom\',\n\t      },\n\t      assetfilenames: \'assets/[name].[ext]\'\n\t    },\n\t  },\n\t}\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\ntsconfig.json 配置如下：\n\n{\n  "compileroptions": {\n    "target": "esnext",\n    "module": "esnext",\n    "jsx": "react-jsx",\n    "baseurl": ".",\n    "paths": {\n      "@/*": ["src/*"]\n    },\n    "strict": true,\n    "moduleresolution": "node",\n    "esmoduleinterop": true,\n    "skiplibcheck": true,\n    "forceconsistentcasinginfilenames": true,\n    "allowimportingtsextensions": true,\n    "declaration": true,\n    "outdir": "dist",\n    "emitdeclarationonly": true,\n    "isolatedmodules": true\n  },\n  "include": ["packages"],\n  "exclude": ["node_modules", "dist"]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 2、组件中使用 module css 配置\n\n由于使用了 ts，而 ts 默认并不识别 .module.css 文件。因此需要创建或修改一个类型声明文件来解决这个问题。\n在项目根目录下创建 global.d.ts 文件\n\ndeclare module \'*.module.css\' {\n    const classes: { [key: string]: string };\n    export default classes;\n}\n\n\n1\n2\n3\n4\n\n\n在 tsconfig.json 中配置修改如下：\n\n{\n\t"include": ["packages", "global.d.ts"]   // 增加global.d.ts配置\n}\n\n\n1\n2\n3\n\n\n现在就可以在组件中使用 module css 了',charsets:{cjk:!0}},{title:"React之项目国际化",frontmatter:{title:"React之项目国际化",date:"2024-04-03T11:16:39.000Z",permalink:"/pages/dd9ea5/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/19.React%E4%B9%8B%E9%A1%B9%E7%9B%AE%E5%9B%BD%E9%99%85%E5%8C%96.html",relativePath:"《React》笔记/01.React/19.React之项目国际化.md",key:"v-34b807f3",path:"/pages/dd9ea5/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"在做项目的时候，有时候要做多语言的，引入国际化，如果自己手动实现的话会是非常棘手的一件事儿，这里可以借助第三方库来实现，这里用到了两个库，i18next（提供了翻译的基本能力）和 react-i18next（是 i18next 的一个插件，用来降低 react 的使用成本）\n\n1、安装第三方库\n\n// 如果安装失败，可能是因为版本的原因，可以强制安装（--force）或者安装低版本的\nnpm install i18next react-i18next\n\n\n1\n2\n\n\n2、创建需要翻译的语言文件，如中文 zh.js 和英文 en.js 文件\n\n// /src/locales/language/zh.js\nconst zh = {\n  home: {\n    title: \"首页\",\n  }\n};\nexport default zh;\n\n\n// /src/locales/language/en.js\nconst en = {\n  home: {\n    title: \"Home\",\n  }\n}\nexport default en;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n3、创建初始化语言文件，并在项目入口文件 index.js 中直接引入即可\n\n// /src/locales/index.js\nimport { initReactI18next } from \"react-i18next\";\nimport i18n from \"i18next\";\nimport zh from './language/zh';\nimport en from './language/en';\n\ni18n.use( initReactI18next ).init( {\n  resources: {\n    en: {\n      translation: {\n        ...en\n      }\n    },\n    zh: {\n      translation: {\n        ...zh\n      }\n    }\n  },\n  // interpolation: {  \n  //   escapeValue: false // 不要做转义\n  // },\n  lng: \"en\", // 默认语言\n  fallbackLng: \"en\", // 如果当前语言没有对应的翻译，将使用该语言作为备用\n})\n\n// /src/index.js\nimport \"./locales/index\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n4、创建组件，在组件中使用。\n\nimport React from 'react'\nimport { useTranslation } from 'react-i18next'\n\nexport default function Translation () {\n  const { i18n, t } = useTranslation()\n  const changeLanguage = (language) => {\n    i18n.changeLanguage(language)  // 切换语言\n  }\n  return (\n    <>\n      <p>当前语言：{ i18n.language }</p>\n      <p>当前内容：{ t( 'home.title' ) }</p>\n      <button onClick={() => changeLanguage('zh')}>切换为中文</button>\n      <button onClick={() => changeLanguage('en')}>切换为英文</button>\n    </>\n  )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",normalizedContent:"在做项目的时候，有时候要做多语言的，引入国际化，如果自己手动实现的话会是非常棘手的一件事儿，这里可以借助第三方库来实现，这里用到了两个库，i18next（提供了翻译的基本能力）和 react-i18next（是 i18next 的一个插件，用来降低 react 的使用成本）\n\n1、安装第三方库\n\n// 如果安装失败，可能是因为版本的原因，可以强制安装（--force）或者安装低版本的\nnpm install i18next react-i18next\n\n\n1\n2\n\n\n2、创建需要翻译的语言文件，如中文 zh.js 和英文 en.js 文件\n\n// /src/locales/language/zh.js\nconst zh = {\n  home: {\n    title: \"首页\",\n  }\n};\nexport default zh;\n\n\n// /src/locales/language/en.js\nconst en = {\n  home: {\n    title: \"home\",\n  }\n}\nexport default en;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n3、创建初始化语言文件，并在项目入口文件 index.js 中直接引入即可\n\n// /src/locales/index.js\nimport { initreacti18next } from \"react-i18next\";\nimport i18n from \"i18next\";\nimport zh from './language/zh';\nimport en from './language/en';\n\ni18n.use( initreacti18next ).init( {\n  resources: {\n    en: {\n      translation: {\n        ...en\n      }\n    },\n    zh: {\n      translation: {\n        ...zh\n      }\n    }\n  },\n  // interpolation: {  \n  //   escapevalue: false // 不要做转义\n  // },\n  lng: \"en\", // 默认语言\n  fallbacklng: \"en\", // 如果当前语言没有对应的翻译，将使用该语言作为备用\n})\n\n// /src/index.js\nimport \"./locales/index\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n4、创建组件，在组件中使用。\n\nimport react from 'react'\nimport { usetranslation } from 'react-i18next'\n\nexport default function translation () {\n  const { i18n, t } = usetranslation()\n  const changelanguage = (language) => {\n    i18n.changelanguage(language)  // 切换语言\n  }\n  return (\n    <>\n      <p>当前语言：{ i18n.language }</p>\n      <p>当前内容：{ t( 'home.title' ) }</p>\n      <button onclick={() => changelanguage('zh')}>切换为中文</button>\n      <button onclick={() => changelanguage('en')}>切换为英文</button>\n    </>\n  )\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",charsets:{cjk:!0}},{title:"React之项目打包部署到nginx",frontmatter:{title:"React之项目打包部署到nginx",date:"2024-08-16T09:46:35.000Z",permalink:"/pages/127ba0/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/26.React%E4%B9%8B%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E5%88%B0nginx.html",relativePath:"《React》笔记/01.React/26.React之项目打包部署到nginx.md",key:"v-4f9e9097",path:"/pages/127ba0/",lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:null,content:'之前总想着自己尝试一下开发完项目，打包后自己部署一下，奈何不是没时间就是进行到一半就放弃了，最近刚好有空就尝试下，差点又放弃了，虽然历尽波折，总算最后还是解决了。\n\n这里以 vite+react+ts 项目为准，react 是使用 history 模式开发的，项目打包时开启了 gzip 压缩并删除了源文件\n\n这里以 Mac 环境为例，未安装 nginx 的需要先安装 nginx，可以使用 brew 安装\n\nbrew install nginx\n\n\n1\n\n\n安装好后，就可以开始部署了\n更改 nginx.conf 配置文件，也可重新创建配置文件（在 nginx/servers 中，创建 xxx.conf 配置文件），然后在 nginx.conf 配置文件的 http 下使用 include 引入一下即可\n\nserver {\n\tlisten       8080;\n    server_name  localhost;  #替换为你的域名或 IP 地址\n    location / {\n        root  /path/to/your/react/build;  #打包后存放项目的路径\n        index  index.html index.htm;\n        try_files $uri /index.html;   #使用history模式的，必须配置，否则刷新页面会报404\n    }\n\n    gzip  on;   #开启gzip功能\n    gzip_vary on;  # 是否在http header中添加Vary: Accept-Encoding，**一定要开启,不开启读取不到.gz结尾的压缩文件**\n    gzip_static on;  #开启gzip静态压缩功能\n\n    # 其他静态资源，必须配置，否则会读取静态资源失败，MIME类型错误等信息\n    location ~* \\.(js|css|html|png|jpg|jpeg|gif|ico|svg)(\\.gz)?$ {\n        root /path/to/your/react/build;\n        expires 30d;\n        add_header Cache-Control "public, must-revalidate";\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n至此，配置完毕，项目可以正常运行了，刷新也是正常的。',normalizedContent:'之前总想着自己尝试一下开发完项目，打包后自己部署一下，奈何不是没时间就是进行到一半就放弃了，最近刚好有空就尝试下，差点又放弃了，虽然历尽波折，总算最后还是解决了。\n\n这里以 vite+react+ts 项目为准，react 是使用 history 模式开发的，项目打包时开启了 gzip 压缩并删除了源文件\n\n这里以 mac 环境为例，未安装 nginx 的需要先安装 nginx，可以使用 brew 安装\n\nbrew install nginx\n\n\n1\n\n\n安装好后，就可以开始部署了\n更改 nginx.conf 配置文件，也可重新创建配置文件（在 nginx/servers 中，创建 xxx.conf 配置文件），然后在 nginx.conf 配置文件的 http 下使用 include 引入一下即可\n\nserver {\n\tlisten       8080;\n    server_name  localhost;  #替换为你的域名或 ip 地址\n    location / {\n        root  /path/to/your/react/build;  #打包后存放项目的路径\n        index  index.html index.htm;\n        try_files $uri /index.html;   #使用history模式的，必须配置，否则刷新页面会报404\n    }\n\n    gzip  on;   #开启gzip功能\n    gzip_vary on;  # 是否在http header中添加vary: accept-encoding，**一定要开启,不开启读取不到.gz结尾的压缩文件**\n    gzip_static on;  #开启gzip静态压缩功能\n\n    # 其他静态资源，必须配置，否则会读取静态资源失败，mime类型错误等信息\n    location ~* \\.(js|css|html|png|jpg|jpeg|gif|ico|svg)(\\.gz)?$ {\n        root /path/to/your/react/build;\n        expires 30d;\n        add_header cache-control "public, must-revalidate";\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n至此，配置完毕，项目可以正常运行了，刷新也是正常的。',charsets:{cjk:!0}},{title:"React之路由切换动画",frontmatter:{title:"React之路由切换动画",date:"2024-07-17T16:02:46.000Z",permalink:"/pages/7e1b82/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/24.React%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%88%87%E6%8D%A2%E5%8A%A8%E7%94%BB.html",relativePath:"《React》笔记/01.React/24.React之路由切换动画.md",key:"v-fbcea828",path:"/pages/7e1b82/",lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:null,content:"最近在用 React + Ant Design 搭建一个后台管理的模板，想着之前用 vue 的时候，在路由切换时都增加了一个动效，用 React 能不能也增加一个类似的动效呢？\n说干就干，然而，令人犯难的是，vue 是自带 Transition 组件，所以加动效很方便，React 就需要自己手动实现了。\n第一念头，当然是看看有没有成熟的插件来帮助实现，搜了下，网上都是说使用 react-transition-group 这个插件来实现，我也照着实现了一下，发现有 bug，切换的动效时灵时不灵的，有时候会报错，刷新一下又莫名的好了，而且控制台也报错。\n挣扎了一下，于是放弃了使用这个插件，于是，想着能不能不用插件来实现呢，在折腾一番之后，终于实现效果了，特此记录下。\n\n1、创建一个组件来实现动画\n\nimport './PageTransition.css'\n\nconst PageTransition = ({ children }: { children: React.ReactNode }) => {\n  const [displayChildren, setDisplayChildren] = useState(children);\n  const [transitionStage, setTransitionStage] = useState('slideIn');\n  const location = useLocation();\n\n  useEffect(() => {\n    setTransitionStage('slideOut');\n  }, [location]);\n\n  useEffect(() => {\n    if (transitionStage === 'slideOut') {\n      setTimeout(() => {\n        setDisplayChildren(children);\n        setTransitionStage('slideIn');\n      }, 300); // 动画持续时间\n    }\n  }, [transitionStage, children]);\n\n  return (\n    <div className={`page ${transitionStage}`}>\n      {displayChildren}\n    </div>\n  );\n};\n\nexport default PageTransition;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\nPageTransition.css 样式代码\n\n.page {\n  transition: all 0.3s ease-in-out;\n}\n\n.slideIn {\n  opacity: 1;\n  transform: translateX(0);\n}\n\n.slideOut {\n  opacity: 0;\n  transform: translateX(-200px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n2、在需要使用动效的地方用这个组件将其包裹起来。对于后台管理而言，当然是使用该组件将 Outlet 元素包裹起来\n\nimport PageTransition from '@/components/PageTransition'\n\n<PageTransition><Outlet/></PageTransition>\n\n\n1\n2\n3\n\n\n至此，一个粗糙的路由切换动效就已经形成了，可以根据自己需要修改 css 里的样式以实现不同的动效",normalizedContent:"最近在用 react + ant design 搭建一个后台管理的模板，想着之前用 vue 的时候，在路由切换时都增加了一个动效，用 react 能不能也增加一个类似的动效呢？\n说干就干，然而，令人犯难的是，vue 是自带 transition 组件，所以加动效很方便，react 就需要自己手动实现了。\n第一念头，当然是看看有没有成熟的插件来帮助实现，搜了下，网上都是说使用 react-transition-group 这个插件来实现，我也照着实现了一下，发现有 bug，切换的动效时灵时不灵的，有时候会报错，刷新一下又莫名的好了，而且控制台也报错。\n挣扎了一下，于是放弃了使用这个插件，于是，想着能不能不用插件来实现呢，在折腾一番之后，终于实现效果了，特此记录下。\n\n1、创建一个组件来实现动画\n\nimport './pagetransition.css'\n\nconst pagetransition = ({ children }: { children: react.reactnode }) => {\n  const [displaychildren, setdisplaychildren] = usestate(children);\n  const [transitionstage, settransitionstage] = usestate('slidein');\n  const location = uselocation();\n\n  useeffect(() => {\n    settransitionstage('slideout');\n  }, [location]);\n\n  useeffect(() => {\n    if (transitionstage === 'slideout') {\n      settimeout(() => {\n        setdisplaychildren(children);\n        settransitionstage('slidein');\n      }, 300); // 动画持续时间\n    }\n  }, [transitionstage, children]);\n\n  return (\n    <div classname={`page ${transitionstage}`}>\n      {displaychildren}\n    </div>\n  );\n};\n\nexport default pagetransition;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\npagetransition.css 样式代码\n\n.page {\n  transition: all 0.3s ease-in-out;\n}\n\n.slidein {\n  opacity: 1;\n  transform: translatex(0);\n}\n\n.slideout {\n  opacity: 0;\n  transform: translatex(-200px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n2、在需要使用动效的地方用这个组件将其包裹起来。对于后台管理而言，当然是使用该组件将 outlet 元素包裹起来\n\nimport pagetransition from '@/components/pagetransition'\n\n<pagetransition><outlet/></pagetransition>\n\n\n1\n2\n3\n\n\n至此，一个粗糙的路由切换动效就已经形成了，可以根据自己需要修改 css 里的样式以实现不同的动效",charsets:{cjk:!0}},{title:"React之自定义组件添加className与style",frontmatter:{title:"React之自定义组件添加className与style",date:"2024-08-31T14:20:44.000Z",permalink:"/pages/9266a7/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/27.React%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0className%E4%B8%8Estyle.html",relativePath:"《React》笔记/01.React/27.React之自定义组件添加className与style.md",key:"v-14faef13",path:"/pages/9266a7/",lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:null,content:'最近在使用 React 做项目的时候，发现了个问题，就是使用之前 React+ts 搭建好的框架来开发项目，在给自定义组件添加 className 或者设置 style 的时候会 ts 类型错误。虽说是自己封装的组件，直接在组件里改下就行了，但是确实不太智能，因为在使用组件的时候你不知道会遇到什么奇葩需求，因此给组件重新设置 className 或者设置内联样式是非常常见的需求，特别是你封装的组件别人可能也会用到，然而你没法预料到别人的需求。\n\n因此，在使用组件的时候，可以自定义 className 或者设置内联 style 是很有必要的。这就要求我们在封装组件的时候，需要采取合并样式和类名的方式来解决问题，即在组件中定义 className 和 style 属性，并使用 TypeScript 的 React.HTMLAttributes 类型来接受用户传入的这些属性，手动拼接 className，并使用对象扩展语法来合并 style。\n\nimport React from "react";\n\ninterface MyComponentProps extends React.HTMLAttributes<HTMLDivElement> {\n  // 自定义属性\n  customProp?: string;\n  className?: string;\n  style?: React.CSSProperties\n}\n\nconst MyComponent: React.FC<MyComponentProps> = ({ customProp, className, style, ...rest }) => {\n  // 定义组件内部的 className 和 style\n  const defaultClassName = "default-class";\n  const defaultStyle: React.CSSProperties = {\n    backgroundColor: "lightblue",\n    padding: "10px",\n  };\n\n  // 合并用户传入的 className 和 style\n  const combinedClassName = `${defaultClassName} ${className || ""}`.trim();\n  const combinedStyle = { ...defaultStyle, ...style };\n\n  return (\n    <div className={combinedClassName} style={combinedStyle} {...rest}>\n      <p>组件: {customProp}</p>\n    </div>\n  );\n};\n\nexport default MyComponent;\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n这样，我们在使用组件的时候就可以设置任意 className 和 style 了，他们会与组件原本的样式进行合并。',normalizedContent:'最近在使用 react 做项目的时候，发现了个问题，就是使用之前 react+ts 搭建好的框架来开发项目，在给自定义组件添加 classname 或者设置 style 的时候会 ts 类型错误。虽说是自己封装的组件，直接在组件里改下就行了，但是确实不太智能，因为在使用组件的时候你不知道会遇到什么奇葩需求，因此给组件重新设置 classname 或者设置内联样式是非常常见的需求，特别是你封装的组件别人可能也会用到，然而你没法预料到别人的需求。\n\n因此，在使用组件的时候，可以自定义 classname 或者设置内联 style 是很有必要的。这就要求我们在封装组件的时候，需要采取合并样式和类名的方式来解决问题，即在组件中定义 classname 和 style 属性，并使用 typescript 的 react.htmlattributes 类型来接受用户传入的这些属性，手动拼接 classname，并使用对象扩展语法来合并 style。\n\nimport react from "react";\n\ninterface mycomponentprops extends react.htmlattributes<htmldivelement> {\n  // 自定义属性\n  customprop?: string;\n  classname?: string;\n  style?: react.cssproperties\n}\n\nconst mycomponent: react.fc<mycomponentprops> = ({ customprop, classname, style, ...rest }) => {\n  // 定义组件内部的 classname 和 style\n  const defaultclassname = "default-class";\n  const defaultstyle: react.cssproperties = {\n    backgroundcolor: "lightblue",\n    padding: "10px",\n  };\n\n  // 合并用户传入的 classname 和 style\n  const combinedclassname = `${defaultclassname} ${classname || ""}`.trim();\n  const combinedstyle = { ...defaultstyle, ...style };\n\n  return (\n    <div classname={combinedclassname} style={combinedstyle} {...rest}>\n      <p>组件: {customprop}</p>\n    </div>\n  );\n};\n\nexport default mycomponent;\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n这样，我们在使用组件的时候就可以设置任意 classname 和 style 了，他们会与组件原本的样式进行合并。',charsets:{cjk:!0}},{title:"React之路径别名@配置",frontmatter:{title:"React之路径别名@配置",date:"2024-04-01T16:14:01.000Z",permalink:"/pages/c4a432/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/17.React%E4%B9%8B%E8%B7%AF%E5%BE%84%E5%88%AB%E5%90%8D@%E9%85%8D%E7%BD%AE.html",relativePath:"《React》笔记/01.React/17.React之路径别名@配置.md",key:"v-1eda0c4c",path:"/pages/c4a432/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'在开发过程中，我们经常需要导入各种组件、各种样式文件、接口 api 等等，因此会出现许多类似./和../等这种路径，如果层级嵌套的较多的话，则会出现许多../../ 这种，写起来非常麻烦，那么有没有什么办法能够像 vue 那样的，直接写路径别名，然后会自动给你指定到某一个文件夹下呢？当然是可以的，这就需要我们配置路径别名了。\n\n配置路径别名，这里用到了第三方库，就是 @craco/craco\n\n1、安装 @craco/craco\n\nnpm install @craco/craco\n\n\n1\n\n\n2、创建 craco.config.js 配置文件 (切记，项目根目录下创建)\n\nconst path = require(\'path\')\nmodule.exports = {\n  // webpack 配置\n  webpack: {\n    // 配置别名\n    alias: {\n      // 约定：使用 @ 表示 src 文件所在路径\n      \'@\': path.resolve(__dirname, \'src\')\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n3、修改 package.json 中脚本命令，配置启动和打包命令\n\n"scripts": {\n  "start": "craco start",\n  "build": "craco build",\n  "test": "craco test",\n  "eject": "react-scripts eject"\n},\n\n\n1\n2\n3\n4\n5\n6\n\n\n现在，重新启动项目，就可以使用路径别名 @符号来代替 */src 路径了\n\n如果在 vscode 中开发时，我们手动输入 @符号时，发现没有路径提示，这时候需要我们在项目根目录下创建 jsconfig.json 文件（ts 中则为 tsconfig.json）增加如下配置\n\n{\n  "compilerOptions": {\n    "allowJs": true,\n    "baseUrl": ".",\n    "paths": {\n        "@/*": [\n            "src/*"\n        ]\n    }\n  },\n  "include": ["src/**/*"],\n  "exclude": ["node_modules", "dist"]\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n此时，就可以愉快地使用路径别名来开发了。',normalizedContent:'在开发过程中，我们经常需要导入各种组件、各种样式文件、接口 api 等等，因此会出现许多类似./和../等这种路径，如果层级嵌套的较多的话，则会出现许多../../ 这种，写起来非常麻烦，那么有没有什么办法能够像 vue 那样的，直接写路径别名，然后会自动给你指定到某一个文件夹下呢？当然是可以的，这就需要我们配置路径别名了。\n\n配置路径别名，这里用到了第三方库，就是 @craco/craco\n\n1、安装 @craco/craco\n\nnpm install @craco/craco\n\n\n1\n\n\n2、创建 craco.config.js 配置文件 (切记，项目根目录下创建)\n\nconst path = require(\'path\')\nmodule.exports = {\n  // webpack 配置\n  webpack: {\n    // 配置别名\n    alias: {\n      // 约定：使用 @ 表示 src 文件所在路径\n      \'@\': path.resolve(__dirname, \'src\')\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n3、修改 package.json 中脚本命令，配置启动和打包命令\n\n"scripts": {\n  "start": "craco start",\n  "build": "craco build",\n  "test": "craco test",\n  "eject": "react-scripts eject"\n},\n\n\n1\n2\n3\n4\n5\n6\n\n\n现在，重新启动项目，就可以使用路径别名 @符号来代替 */src 路径了\n\n如果在 vscode 中开发时，我们手动输入 @符号时，发现没有路径提示，这时候需要我们在项目根目录下创建 jsconfig.json 文件（ts 中则为 tsconfig.json）增加如下配置\n\n{\n  "compileroptions": {\n    "allowjs": true,\n    "baseurl": ".",\n    "paths": {\n        "@/*": [\n            "src/*"\n        ]\n    }\n  },\n  "include": ["src/**/*"],\n  "exclude": ["node_modules", "dist"]\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n此时，就可以愉快地使用路径别名来开发了。',charsets:{cjk:!0}},{title:"React Native之安卓apk架构区别解析",frontmatter:{title:"React Native之安卓apk架构区别解析",date:"2025-05-23T14:38:30.000Z",permalink:"/pages/643cae/",categories:["React Native"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/02.React%20Native/02.React%20Native%E4%B9%8B%E5%AE%89%E5%8D%93apk%E6%9E%B6%E6%9E%84%E5%8C%BA%E5%88%AB%E8%A7%A3%E6%9E%90.html",relativePath:"《React》笔记/02.React Native/02.React Native之安卓apk架构区别解析.md",key:"v-3ef19a12",path:"/pages/643cae/",lastUpdated:"6/13/2025, 4:49:21 PM",lastUpdatedTimestamp:1749804561e3,headersStr:null,content:'接上篇讲，在 React Native 开发中，当打包 Android 应用时，生成的多个 APK 文件对应不同的 CPU 架构。这是为了针对不同设备的硬件架构进行优化。以下是它们的区别：\n\n1、app-arm64-v8a-release.apk\n\n * 架构：针对 ARMv8-A (64-bit) 的 CPU。\n * 适用设备：现代主流 Android 设备（如 2016 年后的手机 / 平板）。\n * 特点: 64 位架构，性能更好，支持更大的内存寻址。\n\n2、app-x86_64-release.apk\n\n * 架构：针对 x86_64 (64-bit) 的 CPU。\n * 适用设备：主要为 Android 模拟器（如 Intel x86 模拟器）或少数使用 Intel/AMD 64 位处理器的设备（如部分平板）\n * 特点：适用于开发调试，但实际移动设备极少使用此架构。\n\n3、app-x86-release.apk\n\n * 架构：针对 x86 (32-bit) 的 CPU。\n * 适用设备：旧版 Android 模拟器或部分 Intel 处理器的设备（如 2015 年前的平板）。\n * 特点：兼容性较好，但性能不如 ARM 架构。\n\n4、app-universal-release.apk\n\n * 架构：通用包（包含所有 CPU 架构的代码）。\n * 适用场景：一个 APK 包含所有架构（arm64-v8a、armeabi-v7a、x86、x86_64）。\n * 优点：兼容所有设备。\n * 缺点: APK 体积较大\n\n现在最佳实践：\n1、使用 App Bundle (.aab)\nGoogle Play 推荐上传 App Bundle 格式，商店会根据设备自动分发对应的 APK（按需生成，减少用户下载体积）。\n\n2、仅支持主流架构\n大多数情况下只需支持 arm64-v8a（主流设备）和 x86_64（模拟器）。可通过 android/app/build.gradle 配置：\n\nandroid {\n    defaultConfig {\n        ndk {\n            abiFilters "arm64-v8a", "x86_64"\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n3、避免 Universal APK\n除非有特殊需求（如非商店分发），否则通用包体积过大，不推荐。\n\n总结：\n\n * 真机安装：优先使用 arm64-v8a。\n * 模拟器调试：使用 x86 或 x86_64。\n * 应用商店分发：使用 App Bundle，让 Google Play 自动处理架构适配。',normalizedContent:'接上篇讲，在 react native 开发中，当打包 android 应用时，生成的多个 apk 文件对应不同的 cpu 架构。这是为了针对不同设备的硬件架构进行优化。以下是它们的区别：\n\n1、app-arm64-v8a-release.apk\n\n * 架构：针对 armv8-a (64-bit) 的 cpu。\n * 适用设备：现代主流 android 设备（如 2016 年后的手机 / 平板）。\n * 特点: 64 位架构，性能更好，支持更大的内存寻址。\n\n2、app-x86_64-release.apk\n\n * 架构：针对 x86_64 (64-bit) 的 cpu。\n * 适用设备：主要为 android 模拟器（如 intel x86 模拟器）或少数使用 intel/amd 64 位处理器的设备（如部分平板）\n * 特点：适用于开发调试，但实际移动设备极少使用此架构。\n\n3、app-x86-release.apk\n\n * 架构：针对 x86 (32-bit) 的 cpu。\n * 适用设备：旧版 android 模拟器或部分 intel 处理器的设备（如 2015 年前的平板）。\n * 特点：兼容性较好，但性能不如 arm 架构。\n\n4、app-universal-release.apk\n\n * 架构：通用包（包含所有 cpu 架构的代码）。\n * 适用场景：一个 apk 包含所有架构（arm64-v8a、armeabi-v7a、x86、x86_64）。\n * 优点：兼容所有设备。\n * 缺点: apk 体积较大\n\n现在最佳实践：\n1、使用 app bundle (.aab)\ngoogle play 推荐上传 app bundle 格式，商店会根据设备自动分发对应的 apk（按需生成，减少用户下载体积）。\n\n2、仅支持主流架构\n大多数情况下只需支持 arm64-v8a（主流设备）和 x86_64（模拟器）。可通过 android/app/build.gradle 配置：\n\nandroid {\n    defaultconfig {\n        ndk {\n            abifilters "arm64-v8a", "x86_64"\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n3、避免 universal apk\n除非有特殊需求（如非商店分发），否则通用包体积过大，不推荐。\n\n总结：\n\n * 真机安装：优先使用 arm64-v8a。\n * 模拟器调试：使用 x86 或 x86_64。\n * 应用商店分发：使用 app bundle，让 google play 自动处理架构适配。',charsets:{cjk:!0}},{title:"React Native之打包安卓修改Apk文件名",frontmatter:{title:"React Native之打包安卓修改Apk文件名",date:"2025-05-23T15:31:02.000Z",permalink:"/pages/3ca574/",categories:["React Native"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/02.React%20Native/03.React%20Native%E4%B9%8B%E6%89%93%E5%8C%85%E5%AE%89%E5%8D%93%E4%BF%AE%E6%94%B9Apk%E6%96%87%E4%BB%B6%E5%90%8D.html",relativePath:"《React》笔记/02.React Native/03.React Native之打包安卓修改Apk文件名.md",key:"v-be0ed572",path:"/pages/3ca574/",lastUpdated:"6/13/2025, 4:49:21 PM",lastUpdatedTimestamp:1749804561e3,headersStr:null,content:'在 React Native 项目中，修改打包生成的 APK 文件名可以通过配置 Android 的 Gradle 构建脚本实现。以下是具体步骤：\n\n1、打开 Gradle 配置文件\n进入项目的 Android 模块目录，找到 android/app/build.gradle 文件。\n\n2、修改构建脚本\n在 android 配置块内添加以下代码，动态设置输出的 APK 文件名：\n\nandroid {\n    ...\n    applicationVariants.all { variant ->\n        variant.outputs.all {\n            def versionName = variant.versionName\n            def versionCode = variant.versionCode\n            def date = new Date().format("yyyyMMdd")\n            def buildType = variant.buildType.name\n            outputFileName = "AppName_${buildType}_v${versionName}_${date}.apk"\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n参数说明：\n\n * versionName: 应用版本名称（在 defaultConfig 中定义）\n * versionCode: 应用版本代码（在 defaultConfig 中定义）\n * date: 当前日期，格式化为年月日（例如 20231023）\n * buildType: 构建类型（如 debug、release）\n   现在打包后的 apk 文件名如: AppName_release_v1.0.0_20231023.apk\n\n提示\n\nGradle 版本兼容性：使用 variant.outputs.all 代替旧版的 each 方法，确保兼容 Gradle 3.0+。\n\n按照如上操作完，再次执行打包命令可能会出现如下错误，错误信息显示 Task :app:packageRelease 失败，具体是执行 PackageAndroidArtifact$IncrementalSplitterRunnable 时出现问题：\n\n这可能是旧构建缓存导致冲突，需要清楚缓存\n\n# 进入安卓项目目录\ncd android\n\n# 执行清理命令\n./gradlew clean\n\n# 重新打包\n./gradlew assembleRelease\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n此时，能够正常打包了。\n\n此时，按照上述配置打包后确实生成了一个 apk 文件，但是只生成了一个，按照此前拆分 cpu 架构（ABI 分包）的情况下应该生成多个 apk 文件才对啊，因此，需要进一步优化上述配置，\n1、启用 ABI 分包配置\n在 android/app/build.gradle 中配置 ABI 分包策略：\n\nandroid {\n    splits {\n        abi {\n            enable true // 启用ABI分包\n            reset()    // 重置默认配置\n            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64" // 指定拆分的ABI类型\n            universalApk true // 生成通用APK\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n2、动态获取 ABI 架构类型\n\nandroid {\n    applicationVariants.all { variant ->\n        variant.outputs.all { output ->\n            // 获取当前输出的ABI类型（如arm64-v8a）\n            def abi = output.getFilter(OutputFile.ABI)\n            def abiName = abi ? "_${abi}" : "_universal" // 处理无ABI的情况\n\n            def versionName = variant.versionName\n            def versionCode = variant.versionCode\n            def date = new Date().format("yyyyMMdd")\n            def buildType = variant.buildType.name\n\n            // 组合最终文件名\n            outputFileName = "MyApp_${buildType}_v${versionName}_${date}${abiName}.apk"\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n此时，再打包，如果正确的下，应该会生成类似 MyApp_release_v1.2.0_20240101_arm64-v8a.apk 这种格式的 apk 文件的。\n\n此时再次执行清理构建缓存操作，不出意外的话意外要出现了，又报错了，提示 “MissingPropertyException: No such property: ABI for class: org.gradle.api.tasks.OutputFile”\n\n这是因为我们还没有引入 OutputFile。\n\n解决办法：在 android/app/build.gradle 文件顶部添加以下导入语句\n\nimport com.android.build.OutputFile\n\n\n1\n\n\n至此，再执行打包命令，就能成功打包了。\n\n附上 android/app/build.gradle 文件的完整配置：\n\nimport com.android.build.OutputFile \napply plugin: "com.android.application"\napply plugin: "org.jetbrains.kotlin.android"\napply plugin: "com.facebook.react"\n\nreact {\n    /* Autolinking */\n    autolinkLibrariesWithApp()\n}\n\ndef enableProguardInReleaseBuilds = true\ndef enableSeparateBuildPerCPUArchitecture = true\n\n\ndef jscFlavor = \'io.github.react-native-community:jsc-android:2026004.+\'\n\nproject.ext.react = [\n    enableHermes: true,  // 启用 Hermes\n    bundleInDebug: false,\n    bundleInRelease: true,\n    devDisabledInRelease: true\n]\n\nandroid {\n    ndkVersion rootProject.ext.ndkVersion\n    buildToolsVersion rootProject.ext.buildToolsVersion\n    compileSdk rootProject.ext.compileSdkVersion\n\n    namespace "com.videoapp"\n    defaultConfig {\n        applicationId "com.videoapp"\n        minSdkVersion rootProject.ext.minSdkVersion\n        targetSdkVersion rootProject.ext.targetSdkVersion\n        versionCode 1\n        versionName "1.0"\n    }\n    signingConfigs {\n        debug {\n            storeFile file(\'debug.keystore\')\n            storePassword \'android\'\n            keyAlias \'androiddebugkey\'\n            keyPassword \'android\'\n        }\n        release {\n            if (project.hasProperty(\'MYAPP_RELEASE_STORE_FILE\')) {\n                storeFile file(MYAPP_RELEASE_STORE_FILE)\n                storePassword MYAPP_RELEASE_STORE_PASSWORD\n                keyAlias MYAPP_RELEASE_KEY_ALIAS\n                keyPassword MYAPP_RELEASE_KEY_PASSWORD\n            }\n        }\n    }\n    buildTypes {\n        debug {\n            signingConfig signingConfigs.debug\n        }\n        release {\n            minifyEnabled true   // 启用代码压缩\n            shrinkResources true // 移除未使用的资源\n            signingConfig signingConfigs.debug\n            minifyEnabled enableProguardInReleaseBuilds\n            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"\n            signingConfig signingConfigs.release\n        }\n    }\n\n    // 自定义apk文件名\n    applicationVariants.all { variant ->\n        variant.outputs.all { output ->\n            // 动态获取ABI架构类型\n            def abi = output.getFilter(OutputFile.ABI)\n            def abiSuffix = abi ? "_${abi}" : "_universal"\n\n            // 其他参数\n            def projectName = "VideoApp"\n            def buildType = variant.buildType.name\n            def versionName = variant.versionName\n            def date = new Date().format("yyyyMMdd")\n\n            // 生成最终文件名\n            outputFileName = "${projectName}_${buildType}_v${versionName}_${date}${abiSuffix}.apk"\n        }\n    }\n\n    // 拆分cpu架构（ABI分包）\n    splits {\n        abi {\n            enable true\n            reset()\n            include "arm64-v8a", "x86", "x86_64" // 按需选择\n            universalApk true\n        }\n    }\n}\n\napply from: file("../../node_modules/react-native-vector-icons/fonts.gradle") // 使用react-native-vector-icons图标是需要添加\n\n\ndependencies {\n    // The version of react-native is set by the React Native Gradle Plugin\n    implementation("com.facebook.react:react-android")\n\n    if (hermesEnabled.toBoolean()) {\n        implementation("com.facebook.react:hermes-android")\n    } else {\n        implementation jscFlavor\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n',normalizedContent:'在 react native 项目中，修改打包生成的 apk 文件名可以通过配置 android 的 gradle 构建脚本实现。以下是具体步骤：\n\n1、打开 gradle 配置文件\n进入项目的 android 模块目录，找到 android/app/build.gradle 文件。\n\n2、修改构建脚本\n在 android 配置块内添加以下代码，动态设置输出的 apk 文件名：\n\nandroid {\n    ...\n    applicationvariants.all { variant ->\n        variant.outputs.all {\n            def versionname = variant.versionname\n            def versioncode = variant.versioncode\n            def date = new date().format("yyyymmdd")\n            def buildtype = variant.buildtype.name\n            outputfilename = "appname_${buildtype}_v${versionname}_${date}.apk"\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n参数说明：\n\n * versionname: 应用版本名称（在 defaultconfig 中定义）\n * versioncode: 应用版本代码（在 defaultconfig 中定义）\n * date: 当前日期，格式化为年月日（例如 20231023）\n * buildtype: 构建类型（如 debug、release）\n   现在打包后的 apk 文件名如: appname_release_v1.0.0_20231023.apk\n\n提示\n\ngradle 版本兼容性：使用 variant.outputs.all 代替旧版的 each 方法，确保兼容 gradle 3.0+。\n\n按照如上操作完，再次执行打包命令可能会出现如下错误，错误信息显示 task :app:packagerelease 失败，具体是执行 packageandroidartifact$incrementalsplitterrunnable 时出现问题：\n\n这可能是旧构建缓存导致冲突，需要清楚缓存\n\n# 进入安卓项目目录\ncd android\n\n# 执行清理命令\n./gradlew clean\n\n# 重新打包\n./gradlew assemblerelease\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n此时，能够正常打包了。\n\n此时，按照上述配置打包后确实生成了一个 apk 文件，但是只生成了一个，按照此前拆分 cpu 架构（abi 分包）的情况下应该生成多个 apk 文件才对啊，因此，需要进一步优化上述配置，\n1、启用 abi 分包配置\n在 android/app/build.gradle 中配置 abi 分包策略：\n\nandroid {\n    splits {\n        abi {\n            enable true // 启用abi分包\n            reset()    // 重置默认配置\n            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64" // 指定拆分的abi类型\n            universalapk true // 生成通用apk\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n2、动态获取 abi 架构类型\n\nandroid {\n    applicationvariants.all { variant ->\n        variant.outputs.all { output ->\n            // 获取当前输出的abi类型（如arm64-v8a）\n            def abi = output.getfilter(outputfile.abi)\n            def abiname = abi ? "_${abi}" : "_universal" // 处理无abi的情况\n\n            def versionname = variant.versionname\n            def versioncode = variant.versioncode\n            def date = new date().format("yyyymmdd")\n            def buildtype = variant.buildtype.name\n\n            // 组合最终文件名\n            outputfilename = "myapp_${buildtype}_v${versionname}_${date}${abiname}.apk"\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n此时，再打包，如果正确的下，应该会生成类似 myapp_release_v1.2.0_20240101_arm64-v8a.apk 这种格式的 apk 文件的。\n\n此时再次执行清理构建缓存操作，不出意外的话意外要出现了，又报错了，提示 “missingpropertyexception: no such property: abi for class: org.gradle.api.tasks.outputfile”\n\n这是因为我们还没有引入 outputfile。\n\n解决办法：在 android/app/build.gradle 文件顶部添加以下导入语句\n\nimport com.android.build.outputfile\n\n\n1\n\n\n至此，再执行打包命令，就能成功打包了。\n\n附上 android/app/build.gradle 文件的完整配置：\n\nimport com.android.build.outputfile \napply plugin: "com.android.application"\napply plugin: "org.jetbrains.kotlin.android"\napply plugin: "com.facebook.react"\n\nreact {\n    /* autolinking */\n    autolinklibrarieswithapp()\n}\n\ndef enableproguardinreleasebuilds = true\ndef enableseparatebuildpercpuarchitecture = true\n\n\ndef jscflavor = \'io.github.react-native-community:jsc-android:2026004.+\'\n\nproject.ext.react = [\n    enablehermes: true,  // 启用 hermes\n    bundleindebug: false,\n    bundleinrelease: true,\n    devdisabledinrelease: true\n]\n\nandroid {\n    ndkversion rootproject.ext.ndkversion\n    buildtoolsversion rootproject.ext.buildtoolsversion\n    compilesdk rootproject.ext.compilesdkversion\n\n    namespace "com.videoapp"\n    defaultconfig {\n        applicationid "com.videoapp"\n        minsdkversion rootproject.ext.minsdkversion\n        targetsdkversion rootproject.ext.targetsdkversion\n        versioncode 1\n        versionname "1.0"\n    }\n    signingconfigs {\n        debug {\n            storefile file(\'debug.keystore\')\n            storepassword \'android\'\n            keyalias \'androiddebugkey\'\n            keypassword \'android\'\n        }\n        release {\n            if (project.hasproperty(\'myapp_release_store_file\')) {\n                storefile file(myapp_release_store_file)\n                storepassword myapp_release_store_password\n                keyalias myapp_release_key_alias\n                keypassword myapp_release_key_password\n            }\n        }\n    }\n    buildtypes {\n        debug {\n            signingconfig signingconfigs.debug\n        }\n        release {\n            minifyenabled true   // 启用代码压缩\n            shrinkresources true // 移除未使用的资源\n            signingconfig signingconfigs.debug\n            minifyenabled enableproguardinreleasebuilds\n            proguardfiles getdefaultproguardfile("proguard-android.txt"), "proguard-rules.pro"\n            signingconfig signingconfigs.release\n        }\n    }\n\n    // 自定义apk文件名\n    applicationvariants.all { variant ->\n        variant.outputs.all { output ->\n            // 动态获取abi架构类型\n            def abi = output.getfilter(outputfile.abi)\n            def abisuffix = abi ? "_${abi}" : "_universal"\n\n            // 其他参数\n            def projectname = "videoapp"\n            def buildtype = variant.buildtype.name\n            def versionname = variant.versionname\n            def date = new date().format("yyyymmdd")\n\n            // 生成最终文件名\n            outputfilename = "${projectname}_${buildtype}_v${versionname}_${date}${abisuffix}.apk"\n        }\n    }\n\n    // 拆分cpu架构（abi分包）\n    splits {\n        abi {\n            enable true\n            reset()\n            include "arm64-v8a", "x86", "x86_64" // 按需选择\n            universalapk true\n        }\n    }\n}\n\napply from: file("../../node_modules/react-native-vector-icons/fonts.gradle") // 使用react-native-vector-icons图标是需要添加\n\n\ndependencies {\n    // the version of react-native is set by the react native gradle plugin\n    implementation("com.facebook.react:react-android")\n\n    if (hermesenabled.toboolean()) {\n        implementation("com.facebook.react:hermes-android")\n    } else {\n        implementation jscflavor\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n',charsets:{cjk:!0}},{title:"React Native之h5唤起APP配置",frontmatter:{title:"React Native之h5唤起APP配置",date:"2025-05-26T15:34:47.000Z",permalink:"/pages/6f6b6c/",categories:["React Native"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/02.React%20Native/05.React%20Native%E4%B9%8Bh5%E5%94%A4%E8%B5%B7APP%E9%85%8D%E7%BD%AE.html",relativePath:"《React》笔记/02.React Native/05.React Native之h5唤起APP配置.md",key:"v-0e93f0aa",path:"/pages/6f6b6c/",lastUpdated:"6/13/2025, 4:49:21 PM",lastUpdatedTimestamp:1749804561e3,headersStr:null,content:"在项目中，经常会遇到需要 h5 落地页唤起 APP 的需求，这里通过 scheme 协议的方式来实现。\n\n既然是通过 scheme 的方式实现，那么项目中就必须先配置这个。\n\n1、在项目根目录找到 android 文件夹，在 app/src/main/AndroidManifest.xml 中增加如下配置\n\n<intent-filter>\n  <action android:name=\"android.intent.action.VIEW\" />\n  <category android:name=\"android.intent.category.DEFAULT\" />\n  <category android:name=\"android.intent.category.BROWSABLE\" />\n  <data android:scheme=\"videoapp\" />\n</intent-filter>\n\n\n1\n2\n3\n4\n5\n6\n\n\n2、创建导航工具文件和配置深层链接处理\n（1）、创建导航工具文件\n\n// src/utils/navigation.js\n\nimport { createNavigationContainerRef } from '@react-navigation/native';\n\nexport const navigationRef = createNavigationContainerRef();\n\nexport function deepLinkNavigate(route, params) {\n  if (navigationRef.isReady()) {\n    navigationRef.navigate(route, params);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n（2）、配置深层链接处理\n\n// src/utils/deepLinkHandler.js\n\nimport { Linking } from 'react-native';\nimport { deepLinkNavigate } from './navigation';\n\n// 处理URL解析\nfunction parseDeepLink(url) {\n  if ( !url ) {\n    return null;\n  }\n\n  // 示例解析 videoapp://profile/123?name=John\n  const route = url.replace(/.*?:\\/\\//g, ''); // 移除scheme\n  const [pathSegment, id] = route.split('/').filter(Boolean);\n  const params = Object.fromEntries(new URLSearchParams(url.split('?')[1]));\n\n  return {\n    route: pathSegment,\n    params: { id, ...params },\n  };\n}\n\n// 统一处理链接\nexport function handleDeepLink(url) {\n  const parsed = parseDeepLink(url);\n  if ( !parsed ) {\n    return;\n  }\n\n  switch (parsed.route) {\n    case 'profile':\n      deepLinkNavigate('Profile', parsed.params);\n      break;\n    case 'search':\n      deepLinkNavigate('Search', parsed.params);\n      break;\n    case 'category':\n      deepLinkNavigate( 'Category', parsed.params );\n      break;\n    default:\n      deepLinkNavigate('Home');\n  }\n}\n\n// 初始化监听\nexport function initDeepLinkListeners() {\n  const linkingSubscription = Linking.addEventListener('url', ({ url }) => {\n    handleDeepLink(url);\n  });\n  return linkingSubscription.remove;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n\n3、在 NavigationContainer 所在的组件中增加如下配置：\n\nimport { useEffect } from 'react';\nimport { Linking } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { navigationRef } from '../utils/navigation';\nimport { initDeepLinkListeners, handleDeepLink } from '../utils/deepLinkHandler';\n\nfunction AppNavigator () {\n  const linking = {\n    prefixes: [ 'videoapp://' ],\n    config: {\n      screens: {\n        Home: 'home',\n        Category: 'category',\n        Search: 'search',\n        Profile: 'profile',\n      },\n    },\n  };\n\n  useEffect(() => {\n    const cleanup = initDeepLinkListeners();\n\n    // 处理应用启动时的初始URL\n    Linking.getInitialURL()\n      .then( url => {\n        if (url) {\n          handleDeepLink(url);\n        }\n      })\n      .catch(console.error);\n\n    return cleanup;\n  }, []);\n\n\n  return (\n    <NavigationContainer ref={navigationRef} linking={ linking }>\n      <Stack.Navigator screenOptions={ {\n        headerTitleAlign: 'center',\n      }}>\n        <Stack.Screen\n          name=\"Main\"\n          component={MainTabNavigator}\n          options={{ headerShown: false }}\n        />\n        ...\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default AppNavigator;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n到此，打包后，即可在 h5 页面通过 scheme 协议唤起该 APP。\n例如：\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n</head>\n<body>\n\t<button class=\"btn\">按钮</button>\n\t<script>\n\tfunction openApp() {\n\t  const iframe = document.createElement('iframe');\n\t  iframe.style.display = 'none';\n\t  iframe.src = 'videoapp://search';\n\t  document.body.appendChild(iframe);\n\t  setTimeout(() => {\n\t    document.body.removeChild(iframe);\n\t  }, 500);\n\t}\n\tvar btn = document.querySelector('.btn')\n\tbtn.onclick = function () {\n\t\topenApp()\n\t}\n\t<\/script>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n注意：\n\n1、推荐始终使用全小写 Scheme（如 videoapp://），避免驼峰式命名\n2、确保 AndroidManifest.xml、React Navigation 的 prefixes、H5 链接三者的 Scheme 完全一致（包括大小写）\n3、如果要使用驼峰式命名，则必须在 AndroidManifest.xml 和 React Navigation 的 prefixes 声明大小写\nAndroidManifest.xml 中：\n<data android:scheme=\"videoApp\" /> <data android:scheme=\"videoapp\" />\n\nReact Navigation 的 prefixes：\nprefixes: ['videoapp://', 'videoApp://']",normalizedContent:"在项目中，经常会遇到需要 h5 落地页唤起 app 的需求，这里通过 scheme 协议的方式来实现。\n\n既然是通过 scheme 的方式实现，那么项目中就必须先配置这个。\n\n1、在项目根目录找到 android 文件夹，在 app/src/main/androidmanifest.xml 中增加如下配置\n\n<intent-filter>\n  <action android:name=\"android.intent.action.view\" />\n  <category android:name=\"android.intent.category.default\" />\n  <category android:name=\"android.intent.category.browsable\" />\n  <data android:scheme=\"videoapp\" />\n</intent-filter>\n\n\n1\n2\n3\n4\n5\n6\n\n\n2、创建导航工具文件和配置深层链接处理\n（1）、创建导航工具文件\n\n// src/utils/navigation.js\n\nimport { createnavigationcontainerref } from '@react-navigation/native';\n\nexport const navigationref = createnavigationcontainerref();\n\nexport function deeplinknavigate(route, params) {\n  if (navigationref.isready()) {\n    navigationref.navigate(route, params);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n（2）、配置深层链接处理\n\n// src/utils/deeplinkhandler.js\n\nimport { linking } from 'react-native';\nimport { deeplinknavigate } from './navigation';\n\n// 处理url解析\nfunction parsedeeplink(url) {\n  if ( !url ) {\n    return null;\n  }\n\n  // 示例解析 videoapp://profile/123?name=john\n  const route = url.replace(/.*?:\\/\\//g, ''); // 移除scheme\n  const [pathsegment, id] = route.split('/').filter(boolean);\n  const params = object.fromentries(new urlsearchparams(url.split('?')[1]));\n\n  return {\n    route: pathsegment,\n    params: { id, ...params },\n  };\n}\n\n// 统一处理链接\nexport function handledeeplink(url) {\n  const parsed = parsedeeplink(url);\n  if ( !parsed ) {\n    return;\n  }\n\n  switch (parsed.route) {\n    case 'profile':\n      deeplinknavigate('profile', parsed.params);\n      break;\n    case 'search':\n      deeplinknavigate('search', parsed.params);\n      break;\n    case 'category':\n      deeplinknavigate( 'category', parsed.params );\n      break;\n    default:\n      deeplinknavigate('home');\n  }\n}\n\n// 初始化监听\nexport function initdeeplinklisteners() {\n  const linkingsubscription = linking.addeventlistener('url', ({ url }) => {\n    handledeeplink(url);\n  });\n  return linkingsubscription.remove;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n\n3、在 navigationcontainer 所在的组件中增加如下配置：\n\nimport { useeffect } from 'react';\nimport { linking } from 'react-native';\nimport { navigationcontainer } from '@react-navigation/native';\nimport { navigationref } from '../utils/navigation';\nimport { initdeeplinklisteners, handledeeplink } from '../utils/deeplinkhandler';\n\nfunction appnavigator () {\n  const linking = {\n    prefixes: [ 'videoapp://' ],\n    config: {\n      screens: {\n        home: 'home',\n        category: 'category',\n        search: 'search',\n        profile: 'profile',\n      },\n    },\n  };\n\n  useeffect(() => {\n    const cleanup = initdeeplinklisteners();\n\n    // 处理应用启动时的初始url\n    linking.getinitialurl()\n      .then( url => {\n        if (url) {\n          handledeeplink(url);\n        }\n      })\n      .catch(console.error);\n\n    return cleanup;\n  }, []);\n\n\n  return (\n    <navigationcontainer ref={navigationref} linking={ linking }>\n      <stack.navigator screenoptions={ {\n        headertitlealign: 'center',\n      }}>\n        <stack.screen\n          name=\"main\"\n          component={maintabnavigator}\n          options={{ headershown: false }}\n        />\n        ...\n      </stack.navigator>\n    </navigationcontainer>\n  );\n}\n\nexport default appnavigator;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n到此，打包后，即可在 h5 页面通过 scheme 协议唤起该 app。\n例如：\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>document</title>\n</head>\n<body>\n\t<button class=\"btn\">按钮</button>\n\t<script>\n\tfunction openapp() {\n\t  const iframe = document.createelement('iframe');\n\t  iframe.style.display = 'none';\n\t  iframe.src = 'videoapp://search';\n\t  document.body.appendchild(iframe);\n\t  settimeout(() => {\n\t    document.body.removechild(iframe);\n\t  }, 500);\n\t}\n\tvar btn = document.queryselector('.btn')\n\tbtn.onclick = function () {\n\t\topenapp()\n\t}\n\t<\/script>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n注意：\n\n1、推荐始终使用全小写 scheme（如 videoapp://），避免驼峰式命名\n2、确保 androidmanifest.xml、react navigation 的 prefixes、h5 链接三者的 scheme 完全一致（包括大小写）\n3、如果要使用驼峰式命名，则必须在 androidmanifest.xml 和 react navigation 的 prefixes 声明大小写\nandroidmanifest.xml 中：\n<data android:scheme=\"videoapp\" /> <data android:scheme=\"videoapp\" />\n\nreact navigation 的 prefixes：\nprefixes: ['videoapp://', 'videoapp://']",charsets:{cjk:!0}},{title:"React Native之项目创建以及路由配置",frontmatter:{title:"React Native之项目创建以及路由配置",date:"2025-05-23T16:08:29.000Z",permalink:"/pages/3210df/",categories:["React Native"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/02.React%20Native/04.React%20Native%E4%B9%8B%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E4%BB%A5%E5%8F%8A%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE.html",relativePath:"《React》笔记/02.React Native/04.React Native之项目创建以及路由配置.md",key:"v-742054b3",path:"/pages/3210df/",lastUpdated:"6/13/2025, 4:49:21 PM",lastUpdatedTimestamp:1749804561e3,headersStr:null,content:"在 React Native 中要想像 react 中那样进行页面间跳转需要使用到 @react-navigation/native 这个库。\n\n这是 React Native 应用的导航库，主要用于管理和控制应用中的页面跳转和导航。它提供了多种导航组件，包括栈式导航（Stack Navigator）、底部标签导航（Bottom Tab Navigator）和抽屉导航（Drawer Navigator），以适应不同的应用场景和需求‌。\n\n1、初始化项目并安装相关依赖：\n\nnpx react-native init VideoApp\ncd VideoApp\nnpm install @react-navigation/native @react-navigation/bottom-tabs @react-navigation/stack\nnpm install react-native-vector-icons react-native-video react-native-safe-area-context\nnpm install react-native-screens react-native-gesture-handler\n\n\n1\n2\n3\n4\n5\n\n\n2、创建类似如下的项目结构（根组件也可能是 App.tsx）\n\n\n根组件 APP.tsx 代码如下：\n\nimport React from 'react';\nimport { StatusBar } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport AppNavigator from './src/navigation/AppNavigator';\n\nconst App = () => {\n  return (\n    <SafeAreaProvider>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"#FFFFFF\" />\n      <AppNavigator />\n    </SafeAreaProvider>\n  );\n};\n\nexport default App;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n3、然后在 src/navigation/AppNavigator.js 文件代码如下：\n\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Icon from 'react-native-vector-icons/Ionicons';\n\n// 导入页面\nimport HomeScreen from '../screens/HomeScreen';\nimport CategoryScreen from '../screens/CategoryScreen';\nimport SearchScreen from '../screens/SearchScreen';\nimport ProfileScreen from '../screens/ProfileScreen';\nimport VideoPlayerScreen from '../screens/VideoPlayerScreen';\nimport AboutScreen from '../screens/AboutScreen';\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createStackNavigator();\n\nconst getTabBarIcon = (routeName, focused, color, size) => {\n  let iconName;\n  if (routeName === 'Home') {\n    iconName = focused ? 'home' : 'home-outline';\n  } else if (routeName === 'Category') {\n    iconName = focused ? 'grid' : 'grid-outline';\n  } else if (routeName === 'Search') {\n    iconName = focused ? 'search' : 'search-outline';\n  } else if (routeName === 'Profile') {\n    iconName = focused ? 'person' : 'person-outline';\n  }\n  return <Icon name={iconName} size={size} color={color} />;\n};\n\n// 主页面标签导航\nfunction MainTabNavigator() {\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ focused, color, size }) => getTabBarIcon(route.name, focused, color, size),\n        tabBarActiveTintColor: '#FF4757',\n        tabBarInactiveTintColor: 'gray',\n        headerShown: false,\n        headerTitleAlign: 'center',\n      })}\n    >\n      <Tab.Screen name=\"Home\" component={HomeScreen} options={{ title: '首页' }} />\n      <Tab.Screen name=\"Category\" component={CategoryScreen} options={{ title: '分类' }} />\n      <Tab.Screen name=\"Search\" component={SearchScreen} options={{ title: '搜索' }} />\n      <Tab.Screen name=\"Profile\" component={ ProfileScreen } options={ { title: '我的' } } />\n    </Tab.Navigator>\n  );\n}\n\n// 应用主导航\nfunction AppNavigator() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={ {\n        headerTitleAlign: 'center',\n      }}>\n        <Stack.Screen\n          name=\"Main\"\n          component={MainTabNavigator}\n          options={{ headerShown: false }}\n        />\n        <Stack.Screen\n          name=\"VideoPlayer\"\n          component={VideoPlayerScreen}\n          options={{ headerShown: false }}\n        />\n        <Stack.Screen\n          name=\"About\"\n          component={AboutScreen}\n          options={{ title: '关于我们' }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default AppNavigator;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n\n\n此时，路由配置已基本完成，只需要在 src/screens 文件夹下创建项目中需要用到的各种视图组件即可。\n\n相关依赖解说\n\n@react-navigation/native 是路由跳转必须要用到的主库。 官方文档\n@react-navigation/bottom-tabs 是创建位于屏幕底部标签导航所需的库。\n@react-navigation/stack 是创建栈式导航所需的库。\nreact-native-vector-icons 是一个矢量图标库。 文档\nreact-native-video 是提供视频播放功能的开源组件。文档\nreact-native-safe-area-context 是处理 React Native 中安全区域边距的 JavaScript 库‌。\nreact-native-screens 是为 React Native 应用提供原生导航组件的开源库。\nreact-native-gesture-handler 是为 React Native 应用提供原生触摸和手势系统的",normalizedContent:"在 react native 中要想像 react 中那样进行页面间跳转需要使用到 @react-navigation/native 这个库。\n\n这是 react native 应用的导航库，主要用于管理和控制应用中的页面跳转和导航。它提供了多种导航组件，包括栈式导航（stack navigator）、底部标签导航（bottom tab navigator）和抽屉导航（drawer navigator），以适应不同的应用场景和需求‌。\n\n1、初始化项目并安装相关依赖：\n\nnpx react-native init videoapp\ncd videoapp\nnpm install @react-navigation/native @react-navigation/bottom-tabs @react-navigation/stack\nnpm install react-native-vector-icons react-native-video react-native-safe-area-context\nnpm install react-native-screens react-native-gesture-handler\n\n\n1\n2\n3\n4\n5\n\n\n2、创建类似如下的项目结构（根组件也可能是 app.tsx）\n\n\n根组件 app.tsx 代码如下：\n\nimport react from 'react';\nimport { statusbar } from 'react-native';\nimport { safeareaprovider } from 'react-native-safe-area-context';\nimport appnavigator from './src/navigation/appnavigator';\n\nconst app = () => {\n  return (\n    <safeareaprovider>\n      <statusbar barstyle=\"dark-content\" backgroundcolor=\"#ffffff\" />\n      <appnavigator />\n    </safeareaprovider>\n  );\n};\n\nexport default app;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n3、然后在 src/navigation/appnavigator.js 文件代码如下：\n\nimport react from 'react';\nimport { navigationcontainer } from '@react-navigation/native';\nimport { createbottomtabnavigator } from '@react-navigation/bottom-tabs';\nimport { createstacknavigator } from '@react-navigation/stack';\nimport icon from 'react-native-vector-icons/ionicons';\n\n// 导入页面\nimport homescreen from '../screens/homescreen';\nimport categoryscreen from '../screens/categoryscreen';\nimport searchscreen from '../screens/searchscreen';\nimport profilescreen from '../screens/profilescreen';\nimport videoplayerscreen from '../screens/videoplayerscreen';\nimport aboutscreen from '../screens/aboutscreen';\n\nconst tab = createbottomtabnavigator();\nconst stack = createstacknavigator();\n\nconst gettabbaricon = (routename, focused, color, size) => {\n  let iconname;\n  if (routename === 'home') {\n    iconname = focused ? 'home' : 'home-outline';\n  } else if (routename === 'category') {\n    iconname = focused ? 'grid' : 'grid-outline';\n  } else if (routename === 'search') {\n    iconname = focused ? 'search' : 'search-outline';\n  } else if (routename === 'profile') {\n    iconname = focused ? 'person' : 'person-outline';\n  }\n  return <icon name={iconname} size={size} color={color} />;\n};\n\n// 主页面标签导航\nfunction maintabnavigator() {\n  return (\n    <tab.navigator\n      screenoptions={({ route }) => ({\n        tabbaricon: ({ focused, color, size }) => gettabbaricon(route.name, focused, color, size),\n        tabbaractivetintcolor: '#ff4757',\n        tabbarinactivetintcolor: 'gray',\n        headershown: false,\n        headertitlealign: 'center',\n      })}\n    >\n      <tab.screen name=\"home\" component={homescreen} options={{ title: '首页' }} />\n      <tab.screen name=\"category\" component={categoryscreen} options={{ title: '分类' }} />\n      <tab.screen name=\"search\" component={searchscreen} options={{ title: '搜索' }} />\n      <tab.screen name=\"profile\" component={ profilescreen } options={ { title: '我的' } } />\n    </tab.navigator>\n  );\n}\n\n// 应用主导航\nfunction appnavigator() {\n  return (\n    <navigationcontainer>\n      <stack.navigator screenoptions={ {\n        headertitlealign: 'center',\n      }}>\n        <stack.screen\n          name=\"main\"\n          component={maintabnavigator}\n          options={{ headershown: false }}\n        />\n        <stack.screen\n          name=\"videoplayer\"\n          component={videoplayerscreen}\n          options={{ headershown: false }}\n        />\n        <stack.screen\n          name=\"about\"\n          component={aboutscreen}\n          options={{ title: '关于我们' }}\n        />\n      </stack.navigator>\n    </navigationcontainer>\n  );\n}\n\nexport default appnavigator;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n\n\n此时，路由配置已基本完成，只需要在 src/screens 文件夹下创建项目中需要用到的各种视图组件即可。\n\n相关依赖解说\n\n@react-navigation/native 是路由跳转必须要用到的主库。 官方文档\n@react-navigation/bottom-tabs 是创建位于屏幕底部标签导航所需的库。\n@react-navigation/stack 是创建栈式导航所需的库。\nreact-native-vector-icons 是一个矢量图标库。 文档\nreact-native-video 是提供视频播放功能的开源组件。文档\nreact-native-safe-area-context 是处理 react native 中安全区域边距的 javascript 库‌。\nreact-native-screens 是为 react native 应用提供原生导航组件的开源库。\nreact-native-gesture-handler 是为 react native 应用提供原生触摸和手势系统的",charsets:{cjk:!0}},{title:"React之postcss-pxtorem移动端适配",frontmatter:{title:"React之postcss-pxtorem移动端适配",date:"2024-05-21T14:41:04.000Z",permalink:"/pages/2e5144/",categories:["React"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/01.React/20.React%E4%B9%8Bpostcss-pxtorem%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D.html",relativePath:"《React》笔记/01.React/20.React之postcss-pxtorem移动端适配.md",key:"v-b763c544",path:"/pages/2e5144/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"在项目中经常会遇到需要适配移动端的情况，而适配移动端有许多解决方案，如百分比、em、rem、vw、弹性布局等等，这里介绍的是使用 rem 方案，rem 是一个相对单位，相对的是 html 根元素 font-size 的大小。简单来说就是我们给 html 根元素设置一个 font-size，这个值是多少，那就相当于 1rem 等于多少。这就涉及到频繁的换算，将设计稿的 px 转换成 rem，那么如何实现自动转换呢？就是我们直接按设计稿来写，然后会自动将之转换为 rem，无需手动去计算。答案当然是有的，这里使用了插件 postcss-pxtorem\n\n1、安装 postcss-pxtorem\n\nnpm install postcss-pxtorem --save-dev\n\n\n1\n\n\n2、在 craco.config.js 配置文件中添加如下配置：\n\nmodule.exports = {\n\t......\n    style: {\n        postcss: {\n            mode: 'extends',\n            loaderOptions: {\n                postcssOptions: {\n                    ident: 'postcss',\n                    plugins: [\n                        require('postcss-pxtorem')({\n                        \t/*\n                        \t\t设置html根元素font-size的大小，\n                        \t\t通常设置为设计稿宽度/10（设计稿尺寸通常为375或750）\n                        \t */\n                            rootValue: 16, \n                            unitPrecision: 5, // 转换后的小数保留位数\n                            replace: true, // 是否替换，默认为true\n                            propList: ['*'], // 需要转换的属性，这里选择转换所有属性\n                            selectorBlackList: ['.ignore'], // 忽略转换的选择器\n                            exclude: /node_modules/i, // 排除node_modules文件夹下的文件\n                            mediaQuery: false, // 是否转换媒体查询中的px\n                            minPixelValue: 2, // 大于或等于2px的才转换\n                        }),\n                    ],\n                },\n            },\n        },\n    },\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n由于更改了配置文件，所以需要重启项目，现在我们在项目中写的样式文件中的 px（.ignore 选择器除外）会自动转换为 rem 单位，还没完，这里因为我们写死了 html 根元素 font-size 的大小，所以不管在什么尺寸的设备上，元素的大小都是一样的，无法做到移动端适配，因此我们需要想办法来动态设置 HTML 元素 font-size 的大小来达到目的。\n\n3、在 src 文件夹下建立 utils 目录，该目录下建立 rem.js 文件，代码如下\n\n// 基准大小，一定要跟上面craco.config.js中rootValue值保持一样\nconst baseSize = 16\n// 设置 rem 函数\nfunction setRem () {\n    // 当前页面宽度相对于 375 宽的缩放比例，可根据自己需要修改，设计稿是多少就是多少。\n    const scale = document.documentElement.clientWidth / 375\n    // 设置页面根节点字体大小\n    document.documentElement.style.fontSize = (baseSize * Math.min(scale, 2)) + 'px'\n}\n// 初始化\nsetRem()\n// 改变窗口大小时重新设置 rem\nwindow.onresize = function () {\n    setRem()\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n4、在项目入口文件 index.js 或 index.tsx 中引入 rem 文件\n\nimport \"./utils/rem\"\n\n\n1\n\n\n至此，相关配置均已完成，重启项目，就可以愉快地玩耍了",normalizedContent:"在项目中经常会遇到需要适配移动端的情况，而适配移动端有许多解决方案，如百分比、em、rem、vw、弹性布局等等，这里介绍的是使用 rem 方案，rem 是一个相对单位，相对的是 html 根元素 font-size 的大小。简单来说就是我们给 html 根元素设置一个 font-size，这个值是多少，那就相当于 1rem 等于多少。这就涉及到频繁的换算，将设计稿的 px 转换成 rem，那么如何实现自动转换呢？就是我们直接按设计稿来写，然后会自动将之转换为 rem，无需手动去计算。答案当然是有的，这里使用了插件 postcss-pxtorem\n\n1、安装 postcss-pxtorem\n\nnpm install postcss-pxtorem --save-dev\n\n\n1\n\n\n2、在 craco.config.js 配置文件中添加如下配置：\n\nmodule.exports = {\n\t......\n    style: {\n        postcss: {\n            mode: 'extends',\n            loaderoptions: {\n                postcssoptions: {\n                    ident: 'postcss',\n                    plugins: [\n                        require('postcss-pxtorem')({\n                        \t/*\n                        \t\t设置html根元素font-size的大小，\n                        \t\t通常设置为设计稿宽度/10（设计稿尺寸通常为375或750）\n                        \t */\n                            rootvalue: 16, \n                            unitprecision: 5, // 转换后的小数保留位数\n                            replace: true, // 是否替换，默认为true\n                            proplist: ['*'], // 需要转换的属性，这里选择转换所有属性\n                            selectorblacklist: ['.ignore'], // 忽略转换的选择器\n                            exclude: /node_modules/i, // 排除node_modules文件夹下的文件\n                            mediaquery: false, // 是否转换媒体查询中的px\n                            minpixelvalue: 2, // 大于或等于2px的才转换\n                        }),\n                    ],\n                },\n            },\n        },\n    },\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n由于更改了配置文件，所以需要重启项目，现在我们在项目中写的样式文件中的 px（.ignore 选择器除外）会自动转换为 rem 单位，还没完，这里因为我们写死了 html 根元素 font-size 的大小，所以不管在什么尺寸的设备上，元素的大小都是一样的，无法做到移动端适配，因此我们需要想办法来动态设置 html 元素 font-size 的大小来达到目的。\n\n3、在 src 文件夹下建立 utils 目录，该目录下建立 rem.js 文件，代码如下\n\n// 基准大小，一定要跟上面craco.config.js中rootvalue值保持一样\nconst basesize = 16\n// 设置 rem 函数\nfunction setrem () {\n    // 当前页面宽度相对于 375 宽的缩放比例，可根据自己需要修改，设计稿是多少就是多少。\n    const scale = document.documentelement.clientwidth / 375\n    // 设置页面根节点字体大小\n    document.documentelement.style.fontsize = (basesize * math.min(scale, 2)) + 'px'\n}\n// 初始化\nsetrem()\n// 改变窗口大小时重新设置 rem\nwindow.onresize = function () {\n    setrem()\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n4、在项目入口文件 index.js 或 index.tsx 中引入 rem 文件\n\nimport \"./utils/rem\"\n\n\n1\n\n\n至此，相关配置均已完成，重启项目，就可以愉快地玩耍了",charsets:{cjk:!0}},{title:"React Native之安卓应用保存图片到相册",frontmatter:{title:"React Native之安卓应用保存图片到相册",date:"2025-05-28T11:15:37.000Z",permalink:"/pages/1b0979/",categories:["React Native"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/02.React%20Native/06.React%20Native%E4%B9%8B%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E7%9B%B8%E5%86%8C.html",relativePath:"《React》笔记/02.React Native/06.React Native之保存图片到相册.md",key:"v-d7e22d48",path:"/pages/1b0979/",headers:[{level:3,title:"1、保存本地图片到相册（类似：file://...）",slug:"_1、保存本地图片到相册-类似-file",normalizedTitle:"1、保存本地图片到相册（类似：file://...）",charIndex:1827},{level:3,title:"2、保存网络图片到相册",slug:"_2、保存网络图片到相册",normalizedTitle:"2、保存网络图片到相册",charIndex:2514},{level:3,title:"3、保存base64格式的图片到相册",slug:"_3、保存base64格式的图片到相册",normalizedTitle:"3、保存 base64 格式的图片到相册",charIndex:3769}],lastUpdated:"6/13/2025, 4:49:21 PM",lastUpdatedTimestamp:1749804561e3,headersStr:"1、保存本地图片到相册（类似：file://...） 2、保存网络图片到相册 3、保存base64格式的图片到相册",content:"最近在研究 React Native，想着能不能像安卓那样也封装方法便于随时调用。\n\n在保存图片的时候又分了好几种情况，比如保存本地图片到相册、保存网络图片到相册、保存 base64 格式的图片到相册。\n\n保存本地图片相对简单，直接使用 @react-native-camera-roll/camera-roll 这个插件就行。保存网络图片和 base64 格式的图片需要先下载图片，然后再进行保存操作。\n\n最初使用 react-native-fs 这个插件，然而在经过一天多的折腾之后，选择放弃了，不知道是版本不兼容还是哪里的问题，也查询过很多资料，都试过之后还是莫名报错，哪怕我只是引入该插件，然后打印一下结果也会报错，TypeError: Cannot read property 'RNFSFileTypeRegular' of null 错误。\n\n一番折腾无果后，最后选择了 react-native-blob-util 这个插件，特此记录下踩坑的过程。\n\n不管是哪种方式的保存，都需要先获取权限才行。因此，这里简单封装一下获取权限的方法:\n\n在 src/utils 下建立 imageUtils.js 文件，代码如下：\n\nimport { Alert, Linking, PermissionsAndroid } from 'react-native';\n\nasync function requestStoragePermission() {\n  try {\n    const result = await PermissionsAndroid.request(\n      PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,\n      {\n        title: '存储权限请求',\n        message: '应用需要访问相册以保存图片',\n        buttonNeutral: '稍后询问',\n        buttonNegative: '取消',\n        buttonPositive: '确定',\n      }\n    );\n\n    return {\n      granted: result === PermissionsAndroid.RESULTS.GRANTED,\n      neverAskAgain: result === PermissionsAndroid.RESULTS.NEVER_ASK_AGAIN,\n    };\n  } catch (err) {\n    console.warn('权限请求异常:', err);\n    return { granted: false, neverAskAgain: false };\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n获取权限时还得考虑用户拒绝的情况，因此，在拒绝后，二次点击时需要引导用户去设置页开启权限，因此，上面的文件中还得加一个引导弹窗的方法:\n\n// 显示前往设置的引导弹窗\nfunction showPermissionGuideAlert() {\n  Alert.alert(\n    '需要存储权限',\n    '请在设置中开启存储权限以继续使用该功能(也可能是媒体和文件访问权限)',\n    [\n      {\n        text: '取消',\n        style: 'cancel',\n      },\n      {\n        text: '前往设置',\n        onPress: () => {\n          // 打开应用设置页面\n          Linking.openSettings().catch(() => {\n            Alert.alert('无法打开设置页面，请手动前往系统设置');\n          });\n        },\n      },\n    ]\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n准备工作做完了，现在开始分三种情况来考虑：\n\n\n# 1、保存本地图片到相册（类似：file://...）\n\nimport { CameraRoll } from '@react-native-camera-roll/camera-roll';\n\nexport async function saveLocalImage(localFilePath) {\n  try {\n    const { granted, neverAskAgain } = await requestStoragePermission();\n\n    if (!granted) {\n      if (neverAskAgain) {\n        showPermissionGuideAlert();\n      } else {\n        Alert.alert('权限被拒绝', '需要存储权限来保存图片');\n      }\n      return;\n    }\n\n    await CameraRoll.saveAsset(localFilePath, { type: 'photo' });\n    Alert.alert('保存成功', '图片已保存到相册');\n  } catch (error) {\n    console.error('保存本地图片失败:', error);\n    Alert.alert('保存失败', error.message || '未知错误');\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 2、保存网络图片到相册\n\nconst RNBlobUtil = require('react-native-blob-util').default;\n\nexport async function saveNetworkImage ( imageUrl ) {\n  try {\n    const { granted, neverAskAgain } = await requestStoragePermission();\n\n    if (!granted) {\n      if (neverAskAgain) {\n        showPermissionGuideAlert();\n      } else {\n        Alert.alert('权限被拒绝', '需要存储权限来保存图片');\n      }\n      return;\n    }\n\n    // 创建临时文件路径\n    const fileName = imageUrl.split('/').pop() || `image_${Date.now()}.jpg`;\n    const { fs } = RNBlobUtil;\n    const cacheDir = fs.dirs.CacheDir;\n    const filePath = `${ cacheDir }/${ fileName }`;\n\n    // 下载图片\n    const response = await RNBlobUtil.config({\n      fileCache: true,\n      path: filePath,\n    } ).fetch( 'GET', imageUrl );\n\n    // 检查下载状态\n    if (response.info().status !== 200) {\n      throw new Error(`下载失败，状态码: ${response.info().status}`);\n    }\n    await CameraRoll.saveAsset( `file://${ filePath }`, { type: 'photo' } );\n    // 清理临时文件\n    await fs.unlink(filePath);\n    Alert.alert('保存成功', '图片已保存到相册');\n  } catch (error) {\n    console.error('保存网络图片失败:', error);\n    Alert.alert('保存失败', error.message || '未知错误');\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n\n# 3、保存 base64 格式的图片到相册\n\nexport async function saveBase64Image ( base64String, fileName ) {\n  try {\n    const { granted, neverAskAgain } = await requestStoragePermission();\n\n    if (!granted) {\n      if (neverAskAgain) {\n        showPermissionGuideAlert();\n      } else {\n        Alert.alert('权限被拒绝', '需要存储权限来保存图片');\n      }\n      return;\n    }\n\n    let processedBase64 = base64String;\n    if (base64String.startsWith('data:image')) {\n      // 如果是完整的Data URL格式，提取实际的Base64部分\n      processedBase64 = base64String.split(',')[1];\n    }\n\n    // 创建临时文件路径\n    const actualFilename = fileName || `base64_image_${Date.now()}.jpg`;\n    const cacheDir = RNBlobUtil.fs.dirs.CacheDir;\n    const filePath = `${cacheDir}/${actualFilename}`;\n\n    // 将Base64数据写入文件\n    await RNBlobUtil.fs.writeFile(filePath, processedBase64, 'base64');\n\n    // 保存到相册\n    await CameraRoll.saveAsset(`file://${filePath}`, { type: 'photo' });\n\n    // 清理临时文件\n    await RNBlobUtil.fs.unlink(filePath);\n\n    Alert.alert('保存成功', '图片已保存到相册');\n  } catch (error) {\n    console.error('保存Base64图片失败:', error);\n    Alert.alert('保存失败', error.message || '未知错误');\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n然后在其他地方就可以使用了。\n\nimport { StyleSheet, Text, TouchableOpacity, View, Alert } from 'react-native';\nimport { saveNetworkImage, saveBase64Image } from '../utils/imageUtils';\n\nexport default function DemoScreen () {\n\tconst handleSaveNetworkImage = async () => {\n\t  const imageUrl = 'https://qcloud.dpfile.com/pc/TrdZpLN1zkXDV4oN2FH98LdVnvHj694NKQu0_KA3ul4eYxZWRPQ7CJuw-PqyZBS4.jpg';\n\t  const result = await saveNetworkImage( imageUrl );\n\n\t  Alert.alert(\n\t    result.success ? '成功' : '失败',\n\t    result.message\n\t  );\n\t};\n\n\treturn (\n\t\t<TouchableOpacity style={[styles.btnWrapper]} onPress={handleSaveNetworkImage}>\n\t\t  <Text style={[styles.btnText]}>保存到相册</Text>\n\t\t</TouchableOpacity>\n\t)\n}\n\nconst styles = StyleSheet.create( {\n  btnWrapper: {\n    marginTop: 20,\n    padding: 10,\n    borderRadius: 5,\n    backgroundColor: '#007bff',\n  },\n  btnText: {\n    color: '#fff',\n  },\n} );\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\nsrc/utils/imageUtils.js 文件完整代码：\n\nimport { Alert, Linking, PermissionsAndroid, Platform } from 'react-native';\nimport { CameraRoll } from '@react-native-camera-roll/camera-roll';\nconst RNBlobUtil = require('react-native-blob-util').default;\n\nasync function requestStoragePermission() {\n  try {\n    const result = await PermissionsAndroid.request(\n      PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,\n      {\n        title: '存储权限请求',\n        message: '应用需要访问相册以保存图片',\n        buttonNeutral: '稍后询问',\n        buttonNegative: '取消',\n        buttonPositive: '确定',\n      }\n    );\n\n    return {\n      granted: result === PermissionsAndroid.RESULTS.GRANTED,\n      neverAskAgain: result === PermissionsAndroid.RESULTS.NEVER_ASK_AGAIN,\n    };\n  } catch (err) {\n    console.warn('权限请求异常:', err);\n    return { granted: false, neverAskAgain: false };\n  }\n}\n\n// 显示前往设置的引导弹窗\nfunction showPermissionGuideAlert() {\n  Alert.alert(\n    '需要存储权限',\n    '请在设置中开启存储权限以继续使用该功能\\n\\n' +\n    '操作步骤:\\n' +\n    '1. 点击\"前往设置\"\\n' +\n    '2. 找到\"权限\"或\"应用权限\"\\n' +\n    '3. 开启\"存储\"或\"文件和媒体\"权限',\n    [\n      {\n        text: '取消',\n        style: 'cancel',\n      },\n      {\n        text: '前往设置',\n        onPress: () => {\n          // 打开应用设置页面\n          Linking.openSettings().catch(() => {\n            Alert.alert('无法打开设置页面，请手动前往系统设置');\n          });\n        },\n      },\n    ]\n  );\n}\n\n// 保存本地图片到相册\nexport async function saveLocalImage(localFilePath) {\n  try {\n    const { granted, neverAskAgain } = await requestStoragePermission();\n\n    if (!granted) {\n      if (neverAskAgain) {\n        showPermissionGuideAlert();\n      } else {\n        Alert.alert('权限被拒绝', '需要存储权限来保存图片');\n      }\n      return;\n    }\n\n    await CameraRoll.saveAsset(localFilePath, { type: 'photo' });\n    Alert.alert('保存成功', '图片已保存到相册');\n  } catch (error) {\n    console.error('保存本地图片失败:', error);\n    Alert.alert('保存失败', error.message || '未知错误');\n  }\n}\n\n// 保存网络图片到相册\nexport async function saveNetworkImage ( imageUrl ) {\n  try {\n    const { granted, neverAskAgain } = await requestStoragePermission();\n\n    if (!granted) {\n      if (neverAskAgain) {\n        showPermissionGuideAlert();\n      } else {\n        Alert.alert('权限被拒绝', '需要存储权限来保存图片');\n      }\n      return;\n    }\n\n    // 创建临时文件路径\n    const fileName = imageUrl.split('/').pop() || `image_${Date.now()}.jpg`;\n    const { fs } = RNBlobUtil;\n    const cacheDir = fs.dirs.CacheDir;\n    const filePath = `${ cacheDir }/${ fileName }`;\n\n    // 下载图片\n    const response = await RNBlobUtil.config({\n      fileCache: true,\n      path: filePath,\n    } ).fetch( 'GET', imageUrl );\n\n    // 检查下载状态\n    if (response.info().status !== 200) {\n      throw new Error(`下载失败，状态码: ${response.info().status}`);\n    }\n    await CameraRoll.saveAsset( `file://${ filePath }`, { type: 'photo' } );\n    // 清理临时文件\n    await fs.unlink(filePath);\n    Alert.alert('保存成功', '图片已保存到相册');\n  } catch (error) {\n    console.error('保存网络图片失败:', error);\n    Alert.alert('保存失败', error.message || '未知错误');\n  }\n}\n\n// 保存Base64格式图片到相册\nexport async function saveBase64Image ( base64String, fileName ) {\n  try {\n    const { granted, neverAskAgain } = await requestStoragePermission();\n\n    if (!granted) {\n      if (neverAskAgain) {\n        showPermissionGuideAlert();\n      } else {\n        Alert.alert('权限被拒绝', '需要存储权限来保存图片');\n      }\n      return;\n    }\n\n    // 确保base64数据格式正确\n    let processedBase64 = base64String;\n    if (base64String.startsWith('data:image')) {\n      // 如果是完整的Data URL格式，提取实际的Base64部分\n      processedBase64 = base64String.split(',')[1];\n    }\n\n    // 创建临时文件路径\n    const actualFilename = fileName || `base64_image_${Date.now()}.jpg`;\n    const cacheDir = RNBlobUtil.fs.dirs.CacheDir;\n    const filePath = `${cacheDir}/${actualFilename}`;\n\n    // 将Base64数据写入文件\n    await RNBlobUtil.fs.writeFile(filePath, processedBase64, 'base64');\n\n    // 保存到相册\n    await CameraRoll.saveAsset(`file://${filePath}`, { type: 'photo' });\n\n    // 清理临时文件\n    await RNBlobUtil.fs.unlink(filePath);\n\n    Alert.alert('保存成功', '图片已保存到相册');\n  } catch (error) {\n    console.error('保存Base64图片失败:', error);\n    Alert.alert('保存失败', error.message || '未知错误');\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n",normalizedContent:"最近在研究 react native，想着能不能像安卓那样也封装方法便于随时调用。\n\n在保存图片的时候又分了好几种情况，比如保存本地图片到相册、保存网络图片到相册、保存 base64 格式的图片到相册。\n\n保存本地图片相对简单，直接使用 @react-native-camera-roll/camera-roll 这个插件就行。保存网络图片和 base64 格式的图片需要先下载图片，然后再进行保存操作。\n\n最初使用 react-native-fs 这个插件，然而在经过一天多的折腾之后，选择放弃了，不知道是版本不兼容还是哪里的问题，也查询过很多资料，都试过之后还是莫名报错，哪怕我只是引入该插件，然后打印一下结果也会报错，typeerror: cannot read property 'rnfsfiletyperegular' of null 错误。\n\n一番折腾无果后，最后选择了 react-native-blob-util 这个插件，特此记录下踩坑的过程。\n\n不管是哪种方式的保存，都需要先获取权限才行。因此，这里简单封装一下获取权限的方法:\n\n在 src/utils 下建立 imageutils.js 文件，代码如下：\n\nimport { alert, linking, permissionsandroid } from 'react-native';\n\nasync function requeststoragepermission() {\n  try {\n    const result = await permissionsandroid.request(\n      permissionsandroid.permissions.write_external_storage,\n      {\n        title: '存储权限请求',\n        message: '应用需要访问相册以保存图片',\n        buttonneutral: '稍后询问',\n        buttonnegative: '取消',\n        buttonpositive: '确定',\n      }\n    );\n\n    return {\n      granted: result === permissionsandroid.results.granted,\n      neveraskagain: result === permissionsandroid.results.never_ask_again,\n    };\n  } catch (err) {\n    console.warn('权限请求异常:', err);\n    return { granted: false, neveraskagain: false };\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n获取权限时还得考虑用户拒绝的情况，因此，在拒绝后，二次点击时需要引导用户去设置页开启权限，因此，上面的文件中还得加一个引导弹窗的方法:\n\n// 显示前往设置的引导弹窗\nfunction showpermissionguidealert() {\n  alert.alert(\n    '需要存储权限',\n    '请在设置中开启存储权限以继续使用该功能(也可能是媒体和文件访问权限)',\n    [\n      {\n        text: '取消',\n        style: 'cancel',\n      },\n      {\n        text: '前往设置',\n        onpress: () => {\n          // 打开应用设置页面\n          linking.opensettings().catch(() => {\n            alert.alert('无法打开设置页面，请手动前往系统设置');\n          });\n        },\n      },\n    ]\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n准备工作做完了，现在开始分三种情况来考虑：\n\n\n# 1、保存本地图片到相册（类似：file://...）\n\nimport { cameraroll } from '@react-native-camera-roll/camera-roll';\n\nexport async function savelocalimage(localfilepath) {\n  try {\n    const { granted, neveraskagain } = await requeststoragepermission();\n\n    if (!granted) {\n      if (neveraskagain) {\n        showpermissionguidealert();\n      } else {\n        alert.alert('权限被拒绝', '需要存储权限来保存图片');\n      }\n      return;\n    }\n\n    await cameraroll.saveasset(localfilepath, { type: 'photo' });\n    alert.alert('保存成功', '图片已保存到相册');\n  } catch (error) {\n    console.error('保存本地图片失败:', error);\n    alert.alert('保存失败', error.message || '未知错误');\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 2、保存网络图片到相册\n\nconst rnblobutil = require('react-native-blob-util').default;\n\nexport async function savenetworkimage ( imageurl ) {\n  try {\n    const { granted, neveraskagain } = await requeststoragepermission();\n\n    if (!granted) {\n      if (neveraskagain) {\n        showpermissionguidealert();\n      } else {\n        alert.alert('权限被拒绝', '需要存储权限来保存图片');\n      }\n      return;\n    }\n\n    // 创建临时文件路径\n    const filename = imageurl.split('/').pop() || `image_${date.now()}.jpg`;\n    const { fs } = rnblobutil;\n    const cachedir = fs.dirs.cachedir;\n    const filepath = `${ cachedir }/${ filename }`;\n\n    // 下载图片\n    const response = await rnblobutil.config({\n      filecache: true,\n      path: filepath,\n    } ).fetch( 'get', imageurl );\n\n    // 检查下载状态\n    if (response.info().status !== 200) {\n      throw new error(`下载失败，状态码: ${response.info().status}`);\n    }\n    await cameraroll.saveasset( `file://${ filepath }`, { type: 'photo' } );\n    // 清理临时文件\n    await fs.unlink(filepath);\n    alert.alert('保存成功', '图片已保存到相册');\n  } catch (error) {\n    console.error('保存网络图片失败:', error);\n    alert.alert('保存失败', error.message || '未知错误');\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n\n# 3、保存 base64 格式的图片到相册\n\nexport async function savebase64image ( base64string, filename ) {\n  try {\n    const { granted, neveraskagain } = await requeststoragepermission();\n\n    if (!granted) {\n      if (neveraskagain) {\n        showpermissionguidealert();\n      } else {\n        alert.alert('权限被拒绝', '需要存储权限来保存图片');\n      }\n      return;\n    }\n\n    let processedbase64 = base64string;\n    if (base64string.startswith('data:image')) {\n      // 如果是完整的data url格式，提取实际的base64部分\n      processedbase64 = base64string.split(',')[1];\n    }\n\n    // 创建临时文件路径\n    const actualfilename = filename || `base64_image_${date.now()}.jpg`;\n    const cachedir = rnblobutil.fs.dirs.cachedir;\n    const filepath = `${cachedir}/${actualfilename}`;\n\n    // 将base64数据写入文件\n    await rnblobutil.fs.writefile(filepath, processedbase64, 'base64');\n\n    // 保存到相册\n    await cameraroll.saveasset(`file://${filepath}`, { type: 'photo' });\n\n    // 清理临时文件\n    await rnblobutil.fs.unlink(filepath);\n\n    alert.alert('保存成功', '图片已保存到相册');\n  } catch (error) {\n    console.error('保存base64图片失败:', error);\n    alert.alert('保存失败', error.message || '未知错误');\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n然后在其他地方就可以使用了。\n\nimport { stylesheet, text, touchableopacity, view, alert } from 'react-native';\nimport { savenetworkimage, savebase64image } from '../utils/imageutils';\n\nexport default function demoscreen () {\n\tconst handlesavenetworkimage = async () => {\n\t  const imageurl = 'https://qcloud.dpfile.com/pc/trdzpln1zkxdv4on2fh98ldvnvhj694nkqu0_ka3ul4eyxzwrpq7cjuw-pqyzbs4.jpg';\n\t  const result = await savenetworkimage( imageurl );\n\n\t  alert.alert(\n\t    result.success ? '成功' : '失败',\n\t    result.message\n\t  );\n\t};\n\n\treturn (\n\t\t<touchableopacity style={[styles.btnwrapper]} onpress={handlesavenetworkimage}>\n\t\t  <text style={[styles.btntext]}>保存到相册</text>\n\t\t</touchableopacity>\n\t)\n}\n\nconst styles = stylesheet.create( {\n  btnwrapper: {\n    margintop: 20,\n    padding: 10,\n    borderradius: 5,\n    backgroundcolor: '#007bff',\n  },\n  btntext: {\n    color: '#fff',\n  },\n} );\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\nsrc/utils/imageutils.js 文件完整代码：\n\nimport { alert, linking, permissionsandroid, platform } from 'react-native';\nimport { cameraroll } from '@react-native-camera-roll/camera-roll';\nconst rnblobutil = require('react-native-blob-util').default;\n\nasync function requeststoragepermission() {\n  try {\n    const result = await permissionsandroid.request(\n      permissionsandroid.permissions.write_external_storage,\n      {\n        title: '存储权限请求',\n        message: '应用需要访问相册以保存图片',\n        buttonneutral: '稍后询问',\n        buttonnegative: '取消',\n        buttonpositive: '确定',\n      }\n    );\n\n    return {\n      granted: result === permissionsandroid.results.granted,\n      neveraskagain: result === permissionsandroid.results.never_ask_again,\n    };\n  } catch (err) {\n    console.warn('权限请求异常:', err);\n    return { granted: false, neveraskagain: false };\n  }\n}\n\n// 显示前往设置的引导弹窗\nfunction showpermissionguidealert() {\n  alert.alert(\n    '需要存储权限',\n    '请在设置中开启存储权限以继续使用该功能\\n\\n' +\n    '操作步骤:\\n' +\n    '1. 点击\"前往设置\"\\n' +\n    '2. 找到\"权限\"或\"应用权限\"\\n' +\n    '3. 开启\"存储\"或\"文件和媒体\"权限',\n    [\n      {\n        text: '取消',\n        style: 'cancel',\n      },\n      {\n        text: '前往设置',\n        onpress: () => {\n          // 打开应用设置页面\n          linking.opensettings().catch(() => {\n            alert.alert('无法打开设置页面，请手动前往系统设置');\n          });\n        },\n      },\n    ]\n  );\n}\n\n// 保存本地图片到相册\nexport async function savelocalimage(localfilepath) {\n  try {\n    const { granted, neveraskagain } = await requeststoragepermission();\n\n    if (!granted) {\n      if (neveraskagain) {\n        showpermissionguidealert();\n      } else {\n        alert.alert('权限被拒绝', '需要存储权限来保存图片');\n      }\n      return;\n    }\n\n    await cameraroll.saveasset(localfilepath, { type: 'photo' });\n    alert.alert('保存成功', '图片已保存到相册');\n  } catch (error) {\n    console.error('保存本地图片失败:', error);\n    alert.alert('保存失败', error.message || '未知错误');\n  }\n}\n\n// 保存网络图片到相册\nexport async function savenetworkimage ( imageurl ) {\n  try {\n    const { granted, neveraskagain } = await requeststoragepermission();\n\n    if (!granted) {\n      if (neveraskagain) {\n        showpermissionguidealert();\n      } else {\n        alert.alert('权限被拒绝', '需要存储权限来保存图片');\n      }\n      return;\n    }\n\n    // 创建临时文件路径\n    const filename = imageurl.split('/').pop() || `image_${date.now()}.jpg`;\n    const { fs } = rnblobutil;\n    const cachedir = fs.dirs.cachedir;\n    const filepath = `${ cachedir }/${ filename }`;\n\n    // 下载图片\n    const response = await rnblobutil.config({\n      filecache: true,\n      path: filepath,\n    } ).fetch( 'get', imageurl );\n\n    // 检查下载状态\n    if (response.info().status !== 200) {\n      throw new error(`下载失败，状态码: ${response.info().status}`);\n    }\n    await cameraroll.saveasset( `file://${ filepath }`, { type: 'photo' } );\n    // 清理临时文件\n    await fs.unlink(filepath);\n    alert.alert('保存成功', '图片已保存到相册');\n  } catch (error) {\n    console.error('保存网络图片失败:', error);\n    alert.alert('保存失败', error.message || '未知错误');\n  }\n}\n\n// 保存base64格式图片到相册\nexport async function savebase64image ( base64string, filename ) {\n  try {\n    const { granted, neveraskagain } = await requeststoragepermission();\n\n    if (!granted) {\n      if (neveraskagain) {\n        showpermissionguidealert();\n      } else {\n        alert.alert('权限被拒绝', '需要存储权限来保存图片');\n      }\n      return;\n    }\n\n    // 确保base64数据格式正确\n    let processedbase64 = base64string;\n    if (base64string.startswith('data:image')) {\n      // 如果是完整的data url格式，提取实际的base64部分\n      processedbase64 = base64string.split(',')[1];\n    }\n\n    // 创建临时文件路径\n    const actualfilename = filename || `base64_image_${date.now()}.jpg`;\n    const cachedir = rnblobutil.fs.dirs.cachedir;\n    const filepath = `${cachedir}/${actualfilename}`;\n\n    // 将base64数据写入文件\n    await rnblobutil.fs.writefile(filepath, processedbase64, 'base64');\n\n    // 保存到相册\n    await cameraroll.saveasset(`file://${filepath}`, { type: 'photo' });\n\n    // 清理临时文件\n    await rnblobutil.fs.unlink(filepath);\n\n    alert.alert('保存成功', '图片已保存到相册');\n  } catch (error) {\n    console.error('保存base64图片失败:', error);\n    alert.alert('保存失败', error.message || '未知错误');\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n",charsets:{cjk:!0}},{title:"React Native之打包安卓apk优化",frontmatter:{title:"React Native之打包安卓apk优化",date:"2025-05-23T14:05:23.000Z",permalink:"/pages/1d91bb/",categories:["React Native"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/02.React%20Native/01.React%20Native%E4%B9%8B%E6%89%93%E5%8C%85%E5%AE%89%E5%8D%93apk%E4%BC%98%E5%8C%96.html",relativePath:"《React》笔记/02.React Native/01.React Native之打包安卓apk优化.md",key:"v-25645ad7",path:"/pages/1d91bb/",headers:[{level:2,title:"一、启动代码混淆",slug:"一、启动代码混淆",normalizedTitle:"一、启动代码混淆",charIndex:66},{level:2,title:"二、拆分cpu架构（ABI分包）",slug:"二、拆分cpu架构-abi分包",normalizedTitle:"二、拆分 cpu 架构（abi 分包）",charIndex:541},{level:2,title:"三、启动Hermes引擎",slug:"三、启动hermes引擎",normalizedTitle:"三、启动 hermes 引擎",charIndex:1002},{level:2,title:"四、启用ProGuard",slug:"四、启用proguard",normalizedTitle:"四、启用 proguard",charIndex:1808}],lastUpdated:"6/13/2025, 4:49:21 PM",lastUpdatedTimestamp:1749804561e3,headersStr:"一、启动代码混淆 二、拆分cpu架构（ABI分包） 三、启动Hermes引擎 四、启用ProGuard",content:'在按照 react native 官方文档打包成 apk 文件后，感觉文件有点大。因此想优化一番。\n\n主要是做了以下优化：\n\n\n# 一、启动代码混淆\n\n在 android/app/build.gradle 中配置：\n\nandroid {\n    buildTypes {\n        release {\n            minifyEnabled true   // 启用代码压缩\n            shrinkResources true // 移除未使用的资源\n            signingConfig signingConfigs.debug\n            minifyEnabled enableProguardInReleaseBuilds\n            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"\n            signingConfig signingConfigs.release\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 二、拆分 cpu 架构（ABI 分包）\n\n所谓 ABI 分包是指将传统的构建一个 APK 文件的过程，改为根据不同的硬件架构（如 ARM、x86 等）来构建多个 APK 文件。这种分包处理可以优化应用的兼容性和性能，确保应用能够在不同的硬件上正常运行。\n现代设备大多支持 arm64-v8a，可仅保留主流架构：\n\ndef enableSeparateBuildPerCPUArchitecture = true\n\nandroid {\n    splits {\n        abi {\n            enable true\n            reset()\n            include "arm64-v8a", "x86", "x86_64" // 按需选择\n            universalApk true  // 设置为true将额外生成一个适用不同CPU架构的通用apk\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 三、启动 Hermes 引擎\n\n在 android/app/build.gradle 中启用 Hermes：\n\n1、打开 android/app/build.gradle 文件。\n2、找到 project.ext.react 配置块，将 enableHermes 设置为 true：\n\nproject.ext.react = [\n    enableHermes: true,  // 改为 true\n    // 其他配置...\n]\n\n\n1\n2\n3\n4\n\n\n如果找不到该配置块，直接手动添加以下内容：\n\nproject.ext.react = [\n    enableHermes: true,  // 启用 Hermes\n    bundleInDebug: false,\n    bundleInRelease: true,\n    devDisabledInRelease: true\n]\n\n\n1\n2\n3\n4\n5\n6\n\n\n提示\n\nenableHermes: 布尔值，表示是否启用 Hermes 引擎，这是一个用于提升性能的 JS 引擎，适用于 Android。设为 true 会使用 Hermes 替代 JSC。启用后首次构建时间会变长。\nbundleInDebug: 布尔值，表示是否在 debug 构建中打包 JS Bundle。如果为 true，即使是 Debug 版本也会生成 JS Bundle（一般用于某些调试场景，不建议打开）。\nbundleInRelease: 布尔值，表示是否在 release 构建中打包 JS Bundle。设为 true 是发布应用时必须的，会将 JS Bundle 编译打包进 APK。\ndevDisabledInRelease: 布尔值，设为 true 会关闭 Release 构建中的开发功能（比如开发者菜单、远程调试），保证发布版本更轻量、安全。\n\n\n# 四、启用 ProGuard\n\nProguard 是一个 Java 字节码混淆压缩工具，它可以移除掉 React Native Java（和它的依赖库中）中没有被使用到的部分，最终有效的减少 APK 的大小。\n重要：启用 Proguard 之后，必须再次全面地测试应用\n要启用 Proguard，需要修改 android/app/build.gradle 文件：\n\ndef enableProguardInReleaseBuilds = true\n\n\n1\n\n\n在 android/app/proguard-rules.pro 文件中添加：\n\n-keep class com.facebook.hermes.unicode.** { *; }\n-keep class com.facebook.jni.** { *; }\n\n\n1\n2\n\n\n至此，就可进入 android 文件夹下执行打包操作了\n\n$ cd android\n$ ./gradlew assembleRelease\n\n\n1\n2\n\n\n按照上述操作步骤优化后，打包后会有以下几种结果：\n\nps: 生成的 APK 文件位于 android/app/build/outputs/apk/release/app-release.apk，它已经可以用来发布了。\n\n提示\n\n译注：cd android 表示进入 android 目录（如果你已经在 android 目录中了那就不用输入了）。./gradlew assembleRelease 在 macOS、Linux 或是 windows 的 PowerShell 环境中表示执行当前目录下的名为 gradlew 的脚本文件，且其运行参数为 assembleRelease，注意这个./ 不可省略；而在 windows 的传统 CMD 命令行下则需要去掉./。',normalizedContent:'在按照 react native 官方文档打包成 apk 文件后，感觉文件有点大。因此想优化一番。\n\n主要是做了以下优化：\n\n\n# 一、启动代码混淆\n\n在 android/app/build.gradle 中配置：\n\nandroid {\n    buildtypes {\n        release {\n            minifyenabled true   // 启用代码压缩\n            shrinkresources true // 移除未使用的资源\n            signingconfig signingconfigs.debug\n            minifyenabled enableproguardinreleasebuilds\n            proguardfiles getdefaultproguardfile("proguard-android.txt"), "proguard-rules.pro"\n            signingconfig signingconfigs.release\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 二、拆分 cpu 架构（abi 分包）\n\n所谓 abi 分包是指将传统的构建一个 apk 文件的过程，改为根据不同的硬件架构（如 arm、x86 等）来构建多个 apk 文件。这种分包处理可以优化应用的兼容性和性能，确保应用能够在不同的硬件上正常运行。\n现代设备大多支持 arm64-v8a，可仅保留主流架构：\n\ndef enableseparatebuildpercpuarchitecture = true\n\nandroid {\n    splits {\n        abi {\n            enable true\n            reset()\n            include "arm64-v8a", "x86", "x86_64" // 按需选择\n            universalapk true  // 设置为true将额外生成一个适用不同cpu架构的通用apk\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 三、启动 hermes 引擎\n\n在 android/app/build.gradle 中启用 hermes：\n\n1、打开 android/app/build.gradle 文件。\n2、找到 project.ext.react 配置块，将 enablehermes 设置为 true：\n\nproject.ext.react = [\n    enablehermes: true,  // 改为 true\n    // 其他配置...\n]\n\n\n1\n2\n3\n4\n\n\n如果找不到该配置块，直接手动添加以下内容：\n\nproject.ext.react = [\n    enablehermes: true,  // 启用 hermes\n    bundleindebug: false,\n    bundleinrelease: true,\n    devdisabledinrelease: true\n]\n\n\n1\n2\n3\n4\n5\n6\n\n\n提示\n\nenablehermes: 布尔值，表示是否启用 hermes 引擎，这是一个用于提升性能的 js 引擎，适用于 android。设为 true 会使用 hermes 替代 jsc。启用后首次构建时间会变长。\nbundleindebug: 布尔值，表示是否在 debug 构建中打包 js bundle。如果为 true，即使是 debug 版本也会生成 js bundle（一般用于某些调试场景，不建议打开）。\nbundleinrelease: 布尔值，表示是否在 release 构建中打包 js bundle。设为 true 是发布应用时必须的，会将 js bundle 编译打包进 apk。\ndevdisabledinrelease: 布尔值，设为 true 会关闭 release 构建中的开发功能（比如开发者菜单、远程调试），保证发布版本更轻量、安全。\n\n\n# 四、启用 proguard\n\nproguard 是一个 java 字节码混淆压缩工具，它可以移除掉 react native java（和它的依赖库中）中没有被使用到的部分，最终有效的减少 apk 的大小。\n重要：启用 proguard 之后，必须再次全面地测试应用\n要启用 proguard，需要修改 android/app/build.gradle 文件：\n\ndef enableproguardinreleasebuilds = true\n\n\n1\n\n\n在 android/app/proguard-rules.pro 文件中添加：\n\n-keep class com.facebook.hermes.unicode.** { *; }\n-keep class com.facebook.jni.** { *; }\n\n\n1\n2\n\n\n至此，就可进入 android 文件夹下执行打包操作了\n\n$ cd android\n$ ./gradlew assemblerelease\n\n\n1\n2\n\n\n按照上述操作步骤优化后，打包后会有以下几种结果：\n\nps: 生成的 apk 文件位于 android/app/build/outputs/apk/release/app-release.apk，它已经可以用来发布了。\n\n提示\n\n译注：cd android 表示进入 android 目录（如果你已经在 android 目录中了那就不用输入了）。./gradlew assemblerelease 在 macos、linux 或是 windows 的 powershell 环境中表示执行当前目录下的名为 gradlew 的脚本文件，且其运行参数为 assemblerelease，注意这个./ 不可省略；而在 windows 的传统 cmd 命令行下则需要去掉./。',charsets:{cjk:!0}},{title:"Redis 字符串(String)",frontmatter:{title:"Redis 字符串(String)",date:"2023-12-13T11:08:18.000Z",permalink:"/pages/b3075a/",categories:["《Redis》"],tags:[null]},regularPath:"/%E3%80%8ARedis%E3%80%8B%E7%AC%94%E8%AE%B0/01.Redis/02.Redis%20%E5%AD%97%E7%AC%A6%E4%B8%B2(String).html",relativePath:"《Redis》笔记/01.Redis/02.Redis 字符串(String).md",key:"v-ae666c46",path:"/pages/b3075a/",lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:null,content:"常用命令：\n\n// 设置指定key的值\nSET key value\n\n// 读取指定key的值\nGET key\n\n// 获取key中字符串值的子字符\nGETRANGE key start end\n\n// 获取所有（一个或多个）给定key的值\nMGET key1 key2 key3\n\n// 设置一个或多个key-value对\nMSET key1 value1 key2 value2 key3 value3\n\n/* \n同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在，\n当所有 key 都成功设置，返回 1 。 如果所有给定 key 都设置失败(至少有一个 key 已经存在)，那么返回 0 。\n*/\nMSETNX key1 value1 key2 value2 key3 value3\n\n// 为指定的 key 设置值及其过期时间。如果 key 已经存在， SETEX命令将会替换旧的值，timeout以秒为单位\nSETEX key timeout value\n\n// 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位\nPSETEX key milliseconds value\n\n// 只有在key不存在时设置key的值，如果key已存在，则不会改变\nSETNX key value\n\n// 返回key所存储的字符串值的长度\nSTRLEN key\n\n// 将 key 中储存的数字值增一。\nINCR key\n\n// 将 key 所储存的值加上给定的增量值（increment）。\nINCRBY key increment\n\n// 将 key 中储存的数字值减一。\nDECR key\n\n// key 所储存的值减去给定的减量值（decrement） \nDECRBY key decrement\n\n// 如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。 \nAPPEND key value\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n使用 redis 命令客户端获取 key 时会存在中文乱码问题。\n\n解决办法：要在 redis-cli 后面加上 --raw\n\nredis-cli --raw\n\n\n1\n",normalizedContent:"常用命令：\n\n// 设置指定key的值\nset key value\n\n// 读取指定key的值\nget key\n\n// 获取key中字符串值的子字符\ngetrange key start end\n\n// 获取所有（一个或多个）给定key的值\nmget key1 key2 key3\n\n// 设置一个或多个key-value对\nmset key1 value1 key2 value2 key3 value3\n\n/* \n同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在，\n当所有 key 都成功设置，返回 1 。 如果所有给定 key 都设置失败(至少有一个 key 已经存在)，那么返回 0 。\n*/\nmsetnx key1 value1 key2 value2 key3 value3\n\n// 为指定的 key 设置值及其过期时间。如果 key 已经存在， setex命令将会替换旧的值，timeout以秒为单位\nsetex key timeout value\n\n// 这个命令和 setex 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 setex 命令那样，以秒为单位\npsetex key milliseconds value\n\n// 只有在key不存在时设置key的值，如果key已存在，则不会改变\nsetnx key value\n\n// 返回key所存储的字符串值的长度\nstrlen key\n\n// 将 key 中储存的数字值增一。\nincr key\n\n// 将 key 所储存的值加上给定的增量值（increment）。\nincrby key increment\n\n// 将 key 中储存的数字值减一。\ndecr key\n\n// key 所储存的值减去给定的减量值（decrement） \ndecrby key decrement\n\n// 如果 key 已经存在并且是一个字符串， append 命令将指定的 value 追加到该 key 原来值（value）的末尾。 \nappend key value\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n使用 redis 命令客户端获取 key 时会存在中文乱码问题。\n\n解决办法：要在 redis-cli 后面加上 --raw\n\nredis-cli --raw\n\n\n1\n",charsets:{cjk:!0}},{title:"Express+Redis使用",frontmatter:{title:"Express+Redis使用",date:"2023-12-13T17:55:28.000Z",permalink:"/pages/8080fa/",categories:["《Redis》"],tags:[null]},regularPath:"/%E3%80%8ARedis%E3%80%8B%E7%AC%94%E8%AE%B0/01.Redis/03.Express+Redis%E4%BD%BF%E7%94%A8.html",relativePath:"《Redis》笔记/01.Redis/03.Express+Redis使用.md",key:"v-fecec612",path:"/pages/8080fa/",lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:null,content:"最近，看同事在 Express 中使用了 Redis，在好奇心的驱使下，我也学习了下，特此记录下。\n\n1、在项目中安装 redis\n\nnpm install redis\n\n\n1\n\n\n2、新建 redis 配置文件，redisUtils.js\n\nconst redis = require(\"redis\")\n\n// 生成redis的client，此处为4.x版本写法\nconst redisClient = redis.createClient({\n\t/* \n\t  * redis://[[username][:password]@][host][:port][/db-number]\n\t  * 写密码redis://:123456@127.0.0.1:6379/0 \n\t  * 写用户redis://uername@127.0.0.1:6379/0  \n\t  * 或者不写密码 redis://127.0.0.1:6379/0\n\t  * 或者不写db_number redis://:127.0.0.1:6379\n\t  * \n  */\n  url: \"redis://127.0.0.1:6379/0\"\n});\n\n// 如果redis版本为3.x，那么写法如下\n// const redisClient = redis.createClient(port, 'ip', {auth_pass: \"password\"})\n\n\nredisClient.on('ready', () => {\n    console.log('redis is ready...')\n})\n\nredisClient.on('error', err => {\n    console.log(err)\n})\n\nredisClient.connect()   // 连接\n\n\n// 存储值\nconst setValue = (key, value) => {\n  if (typeof value === 'string') {\n    redisClient.set(key, value)\n  } else if (typeof value === 'object') {\n    for (let item in value) {\n      redisClient.hmset(key, item, value[item], redis.print)\n    }\n  }\n}\n\n// 获取string\nconst getValue = (key) => {\n  return new Promise((resolve, reject) => {\n    redisClient.get(key).then(res => {\n      resolve(res)\n    }).catch(err => {\n      reject(err)\n    })\n  })\n}\n\n\n// 导出\nmodule.exports = {\n  setValue,\n  getValue\n}\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n至此，就可以在需要使用的地方引入该文件，进行使用了。\n\n使用Redis作为缓存在高并发场景下有可能出现以下几个问题\n\n1、缓存击穿：大量的高并发请求同时访问同一个在 redis 中不存在的数据，就会导致大量的请求绕过 redis 同时并发访问数据库，对数据库造成了高并发访问压力。\n\n解决办法：\n\n使用互斥锁：是在缓存失效的时候（判断拿出来的值为空），不是立即去查询数据库，而是先使用 Redis 的 SETNX 去 set 一个互斥 key，当操作返回成功时，再进行 load db 的操作并回设缓存；否则，就重试整个 get 缓存的方法。SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现互斥的效果。\n\n2、缓存穿透：大量的请求一个数据库中不存在的数据，首先在 redis 中无法命中，最终所有的请求都会访问数据库，同样会导致数据库承受巨大的访问压力\n\n(1)、把不存在的 key 设置 null 值到缓存中，并设置过期时间。\n\n(2)、使用布隆过滤器，在查询缓存前先通过布隆过滤器判断 key 是否存在，存在再去查询缓存。\n\n\n设置 null 值可能被恶意针对，攻击者使用大量不存在的不重复 key ，那么方案一就会缓存大量不存在 key 数据。此时我们还可以对 Key 规定格式模板，然后对不存在的 key 做正则规范匹配，如果完全不符合就不用存 null 值到 redis，而是直接返回错误。\n\n\n\n3、缓存雪崩：缓存中大量的数据集中过期，导致请求这些数据的大量的并发请求会同时访问数据库\n\n解决方案：\n\n(1)、将缓存中的数据设置成不同的过期时间\n\n(2)、在访问洪峰到达前缓存热点数据，过期时间设置到流量最低时段",normalizedContent:"最近，看同事在 express 中使用了 redis，在好奇心的驱使下，我也学习了下，特此记录下。\n\n1、在项目中安装 redis\n\nnpm install redis\n\n\n1\n\n\n2、新建 redis 配置文件，redisutils.js\n\nconst redis = require(\"redis\")\n\n// 生成redis的client，此处为4.x版本写法\nconst redisclient = redis.createclient({\n\t/* \n\t  * redis://[[username][:password]@][host][:port][/db-number]\n\t  * 写密码redis://:123456@127.0.0.1:6379/0 \n\t  * 写用户redis://uername@127.0.0.1:6379/0  \n\t  * 或者不写密码 redis://127.0.0.1:6379/0\n\t  * 或者不写db_number redis://:127.0.0.1:6379\n\t  * \n  */\n  url: \"redis://127.0.0.1:6379/0\"\n});\n\n// 如果redis版本为3.x，那么写法如下\n// const redisclient = redis.createclient(port, 'ip', {auth_pass: \"password\"})\n\n\nredisclient.on('ready', () => {\n    console.log('redis is ready...')\n})\n\nredisclient.on('error', err => {\n    console.log(err)\n})\n\nredisclient.connect()   // 连接\n\n\n// 存储值\nconst setvalue = (key, value) => {\n  if (typeof value === 'string') {\n    redisclient.set(key, value)\n  } else if (typeof value === 'object') {\n    for (let item in value) {\n      redisclient.hmset(key, item, value[item], redis.print)\n    }\n  }\n}\n\n// 获取string\nconst getvalue = (key) => {\n  return new promise((resolve, reject) => {\n    redisclient.get(key).then(res => {\n      resolve(res)\n    }).catch(err => {\n      reject(err)\n    })\n  })\n}\n\n\n// 导出\nmodule.exports = {\n  setvalue,\n  getvalue\n}\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n至此，就可以在需要使用的地方引入该文件，进行使用了。\n\n使用redis作为缓存在高并发场景下有可能出现以下几个问题\n\n1、缓存击穿：大量的高并发请求同时访问同一个在 redis 中不存在的数据，就会导致大量的请求绕过 redis 同时并发访问数据库，对数据库造成了高并发访问压力。\n\n解决办法：\n\n使用互斥锁：是在缓存失效的时候（判断拿出来的值为空），不是立即去查询数据库，而是先使用 redis 的 setnx 去 set 一个互斥 key，当操作返回成功时，再进行 load db 的操作并回设缓存；否则，就重试整个 get 缓存的方法。setnx，是「set if not exists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现互斥的效果。\n\n2、缓存穿透：大量的请求一个数据库中不存在的数据，首先在 redis 中无法命中，最终所有的请求都会访问数据库，同样会导致数据库承受巨大的访问压力\n\n(1)、把不存在的 key 设置 null 值到缓存中，并设置过期时间。\n\n(2)、使用布隆过滤器，在查询缓存前先通过布隆过滤器判断 key 是否存在，存在再去查询缓存。\n\n\n设置 null 值可能被恶意针对，攻击者使用大量不存在的不重复 key ，那么方案一就会缓存大量不存在 key 数据。此时我们还可以对 key 规定格式模板，然后对不存在的 key 做正则规范匹配，如果完全不符合就不用存 null 值到 redis，而是直接返回错误。\n\n\n\n3、缓存雪崩：缓存中大量的数据集中过期，导致请求这些数据的大量的并发请求会同时访问数据库\n\n解决方案：\n\n(1)、将缓存中的数据设置成不同的过期时间\n\n(2)、在访问洪峰到达前缓存热点数据，过期时间设置到流量最低时段",charsets:{cjk:!0}},{title:"React Native之路径别名配置",frontmatter:{title:"React Native之路径别名配置",date:"2025-06-26T14:24:27.000Z",permalink:"/pages/2ddb27/",categories:["React Native"],tags:[null]},regularPath:"/%E3%80%8AReact%E3%80%8B%E7%AC%94%E8%AE%B0/02.React%20Native/07.React%20Native%E4%B9%8B%E8%B7%AF%E5%BE%84%E5%88%AB%E5%90%8D%E9%85%8D%E7%BD%AE.html",relativePath:"《React》笔记/02.React Native/07.React Native之路径别名配置.md",key:"v-381ec16a",path:"/pages/2ddb27/",lastUpdated:"8/7/2025, 5:34:41 PM",lastUpdatedTimestamp:1754559281e3,headersStr:null,content:"在开发应用时，经常需要引入各种文件、组件等等，如果不设置路径别名，就很容易出现类似./、../、../../../ 等这种写法，看着相当繁琐，写起来也容易出错，如果需要移动文件时，不更改路径引入就很容易出现问题。如果将这些文件的路径都是相对于项目根目录的设置的话，那么写起来就很容易，也不易出错了。\n\n1、在 metro.config.js 中配置如下：\n\nconst { getDefaultConfig, mergeConfig } = require( '@react-native/metro-config' );\nconst path = require( 'path' );\n\n/**\n * Metro configuration\n * https://reactnative.dev/docs/metro\n *\n * @type {import('@react-native/metro-config').MetroConfig}\n */\nconst config = {\n  resolver: {\n    alias: {\n      '@': path.resolve( __dirname, 'src' ),\n      '@src': path.resolve( __dirname, 'src' ),\n      '@navigation': path.resolve( __dirname, 'src/navigation' ),\n      '@components': path.resolve(__dirname, 'src/components'),\n      '@assets': path.resolve( __dirname, 'src/assets' ),\n      '@screens': path.resolve( __dirname, 'src/screens' ),\n      '@utils': path.resolve(__dirname, 'src/utils'),\n    },\n  },\n};\n\nmodule.exports = mergeConfig(getDefaultConfig(__dirname), config);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n2、安装 babel-plugin-module-resolver 插件（npm install --save-dev babel-plugin-module-resolver），并在 babel.config.js 中配置如下：\n\nmodule.exports = {\n  presets: [ 'module:@react-native/babel-preset' ],\n  plugins: [\n    [\n      'module-resolver',\n      {\n        extensions: [ '.tsx', '.ts', '.js', '.json' ],\n        alias: {\n          '@': './src',\n          '@src': './src',\n          '@navigation': './src/navigation',\n          '@components': './src/components',\n          '@assets': './src/assets',\n          '@screens': './src/screens',\n          '@utils': './src/utils',\n        },\n      },\n    ],\n  ],\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n现在重启项目即可使用路径别名了，不用再使用丑陋的../../ 这种写法了。\n\n注意：\n\n * Babel 配置：是为了确保代码转换阶段正确处理别名\n * Metro 配置：是为了确保模块解析阶段正确处理别名",normalizedContent:"在开发应用时，经常需要引入各种文件、组件等等，如果不设置路径别名，就很容易出现类似./、../、../../../ 等这种写法，看着相当繁琐，写起来也容易出错，如果需要移动文件时，不更改路径引入就很容易出现问题。如果将这些文件的路径都是相对于项目根目录的设置的话，那么写起来就很容易，也不易出错了。\n\n1、在 metro.config.js 中配置如下：\n\nconst { getdefaultconfig, mergeconfig } = require( '@react-native/metro-config' );\nconst path = require( 'path' );\n\n/**\n * metro configuration\n * https://reactnative.dev/docs/metro\n *\n * @type {import('@react-native/metro-config').metroconfig}\n */\nconst config = {\n  resolver: {\n    alias: {\n      '@': path.resolve( __dirname, 'src' ),\n      '@src': path.resolve( __dirname, 'src' ),\n      '@navigation': path.resolve( __dirname, 'src/navigation' ),\n      '@components': path.resolve(__dirname, 'src/components'),\n      '@assets': path.resolve( __dirname, 'src/assets' ),\n      '@screens': path.resolve( __dirname, 'src/screens' ),\n      '@utils': path.resolve(__dirname, 'src/utils'),\n    },\n  },\n};\n\nmodule.exports = mergeconfig(getdefaultconfig(__dirname), config);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n2、安装 babel-plugin-module-resolver 插件（npm install --save-dev babel-plugin-module-resolver），并在 babel.config.js 中配置如下：\n\nmodule.exports = {\n  presets: [ 'module:@react-native/babel-preset' ],\n  plugins: [\n    [\n      'module-resolver',\n      {\n        extensions: [ '.tsx', '.ts', '.js', '.json' ],\n        alias: {\n          '@': './src',\n          '@src': './src',\n          '@navigation': './src/navigation',\n          '@components': './src/components',\n          '@assets': './src/assets',\n          '@screens': './src/screens',\n          '@utils': './src/utils',\n        },\n      },\n    ],\n  ],\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n现在重启项目即可使用路径别名了，不用再使用丑陋的../../ 这种写法了。\n\n注意：\n\n * babel 配置：是为了确保代码转换阶段正确处理别名\n * metro 配置：是为了确保模块解析阶段正确处理别名",charsets:{cjk:!0}},{title:"Redis与MySQL的区别以及搭配使用",frontmatter:{title:"Redis与MySQL的区别以及搭配使用",date:"2023-12-15T11:08:21.000Z",permalink:"/pages/6b2dfb/",categories:["《Redis》"],tags:[null]},regularPath:"/%E3%80%8ARedis%E3%80%8B%E7%AC%94%E8%AE%B0/01.Redis/05.Redis%E4%B8%8EMySQL%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E6%90%AD%E9%85%8D%E4%BD%BF%E7%94%A8.html",relativePath:"《Redis》笔记/01.Redis/05.Redis与MySQL的区别以及搭配使用.md",key:"v-1507f304",path:"/pages/6b2dfb/",lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:null,content:"区别：\n\n1、Redis 是非关系型数据库。MySQL 是关系型数据库。\n\n2、Redis 用于存储较为频繁的数据到缓存中，读取速度快。MySQL 则用于持久化的存储数据到硬盘，功能强大但速度较慢。\n\n\nRedis 与 MySQL 搭配使用流程一般是这样的：\n\n1、请求数据时，先走 Redis。\n\n2、如果 Redis 缓存中没有的话，再去 MySQL 数据库中查询，返回数据。\n\n3、将从数据库中查询到的数据缓存到 Redis 中。\n\n4、再次请求数据时，从 Redis 缓存中读取数据，直接返回。\n\n5、当有数据更新时，更新数据库中数据的同时，及时更新 Redis 中的数据\n\n\n由于 Redis 是一种缓存数据库，用于提高用户访问速度，因此需要定时清理 Redis 缓存中的数据与数据库中数据同步，当有数据更新时，及时将更新的数据缓存到 Redis 中，保持一致性\n\nRedis 与 MySQL 配合使用优点：\n\n1、提高数据访问效率\n\n将常用的数据缓存到 Redis 中，能够快速响应用户请求，减轻 MySQL 的压力。同时，利用 Redis 的集合操作能够高效地对数据进行排序、计数、求并集、求交集等操作。\n\n2、降低系统负载\n\n利用 Redis 的高速缓存特性，能够充分利用系统资源，降低 MySQL 的负载并减少对 MySQL 的访问次数。\n\n3、提高系统扩展性\n\n通过将 Redis 和 MySQL 分别部署在不同的服务器上，能够提高系统的扩展性和可维护性。通过增加 Redis 缓存服务器和 MySQL 数据库服务器的数量，能够从容应对访问量的增加。\n\n4、提高数据安全性\n\n将敏感数据存储到 MySQL 数据库中，防止被恶意篡改或泄露；将常用的数据缓存到 Redis 中，设置一个较短的生存时间并定期清理，有效地降低数据泄露和被攻击的风险。",normalizedContent:"区别：\n\n1、redis 是非关系型数据库。mysql 是关系型数据库。\n\n2、redis 用于存储较为频繁的数据到缓存中，读取速度快。mysql 则用于持久化的存储数据到硬盘，功能强大但速度较慢。\n\n\nredis 与 mysql 搭配使用流程一般是这样的：\n\n1、请求数据时，先走 redis。\n\n2、如果 redis 缓存中没有的话，再去 mysql 数据库中查询，返回数据。\n\n3、将从数据库中查询到的数据缓存到 redis 中。\n\n4、再次请求数据时，从 redis 缓存中读取数据，直接返回。\n\n5、当有数据更新时，更新数据库中数据的同时，及时更新 redis 中的数据\n\n\n由于 redis 是一种缓存数据库，用于提高用户访问速度，因此需要定时清理 redis 缓存中的数据与数据库中数据同步，当有数据更新时，及时将更新的数据缓存到 redis 中，保持一致性\n\nredis 与 mysql 配合使用优点：\n\n1、提高数据访问效率\n\n将常用的数据缓存到 redis 中，能够快速响应用户请求，减轻 mysql 的压力。同时，利用 redis 的集合操作能够高效地对数据进行排序、计数、求并集、求交集等操作。\n\n2、降低系统负载\n\n利用 redis 的高速缓存特性，能够充分利用系统资源，降低 mysql 的负载并减少对 mysql 的访问次数。\n\n3、提高系统扩展性\n\n通过将 redis 和 mysql 分别部署在不同的服务器上，能够提高系统的扩展性和可维护性。通过增加 redis 缓存服务器和 mysql 数据库服务器的数量，能够从容应对访问量的增加。\n\n4、提高数据安全性\n\n将敏感数据存储到 mysql 数据库中，防止被恶意篡改或泄露；将常用的数据缓存到 redis 中，设置一个较短的生存时间并定期清理，有效地降低数据泄露和被攻击的风险。",charsets:{cjk:!0}},{title:"Redis key命令",frontmatter:{title:"Redis key命令",date:"2023-12-14T10:19:07.000Z",permalink:"/pages/fcc805/",categories:["《Redis》"],tags:[null]},regularPath:"/%E3%80%8ARedis%E3%80%8B%E7%AC%94%E8%AE%B0/01.Redis/04.Redis%20key%E5%91%BD%E4%BB%A4.html",relativePath:"《Redis》笔记/01.Redis/04.Redis key命令.md",key:"v-08a1cbcd",path:"/pages/fcc805/",lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:null,content:"// 在 key 存在时删除 key\nDEL key\n\n\n// 检查给定 key 是否存在。\nEXISTS key\n\n\n// 为给定 key 设置过期时间，以秒计。\nEXPIRE key seconds\n\n\n// 设置 key 的过期时间以毫秒计。\nPEXPIRE key milliseconds\n\n\n// 查找所有符合给定模式( pattern)的 key 。\nKEYS pattern\n\n\n/* \n\t该命令表示将当前数据库的 key 移动到给定的数据库 db 当中。\n\t移动成功返回 1 ，失败则返回 0 。 # redis默认使用数据库 0\n\t移动一个不存在的key时会失败；当源数据库和目标数据库有相同的 key 时，也会移动失败\n*/\nMOVE key db\n\n\n/* \n\t移除 key 的过期时间，使key永不过期。\n\t当过期时间移除成功时，返回 1 。 如果key不存在或 key 没有设置过期时间，返回 0 。\n*/\nPERSIST key\n\n\n/* \n\t以毫秒为单位返回 key 的剩余的过期时间。\n\t 当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以毫秒为单位，返回 key 的剩余生存时间。\n\t注意：在 Redis 2.8 以前，当 key 不存在，或者 key 没有设置剩余生存时间时，命令都返回 -1 。\n*/\nPTTL key\n\n\n/*\n\t以秒为单位，返回给定 key 的剩余生存时间(time to live简称ttl)\n\t当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以秒为单位，返回 key 的剩余生存时间。\n\t注意：在 Redis 2.8 以前，当 key 不存在，或者 key 没有设置剩余生存时间时，命令都返回 -1 。\n */\nTTL key\n\n\n/*\n\t从当前数据库中随机返回一个 key 。\n\t当数据库不为空时，返回一个 key 。 当数据库为空时，返回 nil （windows 系统返回 null）。  \n*/\nRANDOMKEY\n\n\n/*\n\t修改 key 的名称，改名成功时提示 OK ，失败时候返回一个错误。\n\t当 OLD_KEY_NAME 和 NEW_KEY_NAME 相同，或者 OLD_KEY_NAME 不存在时，返回一个错误。 \n\t当 NEW_KEY_NAME 已经存在时， RENAME 命令将覆盖旧key，并且newkey的值是旧key的值。 \n */ \nRENAME key newkey\n\n\n/*\n\t仅当 newkey 不存在时，将 key 改名为 newkey 。\n\t修改成功时，返回 1 。 如果 NEW_KEY_NAME 已经存在，返回 0 。\n */\nRENAMENX key newkey\n\n\n/*\n\t返回 key 所储存的值的类型。数据类型有： \n\tnone (key不存在)\n\tstring (字符串)\n\tlist (列表)\n\tset (集合)\n\tzset (有序集)\n\thash (哈希表)\n */\nTYPE key\n\n\n// 删除当前数据库所有 key\nFLUSHDB\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n",normalizedContent:"// 在 key 存在时删除 key\ndel key\n\n\n// 检查给定 key 是否存在。\nexists key\n\n\n// 为给定 key 设置过期时间，以秒计。\nexpire key seconds\n\n\n// 设置 key 的过期时间以毫秒计。\npexpire key milliseconds\n\n\n// 查找所有符合给定模式( pattern)的 key 。\nkeys pattern\n\n\n/* \n\t该命令表示将当前数据库的 key 移动到给定的数据库 db 当中。\n\t移动成功返回 1 ，失败则返回 0 。 # redis默认使用数据库 0\n\t移动一个不存在的key时会失败；当源数据库和目标数据库有相同的 key 时，也会移动失败\n*/\nmove key db\n\n\n/* \n\t移除 key 的过期时间，使key永不过期。\n\t当过期时间移除成功时，返回 1 。 如果key不存在或 key 没有设置过期时间，返回 0 。\n*/\npersist key\n\n\n/* \n\t以毫秒为单位返回 key 的剩余的过期时间。\n\t 当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以毫秒为单位，返回 key 的剩余生存时间。\n\t注意：在 redis 2.8 以前，当 key 不存在，或者 key 没有设置剩余生存时间时，命令都返回 -1 。\n*/\npttl key\n\n\n/*\n\t以秒为单位，返回给定 key 的剩余生存时间(time to live简称ttl)\n\t当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以秒为单位，返回 key 的剩余生存时间。\n\t注意：在 redis 2.8 以前，当 key 不存在，或者 key 没有设置剩余生存时间时，命令都返回 -1 。\n */\nttl key\n\n\n/*\n\t从当前数据库中随机返回一个 key 。\n\t当数据库不为空时，返回一个 key 。 当数据库为空时，返回 nil （windows 系统返回 null）。  \n*/\nrandomkey\n\n\n/*\n\t修改 key 的名称，改名成功时提示 ok ，失败时候返回一个错误。\n\t当 old_key_name 和 new_key_name 相同，或者 old_key_name 不存在时，返回一个错误。 \n\t当 new_key_name 已经存在时， rename 命令将覆盖旧key，并且newkey的值是旧key的值。 \n */ \nrename key newkey\n\n\n/*\n\t仅当 newkey 不存在时，将 key 改名为 newkey 。\n\t修改成功时，返回 1 。 如果 new_key_name 已经存在，返回 0 。\n */\nrenamenx key newkey\n\n\n/*\n\t返回 key 所储存的值的类型。数据类型有： \n\tnone (key不存在)\n\tstring (字符串)\n\tlist (列表)\n\tset (集合)\n\tzset (有序集)\n\thash (哈希表)\n */\ntype key\n\n\n// 删除当前数据库所有 key\nflushdb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n",charsets:{cjk:!0}},{title:"element ui之图片上传到阿里云oss上",frontmatter:{title:"element ui之图片上传到阿里云oss上",date:"2023-03-02T16:34:09.000Z",permalink:"/pages/3a53e1/",categories:["Vue2"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/01.Vue2/03.element%20ui%E4%B9%8B%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91oss%E4%B8%8A.html",relativePath:"《Vue》笔记/01.Vue2/03.element ui之图片上传到阿里云oss上.md",key:"v-4690c124",path:"/pages/3a53e1/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"今天在使用 element ui 中 Upload 组件上传图片到阿里云 oss 上折腾了许久，一直被官网 demo 中的 action 困扰，折腾一番后最后放弃了这种方法，选择了 http-request 这种方法，覆盖默认的上传行为，自定义上传的实现。\n\n<el-upload\n\tclass=\"link-uploader\"\n\taction\n\t:http-request=\"handleAvatarSuccess\"\n\t:show-file-list=\"false\">\n\t  <img\n      v-if=\"dialogForm.picUrl\"\n      :src=\"dialogForm.picUrl\"\n      class=\"avatar\">\n    <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n</el-upload>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n这里需要先获取 oss 上传签名，获取这种数据\n\n\n\n其次，开始自定义上传方法：\n\nhandleAvatarSuccess (file) {\n  this.toOss(file)\n},\nasync toOss (file) {\n  const request = new FormData()\n  const imgType = file.file.name.split('.')[1]\n  const name = file.file.name.split('.')[0]\n  // 文件名字，可设置路径\n  const imgName = name + this.UUID() + '.' + imgType\n  const imgUrl = `${this.OssParams.host}/${this.OssParams.dir}${imgName}`\n  request.append('key', `${this.OssParams.dir}${imgName}`)\n  // policy规定了请求的表单域的合法性\n  request.append('policy', this.OssParams.policy)\n  request.append('OSSAccessKeyId', this.OssParams.accessId)\n  // 让服务端返回200,不然，默认会返回204\n  request.append('success_action_status', '200')\n  request.append('callback', this.OssParams.callback)\n  request.append('Signature', this.OssParams.signature)\n  // 需要上传的文件filer\n  request.append('name', imgName)\n  request.append('type', file.file.type)\n  request.append('file', file.file)\n  await uploadToOss(this.OssParams.host, request)   // 该方法为封装的发送请求到oss的方法\n  this.dialogForm.giftImg = imgUrl\n},\nUUID () {\n  let d = new Date().getTime()\n  const uuid = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0\n    d = Math.floor(d / 16)\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16)\n  })\n  return uuid\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n这里使用 form 表单的方法上传的，需要注意的是 upload 组件中 action 是必传参数，所以虽然用不到 action 属性，但是还是要保留该属性，否则会报错。",normalizedContent:"今天在使用 element ui 中 upload 组件上传图片到阿里云 oss 上折腾了许久，一直被官网 demo 中的 action 困扰，折腾一番后最后放弃了这种方法，选择了 http-request 这种方法，覆盖默认的上传行为，自定义上传的实现。\n\n<el-upload\n\tclass=\"link-uploader\"\n\taction\n\t:http-request=\"handleavatarsuccess\"\n\t:show-file-list=\"false\">\n\t  <img\n      v-if=\"dialogform.picurl\"\n      :src=\"dialogform.picurl\"\n      class=\"avatar\">\n    <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n</el-upload>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n这里需要先获取 oss 上传签名，获取这种数据\n\n\n\n其次，开始自定义上传方法：\n\nhandleavatarsuccess (file) {\n  this.tooss(file)\n},\nasync tooss (file) {\n  const request = new formdata()\n  const imgtype = file.file.name.split('.')[1]\n  const name = file.file.name.split('.')[0]\n  // 文件名字，可设置路径\n  const imgname = name + this.uuid() + '.' + imgtype\n  const imgurl = `${this.ossparams.host}/${this.ossparams.dir}${imgname}`\n  request.append('key', `${this.ossparams.dir}${imgname}`)\n  // policy规定了请求的表单域的合法性\n  request.append('policy', this.ossparams.policy)\n  request.append('ossaccesskeyid', this.ossparams.accessid)\n  // 让服务端返回200,不然，默认会返回204\n  request.append('success_action_status', '200')\n  request.append('callback', this.ossparams.callback)\n  request.append('signature', this.ossparams.signature)\n  // 需要上传的文件filer\n  request.append('name', imgname)\n  request.append('type', file.file.type)\n  request.append('file', file.file)\n  await uploadtooss(this.ossparams.host, request)   // 该方法为封装的发送请求到oss的方法\n  this.dialogform.giftimg = imgurl\n},\nuuid () {\n  let d = new date().gettime()\n  const uuid = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + math.random() * 16) % 16 | 0\n    d = math.floor(d / 16)\n    return (c === 'x' ? r : (r & 0x3) | 0x8).tostring(16)\n  })\n  return uuid\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n这里使用 form 表单的方法上传的，需要注意的是 upload 组件中 action 是必传参数，所以虽然用不到 action 属性，但是还是要保留该属性，否则会报错。",charsets:{cjk:!0}},{title:"element ui之表格拖拽排序",frontmatter:{title:"element ui之表格拖拽排序",date:"2023-03-02T16:54:37.000Z",permalink:"/pages/109b92/",categories:["Vue2"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/01.Vue2/04.element%20ui%E4%B9%8B%E8%A1%A8%E6%A0%BC%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F.html",relativePath:"《Vue》笔记/01.Vue2/04.element ui之表格拖拽排序.md",key:"v-34bd4ee4",path:"/pages/109b92/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'最近有这样一个需求，就是需要拖拽表格里的数据进行排序，由于 element ui 中 table 组件自身并不具有拖拽功能，所以这里借助第三方插件 sortablejs 来实现此功能。\n\nSortableJS 是一款功能强大的 js 拖拽库，是基于原生 HTML5 中的拖放 api，不依赖 jQuery 等其他框架，并且支持多种框架（angular、vue、react）等。\n\n\n1、安装 SortableJS\n\nnpm install sortablejs -S\n\n\n1\n\n\n2、在需要使用拖拽功能的页面引入该插件。\n\nimport Sortable from \'sortablejs\'\n\n\n1\n\n\n3、实现该拖拽功能：\n\nhandleDrop () {\n  const tbody = document.querySelector(\'.el-table__body-wrapper tbody\')\n  const that = this\n  that.sortable && that.sortable.destroy()\n  that.sortable = Sortable.create(tbody, {\n    onEnd ({ newIndex, oldIndex }) {\n      const currRow = that.tableData.splice(oldIndex, 1)[0]\n      that.tableData.splice(newIndex, 0, currRow)\n      //   拖动后获取newIdex\n      const arr = Array.from(that.tableData)\n      that.apiObjDrag = arr.map((item, index) => {\n        return {\n          giftId: item.giftId,\n          sort: index + 1\n        }\n      })\n      // 发请求将该数据传递给服务端即可\n    }\n  })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n4、在 mounted 生命周期中执行该方法。\n\nmounted () {\n  this.$nextTick(() => {\n    this.handleDrop()\n  })\n}\n\n\n1\n2\n3\n4\n5\n\n\n注意：el-table 中必须指定 row-key，row-key 必须是唯一的，如 ID，不然会出现排序不对的情况，不可用 index，因为拖拽后 index 会变，会有问题。\n\n<el-table\n  ref="multipleTable"\n  border\n  size="mini"\n  :data="tableData"\n  row-key="giftId"\n  tooltip-effect="dark"\n  style="width: 100%">\n  <el-table-column\n    prop="giftId"\n    label="礼物ID"\n    width="70"\n    align="center">\n  </el-table-column>\n  <el-table-column\n    prop="name"\n    label="礼物名称"\n    align="center">\n  </el-table-column>\n</el-table>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',normalizedContent:'最近有这样一个需求，就是需要拖拽表格里的数据进行排序，由于 element ui 中 table 组件自身并不具有拖拽功能，所以这里借助第三方插件 sortablejs 来实现此功能。\n\nsortablejs 是一款功能强大的 js 拖拽库，是基于原生 html5 中的拖放 api，不依赖 jquery 等其他框架，并且支持多种框架（angular、vue、react）等。\n\n\n1、安装 sortablejs\n\nnpm install sortablejs -s\n\n\n1\n\n\n2、在需要使用拖拽功能的页面引入该插件。\n\nimport sortable from \'sortablejs\'\n\n\n1\n\n\n3、实现该拖拽功能：\n\nhandledrop () {\n  const tbody = document.queryselector(\'.el-table__body-wrapper tbody\')\n  const that = this\n  that.sortable && that.sortable.destroy()\n  that.sortable = sortable.create(tbody, {\n    onend ({ newindex, oldindex }) {\n      const currrow = that.tabledata.splice(oldindex, 1)[0]\n      that.tabledata.splice(newindex, 0, currrow)\n      //   拖动后获取newidex\n      const arr = array.from(that.tabledata)\n      that.apiobjdrag = arr.map((item, index) => {\n        return {\n          giftid: item.giftid,\n          sort: index + 1\n        }\n      })\n      // 发请求将该数据传递给服务端即可\n    }\n  })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n4、在 mounted 生命周期中执行该方法。\n\nmounted () {\n  this.$nexttick(() => {\n    this.handledrop()\n  })\n}\n\n\n1\n2\n3\n4\n5\n\n\n注意：el-table 中必须指定 row-key，row-key 必须是唯一的，如 id，不然会出现排序不对的情况，不可用 index，因为拖拽后 index 会变，会有问题。\n\n<el-table\n  ref="multipletable"\n  border\n  size="mini"\n  :data="tabledata"\n  row-key="giftid"\n  tooltip-effect="dark"\n  style="width: 100%">\n  <el-table-column\n    prop="giftid"\n    label="礼物id"\n    width="70"\n    align="center">\n  </el-table-column>\n  <el-table-column\n    prop="name"\n    label="礼物名称"\n    align="center">\n  </el-table-column>\n</el-table>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',charsets:{cjk:!0}},{title:"vue动态添加路由后刷新页面白屏问题",frontmatter:{title:"vue动态添加路由后刷新页面白屏问题",date:"2023-09-21T10:12:12.000Z",permalink:"/pages/289945/",categories:["Vue2"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/01.Vue2/05.vue%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1%E5%90%8E%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%E7%99%BD%E5%B1%8F%E9%97%AE%E9%A2%98.html",relativePath:"《Vue》笔记/01.Vue2/05.vue动态添加路由后刷新页面白屏问题.md",key:"v-7da5161e",path:"/pages/289945/",headers:[{level:2,title:"1、动态添加路由用到的API：",slug:"_1、动态添加路由用到的api",normalizedTitle:"1、动态添加路由用到的 api：",charIndex:94},{level:3,title:"1、router.addRoute()",slug:"_1、router-addroute",normalizedTitle:"1、router.addroute()",charIndex:115},{level:3,title:"2、router.getRoutes()",slug:"_2、router-getroutes",normalizedTitle:"2、router.getroutes()",charIndex:396},{level:2,title:"2、在全局前置守卫中动态添加路由",slug:"_2、在全局前置守卫中动态添加路由",normalizedTitle:"2、在全局前置守卫中动态添加路由",charIndex:444}],lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:"1、动态添加路由用到的API： 1、router.addRoute() 2、router.getRoutes() 2、在全局前置守卫中动态添加路由",content:"在做后台管理的时候，经常会遇到这种需求，就是路由权限的问题，而在做路由权限的时候，由于不同角色，比如管理员、普通用户等所能看到的页面是不一样的，因此就存在需要动态添加路由的问题。\n\n\n# 1、动态添加路由用到的 API：\n\n\n# 1、router.addRoute()\n\n该 API 有两种用法\n\n// 添加一条新路由规则。如果该路由规则有 name，并且已经存在一个与之相同的名字，则会覆盖它。\nrouter.addRoute(route: RouteConfig): () => void\n\n// 添加一条新的路由规则记录作为现有路由的子路由。如果该路由规则有 name，并且已经存在一个与之相同的名字，则会覆盖它。\nrouter.addRoute(parentName: string, route: RouteConfig): () => void\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2、router.getRoutes()\n\n该 API 表示获取所有活跃的路由记录列表\n\n\n# 2、在全局前置守卫中动态添加路由\n\nrouter.beforeEach((to, from, next) => {\n\t...\n\trouter.addRoute(routes)   // routers表示需要动态添加的守卫，如果需要添加多个，则需要遍历下，分别执行addRoute方法\n\tnext()\n})\n\n\n1\n2\n3\n4\n5\n\n\n这样就完了吗？当然不是，因为这样确实能添加成功，也能访问，但是如果刷新页面的话，会发现白屏，导致这个问题的原因是，刷新时，当前访问的路由还没有存入到路由相信中，也就是 router 中，我们就开始访问它，此时当然是白屏。\n解决的办法是等路由加载完毕，再开始跳转\n\nrouter.beforeEach((to, from, next) => {\n\t...\n\trouter.addRoute(routes)   // routers表示需要动态添加的守卫，如果需要添加多个，则需要遍历下，分别执行addRoute方法\n\tnext({ ...to })   // 很关键的一步\n})\n\n\n1\n2\n3\n4\n5\n\n\nps：这里有几点需要注意的地方：\n\n1、动态添加路由时使用 addRoute () 方法，如果同时添加多条路由，需要遍历路由，然后分别执行 addRoute () 方法，addRoutes () 方法已废弃。\n\n2、在动态添加路由的时候，需要做好判断，比如初始化一个变量为 false，当变量为 false 时，执行动态添加路由后，然后将该变量改为 true，否则会一直重复添加路由，导致报错。\n\n3、动态添加路由时，需要等路由加载完，然后执行 next () 方法，否则刷新页面会白屏，关键代码 next ({ ...to})",normalizedContent:"在做后台管理的时候，经常会遇到这种需求，就是路由权限的问题，而在做路由权限的时候，由于不同角色，比如管理员、普通用户等所能看到的页面是不一样的，因此就存在需要动态添加路由的问题。\n\n\n# 1、动态添加路由用到的 api：\n\n\n# 1、router.addroute()\n\n该 api 有两种用法\n\n// 添加一条新路由规则。如果该路由规则有 name，并且已经存在一个与之相同的名字，则会覆盖它。\nrouter.addroute(route: routeconfig): () => void\n\n// 添加一条新的路由规则记录作为现有路由的子路由。如果该路由规则有 name，并且已经存在一个与之相同的名字，则会覆盖它。\nrouter.addroute(parentname: string, route: routeconfig): () => void\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2、router.getroutes()\n\n该 api 表示获取所有活跃的路由记录列表\n\n\n# 2、在全局前置守卫中动态添加路由\n\nrouter.beforeeach((to, from, next) => {\n\t...\n\trouter.addroute(routes)   // routers表示需要动态添加的守卫，如果需要添加多个，则需要遍历下，分别执行addroute方法\n\tnext()\n})\n\n\n1\n2\n3\n4\n5\n\n\n这样就完了吗？当然不是，因为这样确实能添加成功，也能访问，但是如果刷新页面的话，会发现白屏，导致这个问题的原因是，刷新时，当前访问的路由还没有存入到路由相信中，也就是 router 中，我们就开始访问它，此时当然是白屏。\n解决的办法是等路由加载完毕，再开始跳转\n\nrouter.beforeeach((to, from, next) => {\n\t...\n\trouter.addroute(routes)   // routers表示需要动态添加的守卫，如果需要添加多个，则需要遍历下，分别执行addroute方法\n\tnext({ ...to })   // 很关键的一步\n})\n\n\n1\n2\n3\n4\n5\n\n\nps：这里有几点需要注意的地方：\n\n1、动态添加路由时使用 addroute () 方法，如果同时添加多条路由，需要遍历路由，然后分别执行 addroute () 方法，addroutes () 方法已废弃。\n\n2、在动态添加路由的时候，需要做好判断，比如初始化一个变量为 false，当变量为 false 时，执行动态添加路由后，然后将该变量改为 true，否则会一直重复添加路由，导致报错。\n\n3、动态添加路由时，需要等路由加载完，然后执行 next () 方法，否则刷新页面会白屏，关键代码 next ({ ...to})",charsets:{cjk:!0}},{title:"vue项目安装依赖报错",frontmatter:{title:"vue项目安装依赖报错",date:"2024-05-24T15:59:33.000Z",permalink:"/pages/2e5ed7/",categories:["Vue2"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/01.Vue2/06.vue%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%8A%A5%E9%94%99.html",relativePath:"《Vue》笔记/01.Vue2/06.vue安装依赖报错.md",key:"v-5cf9b43e",path:"/pages/2e5ed7/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"好久没有手动从头开始搭建一个新项目了，最近从头搭建一个项目，安装 vant 时报如下错误\n\n\n从报错信息看，是因为 eslint-plugin-vue 与 @vue/eslint-config-standard 版本不兼容导致的。\n\n这里有两种解决办法：\n\n1、通过 --force 或 --legacy-peer-deps 命令来强制安装，能安装成功，但是可能会导致未知错误。\n\nnpm install vant -S --force  \n// 或 npm install vant -S --legacy-peer-deps\n\n\n1\n2\n\n\n2、按报错的信息来看，可以降级 eslint-plugin-vue 的版本来解决。\n\n在 package.json 中可以看到 @vue/eslint-config-standard 的版本是 6.1.0，而 eslint-plugin-vue 的版本是 8.0.3，从报错信息看，与之对应的 eslint-plugin-vue 版本是 7.0.0，因此可以将 eslint-plugin-vue 降级到 7.0 版本\n\nnpm install eslint-plugin-vue@7.0.0 -D\n\n\n1\n\n\n现在重新安装 vant 版本发现是可以解决问题的",normalizedContent:"好久没有手动从头开始搭建一个新项目了，最近从头搭建一个项目，安装 vant 时报如下错误\n\n\n从报错信息看，是因为 eslint-plugin-vue 与 @vue/eslint-config-standard 版本不兼容导致的。\n\n这里有两种解决办法：\n\n1、通过 --force 或 --legacy-peer-deps 命令来强制安装，能安装成功，但是可能会导致未知错误。\n\nnpm install vant -s --force  \n// 或 npm install vant -s --legacy-peer-deps\n\n\n1\n2\n\n\n2、按报错的信息来看，可以降级 eslint-plugin-vue 的版本来解决。\n\n在 package.json 中可以看到 @vue/eslint-config-standard 的版本是 6.1.0，而 eslint-plugin-vue 的版本是 8.0.3，从报错信息看，与之对应的 eslint-plugin-vue 版本是 7.0.0，因此可以将 eslint-plugin-vue 降级到 7.0 版本\n\nnpm install eslint-plugin-vue@7.0.0 -d\n\n\n1\n\n\n现在重新安装 vant 版本发现是可以解决问题的",charsets:{cjk:!0}},{title:"Redis 哈希(hash)",frontmatter:{title:"Redis 哈希(hash)",date:"2024-01-02T11:15:31.000Z",permalink:"/pages/e7f710/",categories:["《Redis》"],tags:[null]},regularPath:"/%E3%80%8ARedis%E3%80%8B%E7%AC%94%E8%AE%B0/01.Redis/06.Redis%20%E5%93%88%E5%B8%8C(hash).html",relativePath:"《Redis》笔记/01.Redis/06.Redis 哈希(hash).md",key:"v-1be43b76",path:"/pages/e7f710/",lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:null,content:"Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。\n\nRedis 中每个 hash 可以存储 232 - 1 键值对（40 多亿）。\n\nRedis hash 命令\n\n/* \n\t将哈希表 key 中的字段 field 的值设为 value 。\n\t如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。\n\t如果字段已经存在于哈希表中，旧值将被覆盖。 \n\t如果字段是哈希表中的一个新建字段,值设置成功,返回 1。如果哈希表中域字段已经存在且旧值已被新值覆盖,返回 0\n*/\nHSET key field value\n\n\n/*\n\t获取存储在哈希表中指定字段的值。\n\t返回给定字段的值。如果给定的字段或 key 不存在时，返回 nil 。 \n*/\nHGET key field\n\n\n/*\n\t获取所有给定字段的值\n\t如果指定的字段不存在于哈希表，那么返回一个 nil 值。 \n\t一个包含多个给定字段关联值的表，表值的排列顺序和指定字段的请求顺序一样。 \n*/\nHMGET key field1 [field2]\n\n\n/*\n\t同时将多个 field-value (域-值)对设置到哈希表 key 中。\n\t此命令会覆盖哈希表中已存在的字段。\n\t如果哈希表不存在，会创建一个空哈希表，并执行 HMSET 操作。 \n*/\nHMSET key field1 value1 [field2 value2 ]\n\n\n/*\n\t获取在哈希表中指定 key 的所有字段和值\n\t在返回值里，紧跟每个字段名(field name)之后是字段的值(value)\n\t以列表形式返回哈希表的字段及字段值。 若 key 不存在，返回空列表。 \n*/\nHGETALL key\n\n\n/*\n\t查看哈希表 key 中，指定的字段是否存在。\n\t如果哈希表含有给定字段，返回 1 。 如果哈希表不含有给定字段，或 key 不存在，返回 0 。 \n*/\nHEXISTS key field\n\n\n/*\n\t只有在字段 field 不存在时，设置哈希表字段的值。\n\t如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。\n\t如果字段已经存在于哈希表中，操作无效。\n\t如果 key 不存在，一个新哈希表被创建并执行 HSETNX 命令。 \n\t设置成功，返回 1 。 如果给定字段已经存在且没有操作被执行，返回 0 。 \n*/\nHSETNX key field value\n\n\n/*\n\t获取哈希表中的所有字段,当 key 不存在时，返回一个空列表\n*/\nHKEYS key\n\n\n/*\n\t获取哈希表中所有值。\n*/\nHVALS key\n\n\n/*\n\t获取哈希表中字段的数量， 当 key 不存在时，返回 0 。 \n*/\nHLEN key\n\n\n/*\n\t删除一个或多个哈希表字段,不存在的字段将被忽略。 \n\t返回被成功删除字段的数量，不包括被忽略的字段。 \n*/\nHDEL key field1 [field2]\n\n\n/*\n\t为哈希表 key 中的指定字段的整数值加上增量 increment 。\n\t增量也可以为负数，相当于对指定字段进行减法操作。\n\t如果哈希表的 key 不存在，一个新的哈希表被创建并执行 HINCRBY 命令。\n\t如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。\n\t对一个储存字符串值的字段执行 HINCRBY 命令将造成一个错误。 \n*/\nHINCRBY key field increment\n\n\n\n/*\n\t为哈希表 key 中的指定字段的浮点数值加上增量 increment 。\n\t如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。 \n\t返回执行命令之后的值\n*/\nHINCRBYFLOAT key field increment\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n",normalizedContent:"redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。\n\nredis 中每个 hash 可以存储 232 - 1 键值对（40 多亿）。\n\nredis hash 命令\n\n/* \n\t将哈希表 key 中的字段 field 的值设为 value 。\n\t如果哈希表不存在，一个新的哈希表被创建并进行 hset 操作。\n\t如果字段已经存在于哈希表中，旧值将被覆盖。 \n\t如果字段是哈希表中的一个新建字段,值设置成功,返回 1。如果哈希表中域字段已经存在且旧值已被新值覆盖,返回 0\n*/\nhset key field value\n\n\n/*\n\t获取存储在哈希表中指定字段的值。\n\t返回给定字段的值。如果给定的字段或 key 不存在时，返回 nil 。 \n*/\nhget key field\n\n\n/*\n\t获取所有给定字段的值\n\t如果指定的字段不存在于哈希表，那么返回一个 nil 值。 \n\t一个包含多个给定字段关联值的表，表值的排列顺序和指定字段的请求顺序一样。 \n*/\nhmget key field1 [field2]\n\n\n/*\n\t同时将多个 field-value (域-值)对设置到哈希表 key 中。\n\t此命令会覆盖哈希表中已存在的字段。\n\t如果哈希表不存在，会创建一个空哈希表，并执行 hmset 操作。 \n*/\nhmset key field1 value1 [field2 value2 ]\n\n\n/*\n\t获取在哈希表中指定 key 的所有字段和值\n\t在返回值里，紧跟每个字段名(field name)之后是字段的值(value)\n\t以列表形式返回哈希表的字段及字段值。 若 key 不存在，返回空列表。 \n*/\nhgetall key\n\n\n/*\n\t查看哈希表 key 中，指定的字段是否存在。\n\t如果哈希表含有给定字段，返回 1 。 如果哈希表不含有给定字段，或 key 不存在，返回 0 。 \n*/\nhexists key field\n\n\n/*\n\t只有在字段 field 不存在时，设置哈希表字段的值。\n\t如果哈希表不存在，一个新的哈希表被创建并进行 hset 操作。\n\t如果字段已经存在于哈希表中，操作无效。\n\t如果 key 不存在，一个新哈希表被创建并执行 hsetnx 命令。 \n\t设置成功，返回 1 。 如果给定字段已经存在且没有操作被执行，返回 0 。 \n*/\nhsetnx key field value\n\n\n/*\n\t获取哈希表中的所有字段,当 key 不存在时，返回一个空列表\n*/\nhkeys key\n\n\n/*\n\t获取哈希表中所有值。\n*/\nhvals key\n\n\n/*\n\t获取哈希表中字段的数量， 当 key 不存在时，返回 0 。 \n*/\nhlen key\n\n\n/*\n\t删除一个或多个哈希表字段,不存在的字段将被忽略。 \n\t返回被成功删除字段的数量，不包括被忽略的字段。 \n*/\nhdel key field1 [field2]\n\n\n/*\n\t为哈希表 key 中的指定字段的整数值加上增量 increment 。\n\t增量也可以为负数，相当于对指定字段进行减法操作。\n\t如果哈希表的 key 不存在，一个新的哈希表被创建并执行 hincrby 命令。\n\t如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。\n\t对一个储存字符串值的字段执行 hincrby 命令将造成一个错误。 \n*/\nhincrby key field increment\n\n\n\n/*\n\t为哈希表 key 中的指定字段的浮点数值加上增量 increment 。\n\t如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。 \n\t返回执行命令之后的值\n*/\nhincrbyfloat key field increment\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n",charsets:{cjk:!0}},{title:"vue项目使用postcss-pxtorem来实现移动端适配",frontmatter:{title:"vue项目使用postcss-pxtorem来实现移动端适配",date:"2024-05-24T16:24:38.000Z",permalink:"/pages/1cca7c/",categories:["Vue2"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/01.Vue2/07.vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8postcss-pxtorem%E6%9D%A5%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D.html",relativePath:"《Vue》笔记/01.Vue2/07.vue项目使用postcss-pxtorem来实现移动端适配.md",key:"v-205e5ac6",path:"/pages/1cca7c/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'上篇说到了 React 项目中使用 postcss-pxtorem 实现移动端适配，这不，想着在 vue 中应该是一样的，所以全盘挪了过来，发现不太行，折腾了一番，发现写法有些不太一样。\n\n1、安装 postcss-pxtorem\n\nnpm install postcss-pxtorem -D\n\n\n1\n\n\n2、在 vue.config.js 配置文件中配置如下\n\nconst { defineConfig } = require(\'@vue/cli-service\')\nmodule.exports = defineConfig({\n  transpileDependencies: true,\n  css: {\n    loaderOptions: {\n      // less-loader 5的配置\n      less: {\n        javascriptEnabled: true\n      },\n\n      // less-loader 8的配置\n      // less: {\n      //   lessOptions: {\n      //     javascriptEnabled: true\n      //   }\n      // }\n\n      // 如果是@vue/cli-service 5配置如下\n      postcss: {\n        postcssOptions: {\n          plugins: [\n            require(\'postcss-pxtorem\')({\n              rootValue: 16,\n              unitPrecision: 5, // 转换后的小数保留位数\n              replace: true, // 是否替换，默认为true\n              propList: [\'*\'], // 需要转换的属性，这里选择转换所有属性\n              selectorBlackList: [\'.ignore-\'], // 忽略转换的选择器\n              exclude: /node_modules/i, // 排除node_modules文件夹下的文件\n              mediaQuery: false, // 是否转换媒体查询中的px\n              minPixelValue: 2 // 大于或等于2px的才转换\n            })\n          ]\n        }\n      },\n\n      // @vue/cli-service 4配置如下\n      // postcss: {\n      //   plugins: [\n      //     require("postcss-pxtorem")({\n      //       rootValue: 16, // 换算的基数\n      //       propList: ["*"], // 需要转换的属性，这里选择全部都转\n      //       selectorBlackList: [".ignore-"], // 要忽略的类名\n      //       minPixelValue: 2, // 设置最小的转换数值，如果为 1，只有newValue大于1，才会被转换\n      //       mediaQuery: false,\n      //       exclude: /node_modules/,\n      //       replace: true,\n      //       unitPrecision: 5\n      //     })\n      //   ]\n      // }\n    }\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n在默认配置基础上，增加 css 包裹的这一块配置代码。\n\n如果按 @vue/cli-service 4 配置的那样报如下错误信息：Error: PostCSS plugin postcss-pxtorem requires PostCSS 8.\nMigration guide for end-users\n\n这是因为安装的 postcss-pxtorem 版本是 6.x 的，需要依赖 postcss 8。\n\n解决办法：\n\n方法 1、安装 postcss 可解决\n\nnpm install postcss -D\n\n\n1\n\n\n方法 2、降级 postcss-pxtorem 版本到 5.x 即可解决\n\nnpm install postcss-pxtorem@5 -D\n\n\n1\n\n\n到这里我们就可以在项目中所写的 px 单位会自动转换成 rem 为单位，但是并不能实现不同尺寸的设备自适应，我们需要重新创建一个文件，来实现不同尺寸设备下动态更改 html 元素 font-size 的大小的目的。\n\n在根目录的 src 文件夹下建立 utils 工具文件夹，该文件夹下建立 rem.js 文件\n\n// 基准大小\nconst baseSize = 16\n// 设置 rem 函数\nfunction setRem () {\n  // 当前页面宽度相对于 375 宽的缩放比例，可根据自己需要修改。\n  const scale = document.documentElement.clientWidth / 375\n  // 设置页面根节点字体大小\n  document.documentElement.style.fontSize = (baseSize * Math.min(scale, 2)) + \'px\'\n}\n// 初始化\nsetRem()\n// 改变窗口大小时重新设置 rem\nwindow.onresize = function () {\n  setRem()\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n在项目入口文件 main.js 文件中引入该文件\n\nimport \'./utils/rem\'\n\n\n1\n\n\n至此，重启项目，就可以愉快地玩耍了。\n\n注意：\n对于内联样式， px 是无法自动转换成 rem 的，需要自行处理，可以封装一个函数处理一下\n\n补充:\n\n在使用postcss-pxtorem插件后，发现原本css属性会自动添加浏览器前缀，现在却没有了，因此，为了兼容性，使用了插件autoprefixer。\n\n1、安装插件 autoprefixer\n\nnpm install autoprefixer -D\n\n\n1\n\n\n2、在配置文件中添加如下配置\n\nplugins: [\n  require("autoprefixer")({\n    overrideBrowserslist: [\n      "Android 4.1",\n      "iOS 7.1",\n      "Chrome > 31",\n      "ff > 31",\n      "ie >= 8",\n      "last 50 versions",\n    ],\n    grid: true, // 是否使用 autoprefixer\n  })\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n完整配置如下：\n\nmodule.exports = {\n  css: {\n    loaderOptions: {\n      less: {\n        javascriptEnabled: true\n      },\n      postcss: {\n        plugins: [\n          require("postcss-pxtorem")({\n            rootValue: 16,\n            propList: ["*"],\n            selectorBlackList: [".ignore-"],\n            minPixelValue: 2,\n            mediaQuery: false,\n            exclude: /node_modules/,\n            replace: true,\n            unitPrecision: 5\n          }),\n          require("autoprefixer")({\n            overrideBrowserslist: [\n              "Android 4.1",\n              "iOS 7.1",\n              "Chrome > 31",\n              "ff > 31",\n              "ie >= 8",\n              "last 50 versions",\n            ],\n            grid: true, // 是否使用 autoprefixer\n          })\n        ]\n      }\n    },\n    extract: true, // 是否使用css分离插件 ExtractTextPlugin\n    sourceMap: false, // 开启 CSS source maps\n    requireModuleExtension: true\n    // modules: false // 启用 CSS modules for all css / pre-processor files.\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n现在重启项目，可能会遇到如下错误信息：Error: PostCSS plugin autoprefixer requires PostCSS 8.\nMigration guide for end-users\n\n这里报错信息显示 autoprefixer 需要安装插件 postcss，原因是 autoprefixer 版本太高，解决办法有两种。\n\n方法 1、安装 postcss 可解决\n\nnpm install postcss -D\n\n\n1\n\n\n方法 2、降低 autoprefixer 版本到 8\n\nnpm install autoprefixer@8 -D\n\n\n1\n\n\n现在重启项目后，发现 css 属性又自动添加浏览器前缀了。',normalizedContent:'上篇说到了 react 项目中使用 postcss-pxtorem 实现移动端适配，这不，想着在 vue 中应该是一样的，所以全盘挪了过来，发现不太行，折腾了一番，发现写法有些不太一样。\n\n1、安装 postcss-pxtorem\n\nnpm install postcss-pxtorem -d\n\n\n1\n\n\n2、在 vue.config.js 配置文件中配置如下\n\nconst { defineconfig } = require(\'@vue/cli-service\')\nmodule.exports = defineconfig({\n  transpiledependencies: true,\n  css: {\n    loaderoptions: {\n      // less-loader 5的配置\n      less: {\n        javascriptenabled: true\n      },\n\n      // less-loader 8的配置\n      // less: {\n      //   lessoptions: {\n      //     javascriptenabled: true\n      //   }\n      // }\n\n      // 如果是@vue/cli-service 5配置如下\n      postcss: {\n        postcssoptions: {\n          plugins: [\n            require(\'postcss-pxtorem\')({\n              rootvalue: 16,\n              unitprecision: 5, // 转换后的小数保留位数\n              replace: true, // 是否替换，默认为true\n              proplist: [\'*\'], // 需要转换的属性，这里选择转换所有属性\n              selectorblacklist: [\'.ignore-\'], // 忽略转换的选择器\n              exclude: /node_modules/i, // 排除node_modules文件夹下的文件\n              mediaquery: false, // 是否转换媒体查询中的px\n              minpixelvalue: 2 // 大于或等于2px的才转换\n            })\n          ]\n        }\n      },\n\n      // @vue/cli-service 4配置如下\n      // postcss: {\n      //   plugins: [\n      //     require("postcss-pxtorem")({\n      //       rootvalue: 16, // 换算的基数\n      //       proplist: ["*"], // 需要转换的属性，这里选择全部都转\n      //       selectorblacklist: [".ignore-"], // 要忽略的类名\n      //       minpixelvalue: 2, // 设置最小的转换数值，如果为 1，只有newvalue大于1，才会被转换\n      //       mediaquery: false,\n      //       exclude: /node_modules/,\n      //       replace: true,\n      //       unitprecision: 5\n      //     })\n      //   ]\n      // }\n    }\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n在默认配置基础上，增加 css 包裹的这一块配置代码。\n\n如果按 @vue/cli-service 4 配置的那样报如下错误信息：error: postcss plugin postcss-pxtorem requires postcss 8.\nmigration guide for end-users\n\n这是因为安装的 postcss-pxtorem 版本是 6.x 的，需要依赖 postcss 8。\n\n解决办法：\n\n方法 1、安装 postcss 可解决\n\nnpm install postcss -d\n\n\n1\n\n\n方法 2、降级 postcss-pxtorem 版本到 5.x 即可解决\n\nnpm install postcss-pxtorem@5 -d\n\n\n1\n\n\n到这里我们就可以在项目中所写的 px 单位会自动转换成 rem 为单位，但是并不能实现不同尺寸的设备自适应，我们需要重新创建一个文件，来实现不同尺寸设备下动态更改 html 元素 font-size 的大小的目的。\n\n在根目录的 src 文件夹下建立 utils 工具文件夹，该文件夹下建立 rem.js 文件\n\n// 基准大小\nconst basesize = 16\n// 设置 rem 函数\nfunction setrem () {\n  // 当前页面宽度相对于 375 宽的缩放比例，可根据自己需要修改。\n  const scale = document.documentelement.clientwidth / 375\n  // 设置页面根节点字体大小\n  document.documentelement.style.fontsize = (basesize * math.min(scale, 2)) + \'px\'\n}\n// 初始化\nsetrem()\n// 改变窗口大小时重新设置 rem\nwindow.onresize = function () {\n  setrem()\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n在项目入口文件 main.js 文件中引入该文件\n\nimport \'./utils/rem\'\n\n\n1\n\n\n至此，重启项目，就可以愉快地玩耍了。\n\n注意：\n对于内联样式， px 是无法自动转换成 rem 的，需要自行处理，可以封装一个函数处理一下\n\n补充:\n\n在使用postcss-pxtorem插件后，发现原本css属性会自动添加浏览器前缀，现在却没有了，因此，为了兼容性，使用了插件autoprefixer。\n\n1、安装插件 autoprefixer\n\nnpm install autoprefixer -d\n\n\n1\n\n\n2、在配置文件中添加如下配置\n\nplugins: [\n  require("autoprefixer")({\n    overridebrowserslist: [\n      "android 4.1",\n      "ios 7.1",\n      "chrome > 31",\n      "ff > 31",\n      "ie >= 8",\n      "last 50 versions",\n    ],\n    grid: true, // 是否使用 autoprefixer\n  })\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n完整配置如下：\n\nmodule.exports = {\n  css: {\n    loaderoptions: {\n      less: {\n        javascriptenabled: true\n      },\n      postcss: {\n        plugins: [\n          require("postcss-pxtorem")({\n            rootvalue: 16,\n            proplist: ["*"],\n            selectorblacklist: [".ignore-"],\n            minpixelvalue: 2,\n            mediaquery: false,\n            exclude: /node_modules/,\n            replace: true,\n            unitprecision: 5\n          }),\n          require("autoprefixer")({\n            overridebrowserslist: [\n              "android 4.1",\n              "ios 7.1",\n              "chrome > 31",\n              "ff > 31",\n              "ie >= 8",\n              "last 50 versions",\n            ],\n            grid: true, // 是否使用 autoprefixer\n          })\n        ]\n      }\n    },\n    extract: true, // 是否使用css分离插件 extracttextplugin\n    sourcemap: false, // 开启 css source maps\n    requiremoduleextension: true\n    // modules: false // 启用 css modules for all css / pre-processor files.\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n现在重启项目，可能会遇到如下错误信息：error: postcss plugin autoprefixer requires postcss 8.\nmigration guide for end-users\n\n这里报错信息显示 autoprefixer 需要安装插件 postcss，原因是 autoprefixer 版本太高，解决办法有两种。\n\n方法 1、安装 postcss 可解决\n\nnpm install postcss -d\n\n\n1\n\n\n方法 2、降低 autoprefixer 版本到 8\n\nnpm install autoprefixer@8 -d\n\n\n1\n\n\n现在重启项目后，发现 css 属性又自动添加浏览器前缀了。',charsets:{cjk:!0}},{title:"组件内导航守卫",frontmatter:{title:"组件内导航守卫",date:"2022-03-22T11:24:18.000Z",permalink:"/pages/0856ce/",categories:["Vue3"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/02.Vue3/01.navigation-guard.html",relativePath:"《Vue》笔记/02.Vue3/01.navigation-guard.md",key:"v-e94a252a",path:"/pages/0856ce/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"在以前 vue2.x 中使用组件内的导航守卫，都是直接 beforeRouteEnter，beforeRouteLeave，beforeRouteUpdate。\n而在 vue3.x 语法糖中使用 beforeRouteEnter 必须这样，新建一个 script 标签：\n\n<script lang=\"ts\">\nexport default {\n  beforeRouteEnter(to, from, next) {\n    next()\n  }\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nbeforeRouteLeave 跟 beforeRouteUpdate 则可以在 setup 语法糖中使用：\n\n<script setup lang=\"ts\">\nimport {onBeforeRouteLeave, onBeforeRouteUpdate} from 'vue-router'\n\nonBeforeRouteLeave ((to, from) => {\n  console.log('onBeforeRouteLeave-from', from)\n  console.log('onBeforeRouteLeave-to', to)\n})\n\nonBeforeRouteUpdate((to, from, next) => {\n  console.log('更新了')\n  next()\n})\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n",normalizedContent:"在以前 vue2.x 中使用组件内的导航守卫，都是直接 beforerouteenter，beforerouteleave，beforerouteupdate。\n而在 vue3.x 语法糖中使用 beforerouteenter 必须这样，新建一个 script 标签：\n\n<script lang=\"ts\">\nexport default {\n  beforerouteenter(to, from, next) {\n    next()\n  }\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nbeforerouteleave 跟 beforerouteupdate 则可以在 setup 语法糖中使用：\n\n<script setup lang=\"ts\">\nimport {onbeforerouteleave, onbeforerouteupdate} from 'vue-router'\n\nonbeforerouteleave ((to, from) => {\n  console.log('onbeforerouteleave-from', from)\n  console.log('onbeforerouteleave-to', to)\n})\n\nonbeforerouteupdate((to, from, next) => {\n  console.log('更新了')\n  next()\n})\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n",charsets:{cjk:!0}},{title:"Home",frontmatter:{home:!0,bannerBg:"none",features:[{title:"前端",details:"JavaScript、Vue、React框架等前端技术",link:"/web/",imgUrl:"/assets/img/web.png"},{title:"随笔",details:"随性之笔",link:"/random/",imgUrl:"/assets/img/ui.png"},{title:"收藏",details:"一些常用的站点或工具",link:"/collect/website",imgUrl:"/assets/img/other.png"}],postList:"detailed",simplePostListLength:10},regularPath:"/",relativePath:"index.md",key:"v-5edd67ee",path:"/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"vue3.0与vue3.2对比",frontmatter:{title:"vue3.0与vue3.2对比",date:"2022-03-21T17:02:01.000Z",permalink:"/pages/0856be/",categories:["Vue3"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/02.Vue3/02.vue3setup%E5%87%BD%E6%95%B0%E4%B8%8E%E8%AF%AD%E6%B3%95%E7%B3%96%E5%AF%B9%E6%AF%94.html",relativePath:"《Vue》笔记/02.Vue3/02.vue3setup函数与语法糖对比.md",key:"v-032a5082",path:"/pages/0856be/",lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:null,content:"vue3.0 与 vue3.2 对比：\n\n1）、vue3.0：\n\n①、变量、方法必须 return 出来，才能在 template 中使用。\n\n②、引入自定义组件时，还必须在 components 中进行注册后才能使用。\n\n③、props 与 emit 通过 setup 函数来获取。\n\n④、setup 函数须写在 script 标签内部，需要通过 export default 导出。\n\n2）、vue3.2：\n\n①、只需在 script 标签中添加 setup，变量和方法不需要 return 就能使用。\n\n②、组件只需要引入，不用在 components 中注册就能够使用。\n\n③、子组件中 props 通过 defineProps 来获取：\n\n例如：\n\n<template>\n  <div>\n    子组件{{name}} // 心欲无痕========\n  </div>\n</template>\n\n<script setup>\n  import {defineProps} from 'vue'\n\n  defineProps({\n   name:{\n     type:String,\n     default:'默认值'\n   }\n })\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n④、子组件通过 defineEmits 来触发父组件事件或更改父组件数据\n例如：\n\nconst $emits = defineEmits(['handleClick'])\n$emits('handleClick')\n\n\n1\n2\n\n\n⑤、defineExpose：子组件向父组件暴露方法和属性，父组件通过子组件实例进行调用。\n\n例如：\n\n// 父组件\n<child ref=\"detail\"></child>\nconst detail = ref() // 必须跟组件ref保持一致\n// 父组件调用子组件属性\nconsole.log(detail.value.str)\n// 父组件调用子组件方法\ndetail.value.handleClick()\n\n\n// 子组件\nconst str = \"hello world！\"\nconst handleClick = () => {\n  console.log(\"我是子组件的方法\")\n}\ndefineExpose({\n  str,\n  handleClick\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n补充：\nvue3.4 增加 defineModel ()，以实现数据的双向绑定\n\n<Child v-model:title=\"title\">\n\n<script setup>\n  // 获取\n  const title = defineModel('title', {\n    default: 'hello'\n  })\n\n  const changeTitle = () => {\n    title.value = 'hello world'\n  }\n<\/script>\n\n<template>\n  <div>\n    <p>{{ title }}</p>\n    <button @click=\"changeTitle\">更改标题</button>\n  </div>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n",normalizedContent:"vue3.0 与 vue3.2 对比：\n\n1）、vue3.0：\n\n①、变量、方法必须 return 出来，才能在 template 中使用。\n\n②、引入自定义组件时，还必须在 components 中进行注册后才能使用。\n\n③、props 与 emit 通过 setup 函数来获取。\n\n④、setup 函数须写在 script 标签内部，需要通过 export default 导出。\n\n2）、vue3.2：\n\n①、只需在 script 标签中添加 setup，变量和方法不需要 return 就能使用。\n\n②、组件只需要引入，不用在 components 中注册就能够使用。\n\n③、子组件中 props 通过 defineprops 来获取：\n\n例如：\n\n<template>\n  <div>\n    子组件{{name}} // 心欲无痕========\n  </div>\n</template>\n\n<script setup>\n  import {defineprops} from 'vue'\n\n  defineprops({\n   name:{\n     type:string,\n     default:'默认值'\n   }\n })\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n④、子组件通过 defineemits 来触发父组件事件或更改父组件数据\n例如：\n\nconst $emits = defineemits(['handleclick'])\n$emits('handleclick')\n\n\n1\n2\n\n\n⑤、defineexpose：子组件向父组件暴露方法和属性，父组件通过子组件实例进行调用。\n\n例如：\n\n// 父组件\n<child ref=\"detail\"></child>\nconst detail = ref() // 必须跟组件ref保持一致\n// 父组件调用子组件属性\nconsole.log(detail.value.str)\n// 父组件调用子组件方法\ndetail.value.handleclick()\n\n\n// 子组件\nconst str = \"hello world！\"\nconst handleclick = () => {\n  console.log(\"我是子组件的方法\")\n}\ndefineexpose({\n  str,\n  handleclick\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n补充：\nvue3.4 增加 definemodel ()，以实现数据的双向绑定\n\n<child v-model:title=\"title\">\n\n<script setup>\n  // 获取\n  const title = definemodel('title', {\n    default: 'hello'\n  })\n\n  const changetitle = () => {\n    title.value = 'hello world'\n  }\n<\/script>\n\n<template>\n  <div>\n    <p>{{ title }}</p>\n    <button @click=\"changetitle\">更改标题</button>\n  </div>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n",charsets:{cjk:!0}},{title:"vue之低版本浏览器兼容",frontmatter:{title:"vue之低版本浏览器兼容",date:"2023-01-11T11:07:07.000Z",permalink:"/pages/d607c0/",categories:["Vue2"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/01.Vue2/08.vue%E4%B9%8B%E4%BD%8E%E7%89%88%E6%9C%AC%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9.html",relativePath:"《Vue》笔记/01.Vue2/08.vue之低版本浏览器兼容.md",key:"v-7527acb6",path:"/pages/d607c0/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'最近遇到一个问题，使用 vue 脚手架打包后的项目在用户手机上打开页面是空白的。其机型是 android7.1。\n\n最后在安卓模拟真机调试后，找到问题了，是因为打包后，有部分 es6 没有转成 es5，发现扩展运算符还在，代码不兼容，导致页面报错，显示空白。\n\n解决办法就是在打包的时候将 es6 代码转换成 es5 代码。\n\n这里我们需要使用 Babel 插件。\n\n1、安装 @babel/polyfill\n\nnpm install @babel/polyfill -S\n\n\n1\n\n\n2、在入口文件 main.js 最顶部引入该插件\n\nimport "@babel/polyfill"\n\n\n1\n\n\n3、修改 babel.config.js 配置文件。\n\npresets: [\n  ["@vue/app", {\n    polyfills: [\n      "es6.promise",\n      "es6.symbol",\n      "es6.array.iterator",\n      "es6.object.assign"\n    ],\n    useBuiltIns: "entry"\n  }]\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n4、在 vue.config.js 配置文件中修改配置项 transpileDependencies。默认情况下 babel-loader 会忽略所有 node_modules 中的文件。你可以启用本选项，以避免构建后的代码中出现未转译的第三方依赖\n\ntranspileDependencies: [true]\n\n\n1\n\n\n至此，项目白屏报错的问题就可以解决了。\n\n需要注意的是从 Babel 7.4.0 开始，不再推荐使用 @babel/polyfill 包，而是直接使用 core-js/stable 和 regenerator-runtime/runtime：\n\n安装 core-js 和 regenerator-runtime\n\nnpm install --save core-js regenerator-runtime\n\n\n1\n\n\n在项目入口文件顶部引入\n\nimport "core-js/stable";\nimport "regenerator-runtime/runtime";\n\n\n1\n2\n',normalizedContent:'最近遇到一个问题，使用 vue 脚手架打包后的项目在用户手机上打开页面是空白的。其机型是 android7.1。\n\n最后在安卓模拟真机调试后，找到问题了，是因为打包后，有部分 es6 没有转成 es5，发现扩展运算符还在，代码不兼容，导致页面报错，显示空白。\n\n解决办法就是在打包的时候将 es6 代码转换成 es5 代码。\n\n这里我们需要使用 babel 插件。\n\n1、安装 @babel/polyfill\n\nnpm install @babel/polyfill -s\n\n\n1\n\n\n2、在入口文件 main.js 最顶部引入该插件\n\nimport "@babel/polyfill"\n\n\n1\n\n\n3、修改 babel.config.js 配置文件。\n\npresets: [\n  ["@vue/app", {\n    polyfills: [\n      "es6.promise",\n      "es6.symbol",\n      "es6.array.iterator",\n      "es6.object.assign"\n    ],\n    usebuiltins: "entry"\n  }]\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n4、在 vue.config.js 配置文件中修改配置项 transpiledependencies。默认情况下 babel-loader 会忽略所有 node_modules 中的文件。你可以启用本选项，以避免构建后的代码中出现未转译的第三方依赖\n\ntranspiledependencies: [true]\n\n\n1\n\n\n至此，项目白屏报错的问题就可以解决了。\n\n需要注意的是从 babel 7.4.0 开始，不再推荐使用 @babel/polyfill 包，而是直接使用 core-js/stable 和 regenerator-runtime/runtime：\n\n安装 core-js 和 regenerator-runtime\n\nnpm install --save core-js regenerator-runtime\n\n\n1\n\n\n在项目入口文件顶部引入\n\nimport "core-js/stable";\nimport "regenerator-runtime/runtime";\n\n\n1\n2\n',charsets:{cjk:!0}},{title:"Redis安装与基本使用",frontmatter:{title:"Redis安装与基本使用",date:"2023-12-12T18:36:46.000Z",permalink:"/pages/c63b43/",categories:["《Redis》"],tags:[null]},regularPath:"/%E3%80%8ARedis%E3%80%8B%E7%AC%94%E8%AE%B0/01.Redis/01.Redis%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html",relativePath:"《Redis》笔记/01.Redis/01.Redis安装与基本使用.md",key:"v-7f3ad0a8",path:"/pages/c63b43/",lastUpdated:"7/2/2024, 11:06:45 AM",lastUpdatedTimestamp:1719889605e3,headersStr:null,content:"以 Mac 为例：\n\n1、安装 Redis\n\nbrew install redis\n\n\n1\n\n\n2、开启 redis 服务\n\nredis-server  // 服务端命令工具包，用于启动服务，非后台启动时，关闭当前终端窗口会自动关闭redis\n\n\n1\n\n\n此时如出现如下图所示的结果，则表明 Reids 已成功安装。\n\n\n3、连接 Redis\n\nredis-cli   // 开启命令行客户端，一般会使用专门的UI客户端\n\nredis-cli shutdown   // 正常停止服务，此时不能再通过命令行客户端读取和设置数据了\n\n\n1\n2\n3\n\n\n4、查看 Redis 是否连接成功，通过 ping 命令，如出现下图所示，则表示连接成功。\n\n\n至此，就可以通过该命令客户端操作数据了。\n\n然而，工作中一般很少直接通过该命令客户端来操作数据，毕竟太繁琐了，都是通过 Redis 可视化管理工具来操作。\n\nRedis 官网，下载后，连接到 Redis 服务器，可连接本地的或远程的\n\n\n常用 redis 配置:\n\n// 指定端口启动\nredis-server --port 7000\n\n// 设置redis服务为守护模式---默认为no\ndaemonize no \n\n// 设置当前redis实例启动之后保存进程的id文件路径及名称\npidfile /var/run/redis_6379.pid\n\n// redis服务端口\nport 6379\n\n// 当前redis设置保护模式是否开启\nprotected-mode yes\n\n// 设置允许当前访问redis实例的IP地址列表\nbind 127.0.0.1\n\n// 设置连接密码\nrequirepass 123456\n\n// 设置redis实例中数据库的个数\ndatabases 16\n\n// 设置最大并发数\nmaxclients\n\n// 设置客户端与redis建立连接最大空闲时间\ntimeout 0\n\n// 已通过redis-cli进入命令客户端，通过以下命令退出命令客户端\nexit\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n",normalizedContent:"以 mac 为例：\n\n1、安装 redis\n\nbrew install redis\n\n\n1\n\n\n2、开启 redis 服务\n\nredis-server  // 服务端命令工具包，用于启动服务，非后台启动时，关闭当前终端窗口会自动关闭redis\n\n\n1\n\n\n此时如出现如下图所示的结果，则表明 reids 已成功安装。\n\n\n3、连接 redis\n\nredis-cli   // 开启命令行客户端，一般会使用专门的ui客户端\n\nredis-cli shutdown   // 正常停止服务，此时不能再通过命令行客户端读取和设置数据了\n\n\n1\n2\n3\n\n\n4、查看 redis 是否连接成功，通过 ping 命令，如出现下图所示，则表示连接成功。\n\n\n至此，就可以通过该命令客户端操作数据了。\n\n然而，工作中一般很少直接通过该命令客户端来操作数据，毕竟太繁琐了，都是通过 redis 可视化管理工具来操作。\n\nredis 官网，下载后，连接到 redis 服务器，可连接本地的或远程的\n\n\n常用 redis 配置:\n\n// 指定端口启动\nredis-server --port 7000\n\n// 设置redis服务为守护模式---默认为no\ndaemonize no \n\n// 设置当前redis实例启动之后保存进程的id文件路径及名称\npidfile /var/run/redis_6379.pid\n\n// redis服务端口\nport 6379\n\n// 当前redis设置保护模式是否开启\nprotected-mode yes\n\n// 设置允许当前访问redis实例的ip地址列表\nbind 127.0.0.1\n\n// 设置连接密码\nrequirepass 123456\n\n// 设置redis实例中数据库的个数\ndatabases 16\n\n// 设置最大并发数\nmaxclients\n\n// 设置客户端与redis建立连接最大空闲时间\ntimeout 0\n\n// 已通过redis-cli进入命令客户端，通过以下命令退出命令客户端\nexit\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n",charsets:{cjk:!0}},{title:"eslint报错汇总",frontmatter:{title:"eslint报错汇总",date:"2024-06-07T10:48:53.000Z",permalink:"/pages/040685/",categories:["Vue2"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/01.Vue2/09.eslint%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB.html",relativePath:"《Vue》笔记/01.Vue2/09.eslint报错汇总.md",key:"v-7cab3a1e",path:"/pages/040685/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'在开发过程中，经常会遇到各种 eslint 的奇葩报错，特此记录下。\n\n1、error: Parsing error: invalid-first-character-of-tag-name\n\n解决办法：在.eslintrc.js 配置文件中的 rules 下增加如下配置\n\nmodule.exports = {\n\trules: {\n\t\t"vue/no-parsing-error": [\n\t\t\t"error",\n\t\t\t{\n\t\t\t  "invalid-first-character-of-tag-name": false\n\t\t\t}\n\t\t]\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n现在重新执行以下 npm run lint，然后重启项目就可以解决问题了\n\n2、在封装方法时，写 callback 回调报错，如 Unexpected literal in error position of callback (standard/no-callback-literal)\n\n解决办法：在.eslintrc.js 配置文件的 rules 配置项中增加如下配置\n\n"no-callback-literal": 0\n\n\n1\n\n\n现在重启项目，便不会再报这个错了',normalizedContent:'在开发过程中，经常会遇到各种 eslint 的奇葩报错，特此记录下。\n\n1、error: parsing error: invalid-first-character-of-tag-name\n\n解决办法：在.eslintrc.js 配置文件中的 rules 下增加如下配置\n\nmodule.exports = {\n\trules: {\n\t\t"vue/no-parsing-error": [\n\t\t\t"error",\n\t\t\t{\n\t\t\t  "invalid-first-character-of-tag-name": false\n\t\t\t}\n\t\t]\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n现在重新执行以下 npm run lint，然后重启项目就可以解决问题了\n\n2、在封装方法时，写 callback 回调报错，如 unexpected literal in error position of callback (standard/no-callback-literal)\n\n解决办法：在.eslintrc.js 配置文件的 rules 配置项中增加如下配置\n\n"no-callback-literal": 0\n\n\n1\n\n\n现在重启项目，便不会再报这个错了',charsets:{cjk:!0}},{title:"使用vue-cli脚手架搭建vue3项目踩坑",frontmatter:{title:"使用vue-cli脚手架搭建vue3项目踩坑",date:"2024-06-19T15:41:45.000Z",permalink:"/pages/64779d/",categories:["Vue3"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/02.Vue3/06.%E4%BD%BF%E7%94%A8vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91.html",relativePath:"《Vue》笔记/02.Vue3/06.使用vue-cli脚手架搭建vue3项目踩坑.md",key:"v-1bfa6712",path:"/pages/64779d/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"最近突然想重新完整地搭建一个 vue3 项目的框架，方便后续的开发，然而刚起步就踩坑了，特此记录下。\n\n这里使用的是官方的脚手架搭建的项目\n\nvue create vue3-demo\n\n\n1\n\n\n项目搭建好了，想着由于移动端开发的比较多，所以想引入 postcss-pxtorem 插件方便后续开发，所以安装 postcss-pxtorem\n\nnpm install postcss-pxtorem -D\n\n\n1\n\n\n于是第一个报错出现了\n\nnpm ERR! While resolving: @vue/eslint-config-standard@6.1.0\n\nnpm ERR! Found: eslint-plugin-vue@8.7.1\n\nnpm ERR! node_modules/eslint-plugin-vue\n\nnpm ERR! peer eslint-plugin-vue@\"^8.0.1\" from @vue/eslint-config-typescript@9.1.0\n\n大概意思是 eslint-plugin-vue 版本与 @vue/eslint-config-standard 版本不匹配导致的，于是降低 eslint-plugin-vue 版本到 7\n\nnpm install eslint-plugin-vue@7 -D\n\n\n1\n\n\n接下来继续安装 postcss-pxtorem 插件，然而第二个错误又出现了\n\nnpm ERR! While resolving: @vue/eslint-config-typescript@9.1.0\n\nnpm ERR! Found: eslint-plugin-vue@7.20.0\n\nnpm ERR! node_modules/eslint-plugin-vue\n\nnpm ERR! peer eslint-plugin-vue@\"^7.0.0\" from @vue/eslint-config-standard@6.1.0\n\n原因是 @vue/eslint-config-typescript 版本太高，于是降低 @vue/eslint-config-typescript 版本到 8\n\nnpm install @vue/eslint-config-typescript@8 -D\n\n\n1\n\n\n安装完后，继续安装 postcss-pxtorem 插件，这次终于成功了。\n接下来在 vue.config.js 配置文件中配置 postcss-pxtorem 配置，eslint 出现了一个警告，Require statement not part of import statement（@typescript-eslint/no-var-requires）\n\n解决办法，在.eslintrc.js 中的 rules 属性增加如下配置\n\nrules: {\n    '@typescript-eslint/no-var-requires': 0\n}\n\n\n1\n2\n3\n\n\n重新执行 npm run lint，至此，警告消失。\n\n接下来安装 autoprefixer，自动添加浏览器前缀，以便刚好的兼容设备。安装并配置完后，重启项目发现能正常运行，px 单位也会自动转换成 rem 单位，好了，开始安装打包优化相关的插件 compression-webpack-plugin、terser-webpack-plugin、css-minimizer-webpack-plugin\n\nnpm install compression-webpack-plugin terser-webpack-plugin css-minimizer-webpack-plugin -D\n\n\n1\n\n\n在 vue.config.js 中增加如下配置:\n\nconst CompressionWebpackPlugin = require('compression-webpack-plugin')\nconst TerserPlugin = require('terser-webpack-plugin')\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin')\n\nconfigureWebpack: {\n  plugins: [\n    new CompressionWebpackPlugin({\n      algorithm: 'gzip',\n      test: new RegExp('\\\\.(' + ['js', 'css'].join('|') + ')$'),\n      threshold: 10240,\n      minRatio: 0.8\n    }),\n    new TerserPlugin({\n      parallel: true,\n      terserOptions: {\n        compress: {\n          drop_console: true\n        }\n      }\n    }),\n    new CssMinimizerPlugin({\n      parallel: true,\n      minimizerOptions: {\n        sourceMap: false\n      }\n    })\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n此时，完整配置如下：\n\nconst { defineConfig } = require('@vue/cli-service')\nconst CompressionWebpackPlugin = require('compression-webpack-plugin')\nconst TerserPlugin = require('terser-webpack-plugin')\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin')\n\nmodule.exports = defineConfig({\n  transpileDependencies: true,\n  css: {\n    loaderOptions: {\n      less: {\n        lessOptions: {\n          javascriptEnabled: true\n        }\n      },\n      postcss: {\n        postcssOptions: {\n          plugins: [\n            require('postcss-pxtorem')({\n              rootValue: 16,\n              unitPrecision: 5,\n              replace: true,\n              propList: ['*'],\n              selectorBlackList: ['.ignore-'],\n              exclude: /node_modules/i,\n              mediaQuery: false,\n              minPixelValue: 2\n            }),\n            require('autoprefixer')({\n              overrideBrowserslist: [\n                'Android 4.1',\n                'iOS 7.1',\n                'Chrome > 31',\n                'ff > 31',\n                'ie >= 8',\n                'last 50 versions'\n              ],\n              grid: true // 是否使用 autoprefixer\n            })\n          ]\n        }\n      }\n    }\n  },\n  configureWebpack: {\n    plugins: [\n      new CompressionWebpackPlugin({\n        algorithm: 'gzip',\n        test: new RegExp('\\\\.(' + ['js', 'css'].join('|') + ')$'),\n        threshold: 10240,\n        minRatio: 0.8\n      }),\n      new TerserPlugin({\n        parallel: true,\n        terserOptions: {\n          compress: {\n            drop_console: true\n          }\n        }\n      }),\n      new CssMinimizerPlugin({\n        parallel: true,\n        minimizerOptions: {\n          sourceMap: false\n        }\n      })\n    ]\n  },\n  productionSourceMap: false\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n\n\n至此，一个基于 vue3 的基础框架搭建好了",normalizedContent:"最近突然想重新完整地搭建一个 vue3 项目的框架，方便后续的开发，然而刚起步就踩坑了，特此记录下。\n\n这里使用的是官方的脚手架搭建的项目\n\nvue create vue3-demo\n\n\n1\n\n\n项目搭建好了，想着由于移动端开发的比较多，所以想引入 postcss-pxtorem 插件方便后续开发，所以安装 postcss-pxtorem\n\nnpm install postcss-pxtorem -d\n\n\n1\n\n\n于是第一个报错出现了\n\nnpm err! while resolving: @vue/eslint-config-standard@6.1.0\n\nnpm err! found: eslint-plugin-vue@8.7.1\n\nnpm err! node_modules/eslint-plugin-vue\n\nnpm err! peer eslint-plugin-vue@\"^8.0.1\" from @vue/eslint-config-typescript@9.1.0\n\n大概意思是 eslint-plugin-vue 版本与 @vue/eslint-config-standard 版本不匹配导致的，于是降低 eslint-plugin-vue 版本到 7\n\nnpm install eslint-plugin-vue@7 -d\n\n\n1\n\n\n接下来继续安装 postcss-pxtorem 插件，然而第二个错误又出现了\n\nnpm err! while resolving: @vue/eslint-config-typescript@9.1.0\n\nnpm err! found: eslint-plugin-vue@7.20.0\n\nnpm err! node_modules/eslint-plugin-vue\n\nnpm err! peer eslint-plugin-vue@\"^7.0.0\" from @vue/eslint-config-standard@6.1.0\n\n原因是 @vue/eslint-config-typescript 版本太高，于是降低 @vue/eslint-config-typescript 版本到 8\n\nnpm install @vue/eslint-config-typescript@8 -d\n\n\n1\n\n\n安装完后，继续安装 postcss-pxtorem 插件，这次终于成功了。\n接下来在 vue.config.js 配置文件中配置 postcss-pxtorem 配置，eslint 出现了一个警告，require statement not part of import statement（@typescript-eslint/no-var-requires）\n\n解决办法，在.eslintrc.js 中的 rules 属性增加如下配置\n\nrules: {\n    '@typescript-eslint/no-var-requires': 0\n}\n\n\n1\n2\n3\n\n\n重新执行 npm run lint，至此，警告消失。\n\n接下来安装 autoprefixer，自动添加浏览器前缀，以便刚好的兼容设备。安装并配置完后，重启项目发现能正常运行，px 单位也会自动转换成 rem 单位，好了，开始安装打包优化相关的插件 compression-webpack-plugin、terser-webpack-plugin、css-minimizer-webpack-plugin\n\nnpm install compression-webpack-plugin terser-webpack-plugin css-minimizer-webpack-plugin -d\n\n\n1\n\n\n在 vue.config.js 中增加如下配置:\n\nconst compressionwebpackplugin = require('compression-webpack-plugin')\nconst terserplugin = require('terser-webpack-plugin')\nconst cssminimizerplugin = require('css-minimizer-webpack-plugin')\n\nconfigurewebpack: {\n  plugins: [\n    new compressionwebpackplugin({\n      algorithm: 'gzip',\n      test: new regexp('\\\\.(' + ['js', 'css'].join('|') + ')$'),\n      threshold: 10240,\n      minratio: 0.8\n    }),\n    new terserplugin({\n      parallel: true,\n      terseroptions: {\n        compress: {\n          drop_console: true\n        }\n      }\n    }),\n    new cssminimizerplugin({\n      parallel: true,\n      minimizeroptions: {\n        sourcemap: false\n      }\n    })\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n此时，完整配置如下：\n\nconst { defineconfig } = require('@vue/cli-service')\nconst compressionwebpackplugin = require('compression-webpack-plugin')\nconst terserplugin = require('terser-webpack-plugin')\nconst cssminimizerplugin = require('css-minimizer-webpack-plugin')\n\nmodule.exports = defineconfig({\n  transpiledependencies: true,\n  css: {\n    loaderoptions: {\n      less: {\n        lessoptions: {\n          javascriptenabled: true\n        }\n      },\n      postcss: {\n        postcssoptions: {\n          plugins: [\n            require('postcss-pxtorem')({\n              rootvalue: 16,\n              unitprecision: 5,\n              replace: true,\n              proplist: ['*'],\n              selectorblacklist: ['.ignore-'],\n              exclude: /node_modules/i,\n              mediaquery: false,\n              minpixelvalue: 2\n            }),\n            require('autoprefixer')({\n              overridebrowserslist: [\n                'android 4.1',\n                'ios 7.1',\n                'chrome > 31',\n                'ff > 31',\n                'ie >= 8',\n                'last 50 versions'\n              ],\n              grid: true // 是否使用 autoprefixer\n            })\n          ]\n        }\n      }\n    }\n  },\n  configurewebpack: {\n    plugins: [\n      new compressionwebpackplugin({\n        algorithm: 'gzip',\n        test: new regexp('\\\\.(' + ['js', 'css'].join('|') + ')$'),\n        threshold: 10240,\n        minratio: 0.8\n      }),\n      new terserplugin({\n        parallel: true,\n        terseroptions: {\n          compress: {\n            drop_console: true\n          }\n        }\n      }),\n      new cssminimizerplugin({\n        parallel: true,\n        minimizeroptions: {\n          sourcemap: false\n        }\n      })\n    ]\n  },\n  productionsourcemap: false\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n\n\n至此，一个基于 vue3 的基础框架搭建好了",charsets:{cjk:!0}},{title:"使用vite搭建vue3+TS项目及基础配置",frontmatter:{title:"使用vite搭建vue3+TS项目及基础配置",date:"2022-07-28T14:34:35.000Z",permalink:"/pages/273d1e/",categories:["Vue3"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/02.Vue3/05.%E4%BD%BF%E7%94%A8vite%E6%90%AD%E5%BB%BAvue3+TS%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE.html",relativePath:"《Vue》笔记/02.Vue3/05.使用vite搭建vue3+TS项目及基础配置.md",key:"v-4ef7f0c7",path:"/pages/273d1e/",headers:[{level:3,title:"jsx语法配置",slug:"jsx语法配置",normalizedTitle:"jsx 语法配置",charIndex:567},{level:3,title:"postcss-px-to-viewport移动端适配",slug:"postcss-px-to-viewport移动端适配",normalizedTitle:"postcss-px-to-viewport 移动端适配",charIndex:943},{level:3,title:"postcss-pxtorem移动端适配",slug:"postcss-pxtorem移动端适配",normalizedTitle:"postcss-pxtorem 移动端适配",charIndex:2208},{level:3,title:"autoprefixer自动添加浏览器前缀",slug:"autoprefixer自动添加浏览器前缀",normalizedTitle:"autoprefixer 自动添加浏览器前缀",charIndex:2830},{level:3,title:"配置@路径别名：",slug:"配置-路径别名",normalizedTitle:"配置 @路径别名：",charIndex:3348},{level:3,title:"开启gzip压缩",slug:"开启gzip压缩",normalizedTitle:"开启 gzip 压缩",charIndex:3473},{level:3,title:"开启打包后js、css、图片等文件夹分离",slug:"开启打包后js、css、图片等文件夹分离",normalizedTitle:"开启打包后 js、css、图片等文件夹分离",charIndex:3750},{level:3,title:"vue-router配置",slug:"vue-router配置",normalizedTitle:"vue-router 配置",charIndex:4748},{level:3,title:"按需自动导入",slug:"按需自动导入",normalizedTitle:"按需自动导入",charIndex:5921},{level:3,title:"ESLint和Prettier配置",slug:"eslint和prettier配置",normalizedTitle:"eslint 和 prettier 配置",charIndex:6479},{level:3,title:"配置css预处理器less或scss等",slug:"配置css预处理器less或scss等",normalizedTitle:"配置 css 预处理器 less 或 scss 等",charIndex:8798},{level:3,title:"完整配置",slug:"完整配置",normalizedTitle:"完整配置",charIndex:9060},{level:3,title:"兼容传统浏览器",slug:"兼容传统浏览器",normalizedTitle:"兼容传统浏览器",charIndex:13303}],lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:"jsx语法配置 postcss-px-to-viewport移动端适配 postcss-pxtorem移动端适配 autoprefixer自动添加浏览器前缀 配置@路径别名： 开启gzip压缩 开启打包后js、css、图片等文件夹分离 vue-router配置 按需自动导入 ESLint和Prettier配置 配置css预处理器less或scss等 完整配置 兼容传统浏览器",content:"搭建 vite 项目\n使用 NPM：\n\n// vite2（需要 Node.js 版本 >= 12.0.0。）\nnpm init vite@latest\n\n// vite3（需要node.js版本18+或20+）\nnpm create vite@latest\n\n\n1\n2\n3\n4\n5\n\n\n使用 vite 创建 vue 项目\n\n// 这个命令会安装和执行 create-vue，它是 Vue 提供的官方脚手架工具\nnpm create vue@latest\n\n\n1\n2\n\n\n使用 yarn：\n\nyarn create vite\n\n\n1\n\n\n也可以通过附加的命令行选项直接指定项目名称和你想要使用的模板。例如构建一个 Vite + Vue 项目：\n\n// npm 6.x\nnpm create vite@latest my-vue-app --template vue\n\n // npm 7+, 需要额外加 --:\nnpm create vite@latest my-vue-app -- --template vue\n\n // yarn\nyarn create vite my-vue-app --template vue\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n更多模板选项：vue，vue-ts，react，react-ts\n\n\n# jsx 语法配置\n\n如果想在项目中使用 jsx 来开发，则需要安装另一款插件：\n\nnpm install @vitejs/plugin-vue-jsx -D\n\n\n1\n\n\n然后在 vite.config.js 文件中增加如下配置\n\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport vueJsx from '@vitejs/plugin-vue-jsx';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue(), vueJsx()]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n至此，就可以在项目中愉快地使用 jsx 来开发了。\n\n\n# postcss-px-to-viewport 移动端适配\n\n如果是做移动端适配时，则可以使用 postcss-px-to-viewport 插件：\n\nnpm install postcss-px-to-viewport -D\n\n\n1\n\n\n则 vite.config.js 中配置项更改如下：\n\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport vueJsx from '@vitejs/plugin-vue-jsx';\nimport postcsspxtoviewport from 'postcss-px-to-viewport'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue(), vueJsx()],\n  css: {\n    postcss: {\n      plugins: [\n        postcsspxtoviewport({\n          unitToConvert: 'px', // 要转化的单位\n          viewportWidth: 750, // UI设计稿的宽度\n          unitPrecision: 6, // 转换后的精度，即小数点位数\n          propList: ['*'], // 指定转换的css属性的单位，*代表全部css属性的单位都进行转换\n          viewportUnit: 'vw', // 指定需要转换成的视窗单位，默认vw\n          fontViewportUnit: 'vw', // 指定字体需要转换成的视窗单位，默认vw\n          selectorBlackList: ['ignore-'], // 指定不转换为视窗单位的类名，\n          minPixelValue: 1, // 默认值1，小于或等于1px则不进行转换\n          mediaQuery: true, // 是否在媒体查询的css代码中也进行转换，默认false\n          replace: true, // 是否转换后直接更换属性值\n          exclude: [/node_modules/], // 设置忽略文件，用正则做目录名匹配\n          //exclude: [],\n          landscape: false // 是否处理横屏情况\n        })\n      ]\n    }\n  }\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n现在在项目中使用 px，它会自动转成 vw 了。\n\n\n# postcss-pxtorem 移动端适配\n\n也可以使用 postcss-pxtorem 插件来做移动端适配\n\nnpm install postcss-pxtorem -D\n\n\n1\n\n\n然后在 vite.config.ts 中增加如下配置\n\nimport postCssPxToRem from 'postcss-pxtorem'\n\ncss: {\n  postcss: {\n    plugins: [\n      postCssPxToRem({\n        rootValue: 16,\n        unitPrecision: 5,\n        replace: true,\n        propList: ['*'],\n        selectorBlackList: ['.ignore-'],\n        exclude: /node_modules/i,\n        mediaQuery: false,\n        minPixelValue: 2\n      })\n    ]\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n由于是 ts 项目，此时可能会报类型警告问题，可以安装 @types/postcss-pxtorem 来解决\n\nnpm install @types/postcss-pxtorem -D\n\n\n1\n\n\n\n# autoprefixer 自动添加浏览器前缀\n\n安装 autoprefixer 插件来自动添加浏览器前缀\n\nnpm install autoprefixer -D\n\n\n1\n\n\n在 vite.config.ts 中增加如下配置\n\nimport autoprefixer from 'autoprefixer'\n\ncss: {\n  postcss: {\n    plugins: [\n      autoprefixer({\n        overrideBrowserslist: [\n          \"Android 4.1\",\n          \"iOS 7.1\",\n          \"Chrome > 31\",\n          \"ff > 31\",\n          \"ie >= 8\",\n          \"last 50 versions\",\n        ],\n        grid: true, // 是否使用 autoprefixer\n      })\n    ]\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 配置 @路径别名：\n\nimport path from 'path'\n\nresolve: {\n  alias: {\n    '@': path.resolve(__dirname, 'src')\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 开启 gzip 压缩\n\nimport compression from 'vite-plugin-compression'\n\nplugins: [\n  compression( {\n    algorithm: 'gzip',\n    ext: '.gz',\n    deleteOriginFile: true,  //是否删除源文件\n    threshold: 1024, // 大于1k的进行压缩\n    filter: /\\.(js|css|html|svg)$/,\n  })\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 开启打包后 js、css、图片等文件夹分离\n\nbuild: {\n  sourcemap: false,\n  chunkSizeWarningLimit: 1500,\n  rollupOptions: {\n    output: {\n      manualChunks(id) {\n        if (id.includes('node_modules')) {\n          return id\n            .toString()\n            .split('node_modules/')[1]\n            .split('/')[0]\n            .toString()\n        }\n      },\n      entryFileNames: 'assets/js/[name]-[hash].js',\n      assetFileNames: 'assets/[ext]/[name]-[hash].[ext]',\n      chunkFileNames: ( chunkInfo ) => {\n        const facadeModuleId = chunkInfo.facadeModuleId ? chunkInfo.facadeModuleId.split('/') : [];\n        const fileName = facadeModuleId[facadeModuleId.length - 2] || '[name]';\n        return `assets/js/${fileName}-[hash].js`\n      }\n    }\n  },\n  minify: 'terser',\n  terserOptions: {\n    compress: {\n      drop_console: true,\n      drop_debugger: true\n    },\n    format: {\n      comments: false\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# vue-router 配置\n\n1、安装 vue-router\n\nnpm install vue-router\n\n\n1\n\n\n2、在 src 文件夹下建立 router 文件夹，在该文件夹下新建 index.ts 文件，配置如下：\n\nimport { createRouter, createWebHistory, RouteRecordRaw } from 'vue-router'\n\nconst routes:Array<RouteRecordRaw> = [\n  {\n    path: '/',\n    component: () => import(/* webpackChunkName: 'Home' */ '@/views/Home.vue'),\n    name: 'Home',\n    meta: {\n      title: '首页'\n    }\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes\n})\n\n// tslint:disable-next-line\nrouter.beforeEach((to) => {\n  if (to.meta.title) {\n    document.title = to.meta.title as string\n  }\n})\n\nexport default router\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n3、在 main.ts 入口文件中引入 route 并使用它\n\nimport router from \"./router\"\n\nconst app=createApp( App )\napp.use(router)\n\n\n1\n2\n3\n4\n\n\n在路由配置文件中导入.vue 文件时，可能会报错无法找到模块等警告。\n\n解决办法，在 vite-env.d.ts 增加如下代码：\n\ndeclare module '*.vue' {\n  import type { DefineComponent } from 'vue'\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types\n  const component: DefineComponent<{}, {}, any>\n  export default component\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n此时，警告就会消失的\n\n\n# 按需自动导入\n\n在 vue3 开发中，经常需要导入各种 api，如 ref，reactive，computed，watch，各种生命周期，路由相关的 api 等等，觉得特繁琐，这时候我们可以使用另一款自动导出插件 unplugin-auto-import 了。\n\n安装插件 unplugin-auto-import\n\nnpm install -D unplugin-auto-import\n\n\n1\n\n\n现在 vite.config.js 文件配置更改如下：\n\nimport { defineConfig } from 'vite'\nimport AutoImport from 'unplugin-auto-import/vite'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n      AutoImport({\n        imports: ['vue', 'vue-router']\n      })\n  ]\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n现在开发再也不用导入与 vue、vue-router 相关的 api 了，可以直接使用，其他的插件会帮我们解决。\n\n\n# ESLint 和 Prettier 配置\n\n1、安装 eslint 相关插件\n\nnpm install --save-dev eslint eslint-plugin-vue @typescript-eslint/parser @typescript-eslint/eslint-plugin\n\n\n1\n\n\n2、创建或更新.eslintrc.cjs 配置文件，配置如下\n\nmodule.exports = {\n  root: true,\n  env: {\n    node: true,\n  },\n  extends: [\n    'eslint:recommended',\n    'plugin:vue/vue3-recommended',\n    'plugin:@typescript-eslint/recommended',\n    'prettier',\n    'plugin:prettier/recommended'\n  ],\n  parserOptions: {\n    parser: '@typescript-eslint/parser',\n    ecmaVersion: 2020,\n    sourceType: 'module',\n  },\n  rules: {\n    'vue/no-multiple-template-root': 'off',\n    '@typescript-eslint/no-explicit-any': 'off',\n  },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n3、安装 Prettier 相关插件\n\nnpm install --save-dev prettier eslint-config-prettier eslint-plugin-prettier\n\n\n1\n\n\n4、创建或更新.prettierrc 文件\n\n{\n  \"singleQuote\": true,\n  \"semi\": false,\n  \"trailingComma\": \"all\"\n}\n\n\n1\n2\n3\n4\n5\n\n\n5、创建.eslintignore 文件和.prettierignore 文件\n\n// .eslintignore配置代码\nnode_modules\ndist\n\n\n// .prettierignore配置代码\nnode_modules\ndist\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n6、更新 package.json，添加如下脚本命令\n\n{\n  'scripts': {\n    \"lint\": \"eslint --fix --ext .ts,.vue src\",\n    \"format\": \"prettier --write \\\"src/**/*.{js,ts,vue,json,css,scss,md}\\\"\"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n现在执行 npm run lint 可能会报如下错误：如 ref、reactive is not defined 等问题。这是因为 ts 未识别到 vue api，没有相应的模块声明文件。\n\n解决：在 vite.config.js 中配置，并在 tsconfig.json 中引入。\n\nplugins: [\n  AutoImport({\n    dts: 'src/auto-imports.d.ts', // 可以自定义文件生成的位置，默认是根目录下\n    imports: ['vue', 'vue-router'],\n  })\n]\n\n\n1\n2\n3\n4\n5\n6\n\n\n在 tsconfig.json 中配置如下：\n\n\"include\": [\"env.d.ts\", \"src/**/*\", \"src/**/*.vue\", \"./auto-imports.d.ts\"]\n\n\n1\n\n\n这时候还是会报错，这是因为因为还没配置自动导入相应的 eslint 规则\n\n解决：在 vite.config.js 中的 autoimport 中配置生成对应的.eslintrc-auto-import.json 配置文件，并在.eslintrc 中引入\n\nplugins: [\n  AutoImport({\n    dts: 'src/auto-imports.d.ts', // 可以自定义文件生成的位置，默认是根目录下\n    imports: ['vue', 'vue-router'],\n    eslintrc: {\n      enabled: true,  // 1、改为true用于生成eslint配置。2、生成后改回false，避免重复生成消耗\n    }\n  })\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n在.eslintrc.cjs 中的 extentds 中配置如下：\n\n'extends': [\n  // ... 默认配置不用修改\n  \"./.eslintrc-auto-import.json\"  // 新加的\n]\n\n\n1\n2\n3\n4\n\n\n此时重新启动项目后，可能会遇到这种错误，如 Component name \"Home\" should always be multi-word，这是因为项目默认开启了驼峰命名，可在.eslintrc.cjs 中的 rules 下添加如下配置\n\n\"vue/multi-word-component-names\": \"off\"\n\n\n1\n\n\n至此，重启项目，能正确运行了。\n\n\n# 配置 css 预处理器 less 或 scss 等\n\n1、安装 less 相关的包\n\nnpm install less less-loader -D\n\n\n1\n\n\n2、在 vite.config.ts 中增加如下配置\n\n{\n  css: {\n    preprocessorOptions: {\n      less: true\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n3、在需要使用 less 的组件中使用如下：\n\n<style scoped lang=\"less\"></style>\n\n\n1\n\n\n\n# 完整配置\n\n此时，vite.config.ts 中完整配置如下：\n\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport path from 'path'\nimport postCssPxToRem from 'postcss-pxtorem'\nimport autoprefixer from 'autoprefixer'\nimport compression from 'vite-plugin-compression'\nimport AutoImport from 'unplugin-auto-import/vite'\n\nexport default defineConfig( {\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, 'src')\n    }\n  },\n  plugins: [\n    vue(),\n    compression( {\n      algorithm: 'gzip',\n      ext: '.gz',\n      deleteOriginFile: true,  //是否删除源文件\n      threshold: 1024, // 大于1k的进行压缩\n      filter: /\\.(js|css|html|svg)$/,\n    } ),\n    AutoImport( {\n      dts: 'src/auto-imports.d.ts',\n      imports: [\n        'vue',\n        'vue-router',\n      ],\n      eslintrc: {\n        enabled: false,  // 1、改为true用于生成eslint配置。2、生成后改回false，避免重复生成消耗\n      }\n    })\n  ],\n  css: {\n    postcss: {\n      plugins: [\n        postCssPxToRem({\n          rootValue: 16,\n          unitPrecision: 5,\n          replace: true,\n          propList: ['*'],\n          selectorBlackList: ['.ignore-'],\n          exclude: /node_modules/i,\n          mediaQuery: false,\n          minPixelValue: 2\n        }),\n        autoprefixer({\n          overrideBrowserslist: [\n            \"Android 4.1\",\n            \"iOS 7.1\",\n            \"Chrome > 31\",\n            \"ff > 31\",\n            \"ie >= 8\",\n            \"last 50 versions\",\n          ],\n          grid: true, // 是否使用 autoprefixer\n        })\n      ]\n    },\n    preprocessorOptions: {\n      less: true\n    }\n  },\n  build: {\n    sourcemap: false,\n    chunkSizeWarningLimit: 1500,\n    rollupOptions: {\n      output: {\n        manualChunks(id) {\n          if (id.includes('node_modules')) {\n            return id\n              .toString()\n              .split('node_modules/')[1]\n              .split('/')[0]\n              .toString()\n          }\n        },\n        entryFileNames: 'assets/js/[name]-[hash].js',\n        assetFileNames: 'assets/[ext]/[name]-[hash].[ext]',\n        chunkFileNames: ( chunkInfo ) => {\n          const facadeModuleId = chunkInfo.facadeModuleId ? chunkInfo.facadeModuleId.split('/') : [];\n          const fileName = facadeModuleId[facadeModuleId.length - 2] || '[name]';\n          return `assets/js/${fileName}-[hash].js`\n        }\n      }\n    },\n    minify: 'terser',\n    terserOptions: {\n      compress: {\n        drop_console: true,\n        drop_debugger: true\n      },\n      format: {\n        comments: false\n      }\n    }\n  }\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n\n\n.eslintrc.cjs 文件完整配置：\n\nmodule.exports = {\n  root: true,\n  env: {\n    node: true,\n  },\n  extends: [\n    'eslint:recommended',\n    'plugin:vue/vue3-recommended',\n    'plugin:@typescript-eslint/recommended',\n    'prettier',\n    'plugin:prettier/recommended',\n    \"./.eslintrc-auto-import.json\"\n  ],\n  parser: 'vue-eslint-parser',\n  parserOptions: {\n    parser: '@typescript-eslint/parser',\n    ecmaVersion: 2020,\n    sourceType: 'module',\n  },\n  rules: {\n    'vue/no-multiple-template-root': 'off',\n    '@typescript-eslint/no-explicit-any': 'off',\n    \"vue/multi-word-component-names\": \"off\"\n  }\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n补充：\n\n由于插件 postcss-px-to-viewport 不再维护了，继续使用的话，控制台可能会报如下错误，postcss-px-to-viewport: postcss.plugin was deprecated. Migration guide: https://evilmartians.com/chronicles/postcss-8-plugin-migration\n，推荐使用插件 postcss-px-to-viewport-8-plugin\n\n1、安装插件\n\nnpm install postcss-px-to-viewport-8-plugin -D\n\n\n1\n\n\n2、在配置文件中进行配置，配置参数同 postcss-px-to-viewport 一致。\n\nvite 中使用 require 报错，require is not defined\n\n解决办法：安装插件 vite-plugin-require-transform\n\nnpm install vite-plugin-require-transform -D\n\n\n1\n\n\n在 vite.config.js 中配置一下\n\nimport { defineConfig } from 'vite'\nimport requireTransform from 'vite-plugin-require-transform';\n \nexport default defineConfig({\n  plugins: [\n    requireTransform({\n      fileRegex: /^(?!.*node_modules).*\\.(js|jsx|ts|tsx|vue)$/\n    }),\n  ],\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n现在就可以在项目中使用 require 了\n\n\n# 兼容传统浏览器\n\n如果需要兼容传统浏览器，则需要使用 @vitejs/plugin-legacy\n\nnpm install @vitejs/plugin-legacy -D\n\n\n1\n\n\n在 vite.config.js 中配置如下：\n\nimport { defineConfig } from 'vite'\nimport legacy from '@vitejs/plugin-legacy'\n\nexport default defineConfig({\n  plugins: [\n    legacy({\n      targets: [\"> 0.1%\", \"last 200 versions\", \"not dead\", \"IE 11\"],\n      // additionalLegacyPolyfills: ['regenerator-runtime/runtime'],\n      // polyfills: [\n      //   'es.symbol',\n      //   'es.promise',\n      //   'es.promise.finally',\n      //   'es/map',\n      //   'es/set',\n      //   'es.array.filter',\n      //   'es.array.for-each',\n      //   'es.array.flat-map',\n      //   'es.object.define-properties',\n      //   'es.object.define-property',\n      //   'es.object.get-own-property-descriptor',\n      //   'es.object.get-own-property-descriptors',\n      //   'es.object.keys',\n      //   'es.object.to-string',\n      //   'web.dom-collections.for-each',\n      //   'esnext.global-this',\n      //   'esnext.string.match-all',\n      // ],\n    })\n  ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n在 vite 中 process.env 已被遗弃，官方推荐使用 import.meta.env.MODE 来判断生产环境还是开发环境",normalizedContent:"搭建 vite 项目\n使用 npm：\n\n// vite2（需要 node.js 版本 >= 12.0.0。）\nnpm init vite@latest\n\n// vite3（需要node.js版本18+或20+）\nnpm create vite@latest\n\n\n1\n2\n3\n4\n5\n\n\n使用 vite 创建 vue 项目\n\n// 这个命令会安装和执行 create-vue，它是 vue 提供的官方脚手架工具\nnpm create vue@latest\n\n\n1\n2\n\n\n使用 yarn：\n\nyarn create vite\n\n\n1\n\n\n也可以通过附加的命令行选项直接指定项目名称和你想要使用的模板。例如构建一个 vite + vue 项目：\n\n// npm 6.x\nnpm create vite@latest my-vue-app --template vue\n\n // npm 7+, 需要额外加 --:\nnpm create vite@latest my-vue-app -- --template vue\n\n // yarn\nyarn create vite my-vue-app --template vue\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n更多模板选项：vue，vue-ts，react，react-ts\n\n\n# jsx 语法配置\n\n如果想在项目中使用 jsx 来开发，则需要安装另一款插件：\n\nnpm install @vitejs/plugin-vue-jsx -d\n\n\n1\n\n\n然后在 vite.config.js 文件中增加如下配置\n\nimport { defineconfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport vuejsx from '@vitejs/plugin-vue-jsx';\n\n// https://vitejs.dev/config/\nexport default defineconfig({\n  plugins: [vue(), vuejsx()]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n至此，就可以在项目中愉快地使用 jsx 来开发了。\n\n\n# postcss-px-to-viewport 移动端适配\n\n如果是做移动端适配时，则可以使用 postcss-px-to-viewport 插件：\n\nnpm install postcss-px-to-viewport -d\n\n\n1\n\n\n则 vite.config.js 中配置项更改如下：\n\nimport { defineconfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport vuejsx from '@vitejs/plugin-vue-jsx';\nimport postcsspxtoviewport from 'postcss-px-to-viewport'\n\n// https://vitejs.dev/config/\nexport default defineconfig({\n  plugins: [vue(), vuejsx()],\n  css: {\n    postcss: {\n      plugins: [\n        postcsspxtoviewport({\n          unittoconvert: 'px', // 要转化的单位\n          viewportwidth: 750, // ui设计稿的宽度\n          unitprecision: 6, // 转换后的精度，即小数点位数\n          proplist: ['*'], // 指定转换的css属性的单位，*代表全部css属性的单位都进行转换\n          viewportunit: 'vw', // 指定需要转换成的视窗单位，默认vw\n          fontviewportunit: 'vw', // 指定字体需要转换成的视窗单位，默认vw\n          selectorblacklist: ['ignore-'], // 指定不转换为视窗单位的类名，\n          minpixelvalue: 1, // 默认值1，小于或等于1px则不进行转换\n          mediaquery: true, // 是否在媒体查询的css代码中也进行转换，默认false\n          replace: true, // 是否转换后直接更换属性值\n          exclude: [/node_modules/], // 设置忽略文件，用正则做目录名匹配\n          //exclude: [],\n          landscape: false // 是否处理横屏情况\n        })\n      ]\n    }\n  }\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n现在在项目中使用 px，它会自动转成 vw 了。\n\n\n# postcss-pxtorem 移动端适配\n\n也可以使用 postcss-pxtorem 插件来做移动端适配\n\nnpm install postcss-pxtorem -d\n\n\n1\n\n\n然后在 vite.config.ts 中增加如下配置\n\nimport postcsspxtorem from 'postcss-pxtorem'\n\ncss: {\n  postcss: {\n    plugins: [\n      postcsspxtorem({\n        rootvalue: 16,\n        unitprecision: 5,\n        replace: true,\n        proplist: ['*'],\n        selectorblacklist: ['.ignore-'],\n        exclude: /node_modules/i,\n        mediaquery: false,\n        minpixelvalue: 2\n      })\n    ]\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n由于是 ts 项目，此时可能会报类型警告问题，可以安装 @types/postcss-pxtorem 来解决\n\nnpm install @types/postcss-pxtorem -d\n\n\n1\n\n\n\n# autoprefixer 自动添加浏览器前缀\n\n安装 autoprefixer 插件来自动添加浏览器前缀\n\nnpm install autoprefixer -d\n\n\n1\n\n\n在 vite.config.ts 中增加如下配置\n\nimport autoprefixer from 'autoprefixer'\n\ncss: {\n  postcss: {\n    plugins: [\n      autoprefixer({\n        overridebrowserslist: [\n          \"android 4.1\",\n          \"ios 7.1\",\n          \"chrome > 31\",\n          \"ff > 31\",\n          \"ie >= 8\",\n          \"last 50 versions\",\n        ],\n        grid: true, // 是否使用 autoprefixer\n      })\n    ]\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 配置 @路径别名：\n\nimport path from 'path'\n\nresolve: {\n  alias: {\n    '@': path.resolve(__dirname, 'src')\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 开启 gzip 压缩\n\nimport compression from 'vite-plugin-compression'\n\nplugins: [\n  compression( {\n    algorithm: 'gzip',\n    ext: '.gz',\n    deleteoriginfile: true,  //是否删除源文件\n    threshold: 1024, // 大于1k的进行压缩\n    filter: /\\.(js|css|html|svg)$/,\n  })\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 开启打包后 js、css、图片等文件夹分离\n\nbuild: {\n  sourcemap: false,\n  chunksizewarninglimit: 1500,\n  rollupoptions: {\n    output: {\n      manualchunks(id) {\n        if (id.includes('node_modules')) {\n          return id\n            .tostring()\n            .split('node_modules/')[1]\n            .split('/')[0]\n            .tostring()\n        }\n      },\n      entryfilenames: 'assets/js/[name]-[hash].js',\n      assetfilenames: 'assets/[ext]/[name]-[hash].[ext]',\n      chunkfilenames: ( chunkinfo ) => {\n        const facademoduleid = chunkinfo.facademoduleid ? chunkinfo.facademoduleid.split('/') : [];\n        const filename = facademoduleid[facademoduleid.length - 2] || '[name]';\n        return `assets/js/${filename}-[hash].js`\n      }\n    }\n  },\n  minify: 'terser',\n  terseroptions: {\n    compress: {\n      drop_console: true,\n      drop_debugger: true\n    },\n    format: {\n      comments: false\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# vue-router 配置\n\n1、安装 vue-router\n\nnpm install vue-router\n\n\n1\n\n\n2、在 src 文件夹下建立 router 文件夹，在该文件夹下新建 index.ts 文件，配置如下：\n\nimport { createrouter, createwebhistory, routerecordraw } from 'vue-router'\n\nconst routes:array<routerecordraw> = [\n  {\n    path: '/',\n    component: () => import(/* webpackchunkname: 'home' */ '@/views/home.vue'),\n    name: 'home',\n    meta: {\n      title: '首页'\n    }\n  }\n]\n\nconst router = createrouter({\n  history: createwebhistory(import.meta.env.base_url),\n  routes\n})\n\n// tslint:disable-next-line\nrouter.beforeeach((to) => {\n  if (to.meta.title) {\n    document.title = to.meta.title as string\n  }\n})\n\nexport default router\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n3、在 main.ts 入口文件中引入 route 并使用它\n\nimport router from \"./router\"\n\nconst app=createapp( app )\napp.use(router)\n\n\n1\n2\n3\n4\n\n\n在路由配置文件中导入.vue 文件时，可能会报错无法找到模块等警告。\n\n解决办法，在 vite-env.d.ts 增加如下代码：\n\ndeclare module '*.vue' {\n  import type { definecomponent } from 'vue'\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types\n  const component: definecomponent<{}, {}, any>\n  export default component\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n此时，警告就会消失的\n\n\n# 按需自动导入\n\n在 vue3 开发中，经常需要导入各种 api，如 ref，reactive，computed，watch，各种生命周期，路由相关的 api 等等，觉得特繁琐，这时候我们可以使用另一款自动导出插件 unplugin-auto-import 了。\n\n安装插件 unplugin-auto-import\n\nnpm install -d unplugin-auto-import\n\n\n1\n\n\n现在 vite.config.js 文件配置更改如下：\n\nimport { defineconfig } from 'vite'\nimport autoimport from 'unplugin-auto-import/vite'\n\n// https://vitejs.dev/config/\nexport default defineconfig({\n  plugins: [\n      autoimport({\n        imports: ['vue', 'vue-router']\n      })\n  ]\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n现在开发再也不用导入与 vue、vue-router 相关的 api 了，可以直接使用，其他的插件会帮我们解决。\n\n\n# eslint 和 prettier 配置\n\n1、安装 eslint 相关插件\n\nnpm install --save-dev eslint eslint-plugin-vue @typescript-eslint/parser @typescript-eslint/eslint-plugin\n\n\n1\n\n\n2、创建或更新.eslintrc.cjs 配置文件，配置如下\n\nmodule.exports = {\n  root: true,\n  env: {\n    node: true,\n  },\n  extends: [\n    'eslint:recommended',\n    'plugin:vue/vue3-recommended',\n    'plugin:@typescript-eslint/recommended',\n    'prettier',\n    'plugin:prettier/recommended'\n  ],\n  parseroptions: {\n    parser: '@typescript-eslint/parser',\n    ecmaversion: 2020,\n    sourcetype: 'module',\n  },\n  rules: {\n    'vue/no-multiple-template-root': 'off',\n    '@typescript-eslint/no-explicit-any': 'off',\n  },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n3、安装 prettier 相关插件\n\nnpm install --save-dev prettier eslint-config-prettier eslint-plugin-prettier\n\n\n1\n\n\n4、创建或更新.prettierrc 文件\n\n{\n  \"singlequote\": true,\n  \"semi\": false,\n  \"trailingcomma\": \"all\"\n}\n\n\n1\n2\n3\n4\n5\n\n\n5、创建.eslintignore 文件和.prettierignore 文件\n\n// .eslintignore配置代码\nnode_modules\ndist\n\n\n// .prettierignore配置代码\nnode_modules\ndist\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n6、更新 package.json，添加如下脚本命令\n\n{\n  'scripts': {\n    \"lint\": \"eslint --fix --ext .ts,.vue src\",\n    \"format\": \"prettier --write \\\"src/**/*.{js,ts,vue,json,css,scss,md}\\\"\"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n现在执行 npm run lint 可能会报如下错误：如 ref、reactive is not defined 等问题。这是因为 ts 未识别到 vue api，没有相应的模块声明文件。\n\n解决：在 vite.config.js 中配置，并在 tsconfig.json 中引入。\n\nplugins: [\n  autoimport({\n    dts: 'src/auto-imports.d.ts', // 可以自定义文件生成的位置，默认是根目录下\n    imports: ['vue', 'vue-router'],\n  })\n]\n\n\n1\n2\n3\n4\n5\n6\n\n\n在 tsconfig.json 中配置如下：\n\n\"include\": [\"env.d.ts\", \"src/**/*\", \"src/**/*.vue\", \"./auto-imports.d.ts\"]\n\n\n1\n\n\n这时候还是会报错，这是因为因为还没配置自动导入相应的 eslint 规则\n\n解决：在 vite.config.js 中的 autoimport 中配置生成对应的.eslintrc-auto-import.json 配置文件，并在.eslintrc 中引入\n\nplugins: [\n  autoimport({\n    dts: 'src/auto-imports.d.ts', // 可以自定义文件生成的位置，默认是根目录下\n    imports: ['vue', 'vue-router'],\n    eslintrc: {\n      enabled: true,  // 1、改为true用于生成eslint配置。2、生成后改回false，避免重复生成消耗\n    }\n  })\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n在.eslintrc.cjs 中的 extentds 中配置如下：\n\n'extends': [\n  // ... 默认配置不用修改\n  \"./.eslintrc-auto-import.json\"  // 新加的\n]\n\n\n1\n2\n3\n4\n\n\n此时重新启动项目后，可能会遇到这种错误，如 component name \"home\" should always be multi-word，这是因为项目默认开启了驼峰命名，可在.eslintrc.cjs 中的 rules 下添加如下配置\n\n\"vue/multi-word-component-names\": \"off\"\n\n\n1\n\n\n至此，重启项目，能正确运行了。\n\n\n# 配置 css 预处理器 less 或 scss 等\n\n1、安装 less 相关的包\n\nnpm install less less-loader -d\n\n\n1\n\n\n2、在 vite.config.ts 中增加如下配置\n\n{\n  css: {\n    preprocessoroptions: {\n      less: true\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n3、在需要使用 less 的组件中使用如下：\n\n<style scoped lang=\"less\"></style>\n\n\n1\n\n\n\n# 完整配置\n\n此时，vite.config.ts 中完整配置如下：\n\nimport { defineconfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport path from 'path'\nimport postcsspxtorem from 'postcss-pxtorem'\nimport autoprefixer from 'autoprefixer'\nimport compression from 'vite-plugin-compression'\nimport autoimport from 'unplugin-auto-import/vite'\n\nexport default defineconfig( {\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, 'src')\n    }\n  },\n  plugins: [\n    vue(),\n    compression( {\n      algorithm: 'gzip',\n      ext: '.gz',\n      deleteoriginfile: true,  //是否删除源文件\n      threshold: 1024, // 大于1k的进行压缩\n      filter: /\\.(js|css|html|svg)$/,\n    } ),\n    autoimport( {\n      dts: 'src/auto-imports.d.ts',\n      imports: [\n        'vue',\n        'vue-router',\n      ],\n      eslintrc: {\n        enabled: false,  // 1、改为true用于生成eslint配置。2、生成后改回false，避免重复生成消耗\n      }\n    })\n  ],\n  css: {\n    postcss: {\n      plugins: [\n        postcsspxtorem({\n          rootvalue: 16,\n          unitprecision: 5,\n          replace: true,\n          proplist: ['*'],\n          selectorblacklist: ['.ignore-'],\n          exclude: /node_modules/i,\n          mediaquery: false,\n          minpixelvalue: 2\n        }),\n        autoprefixer({\n          overridebrowserslist: [\n            \"android 4.1\",\n            \"ios 7.1\",\n            \"chrome > 31\",\n            \"ff > 31\",\n            \"ie >= 8\",\n            \"last 50 versions\",\n          ],\n          grid: true, // 是否使用 autoprefixer\n        })\n      ]\n    },\n    preprocessoroptions: {\n      less: true\n    }\n  },\n  build: {\n    sourcemap: false,\n    chunksizewarninglimit: 1500,\n    rollupoptions: {\n      output: {\n        manualchunks(id) {\n          if (id.includes('node_modules')) {\n            return id\n              .tostring()\n              .split('node_modules/')[1]\n              .split('/')[0]\n              .tostring()\n          }\n        },\n        entryfilenames: 'assets/js/[name]-[hash].js',\n        assetfilenames: 'assets/[ext]/[name]-[hash].[ext]',\n        chunkfilenames: ( chunkinfo ) => {\n          const facademoduleid = chunkinfo.facademoduleid ? chunkinfo.facademoduleid.split('/') : [];\n          const filename = facademoduleid[facademoduleid.length - 2] || '[name]';\n          return `assets/js/${filename}-[hash].js`\n        }\n      }\n    },\n    minify: 'terser',\n    terseroptions: {\n      compress: {\n        drop_console: true,\n        drop_debugger: true\n      },\n      format: {\n        comments: false\n      }\n    }\n  }\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n\n\n.eslintrc.cjs 文件完整配置：\n\nmodule.exports = {\n  root: true,\n  env: {\n    node: true,\n  },\n  extends: [\n    'eslint:recommended',\n    'plugin:vue/vue3-recommended',\n    'plugin:@typescript-eslint/recommended',\n    'prettier',\n    'plugin:prettier/recommended',\n    \"./.eslintrc-auto-import.json\"\n  ],\n  parser: 'vue-eslint-parser',\n  parseroptions: {\n    parser: '@typescript-eslint/parser',\n    ecmaversion: 2020,\n    sourcetype: 'module',\n  },\n  rules: {\n    'vue/no-multiple-template-root': 'off',\n    '@typescript-eslint/no-explicit-any': 'off',\n    \"vue/multi-word-component-names\": \"off\"\n  }\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n补充：\n\n由于插件 postcss-px-to-viewport 不再维护了，继续使用的话，控制台可能会报如下错误，postcss-px-to-viewport: postcss.plugin was deprecated. migration guide: https://evilmartians.com/chronicles/postcss-8-plugin-migration\n，推荐使用插件 postcss-px-to-viewport-8-plugin\n\n1、安装插件\n\nnpm install postcss-px-to-viewport-8-plugin -d\n\n\n1\n\n\n2、在配置文件中进行配置，配置参数同 postcss-px-to-viewport 一致。\n\nvite 中使用 require 报错，require is not defined\n\n解决办法：安装插件 vite-plugin-require-transform\n\nnpm install vite-plugin-require-transform -d\n\n\n1\n\n\n在 vite.config.js 中配置一下\n\nimport { defineconfig } from 'vite'\nimport requiretransform from 'vite-plugin-require-transform';\n \nexport default defineconfig({\n  plugins: [\n    requiretransform({\n      fileregex: /^(?!.*node_modules).*\\.(js|jsx|ts|tsx|vue)$/\n    }),\n  ],\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n现在就可以在项目中使用 require 了\n\n\n# 兼容传统浏览器\n\n如果需要兼容传统浏览器，则需要使用 @vitejs/plugin-legacy\n\nnpm install @vitejs/plugin-legacy -d\n\n\n1\n\n\n在 vite.config.js 中配置如下：\n\nimport { defineconfig } from 'vite'\nimport legacy from '@vitejs/plugin-legacy'\n\nexport default defineconfig({\n  plugins: [\n    legacy({\n      targets: [\"> 0.1%\", \"last 200 versions\", \"not dead\", \"ie 11\"],\n      // additionallegacypolyfills: ['regenerator-runtime/runtime'],\n      // polyfills: [\n      //   'es.symbol',\n      //   'es.promise',\n      //   'es.promise.finally',\n      //   'es/map',\n      //   'es/set',\n      //   'es.array.filter',\n      //   'es.array.for-each',\n      //   'es.array.flat-map',\n      //   'es.object.define-properties',\n      //   'es.object.define-property',\n      //   'es.object.get-own-property-descriptor',\n      //   'es.object.get-own-property-descriptors',\n      //   'es.object.keys',\n      //   'es.object.to-string',\n      //   'web.dom-collections.for-each',\n      //   'esnext.global-this',\n      //   'esnext.string.match-all',\n      // ],\n    })\n  ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n在 vite 中 process.env 已被遗弃，官方推荐使用 import.meta.env.mode 来判断生产环境还是开发环境",charsets:{cjk:!0}},{title:"vue3之使用vite搭建组件库",frontmatter:{title:"vue3之使用vite搭建组件库",date:"2024-08-19T17:53:07.000Z",permalink:"/pages/7009d7/",categories:["Vue3"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/02.Vue3/07.vue3%E4%B9%8B%E4%BD%BF%E7%94%A8vite%E6%90%AD%E5%BB%BA%E7%BB%84%E4%BB%B6%E5%BA%93.html",relativePath:"《Vue》笔记/02.Vue3/07.vue3之使用vite搭建组件库.md",key:"v-b2180af4",path:"/pages/7009d7/",lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:null,content:'在使用 vite 相继搭建了 react 组件库、js 工具函数库后屡试不爽，于是又搭建了移动端 vue 的组件库，由于每次开发使用到的组件基本都是那几个，因此想着封装一下，方便后续偷懒。\n\n1、搭建基础环境\n\nnpm create vite@latest vue-lib-lei -- --template vue-ts\n\n\n1\n\n\n2、进入项目并安装相关依赖\n\ncd vue-lib-lei\nnpm install\n\n\n1\n2\n\n\n3、项目运行无误后，接下来开始更改相关配置文件。\n\n// 将tsconfig.json配置文件更改如下\n\n{\n\t"compilerOptions": {\n    "target": "ESNext",\n    "module": "ESNext",\n    "baseUrl": ".",\n    "paths": {\n      "@/*": ["src/*"],\n    },\n    "strict": true,\n    "moduleResolution": "node",\n    "esModuleInterop": true,\n    "skipLibCheck": true,\n    "forceConsistentCasingInFileNames": true,\n    "allowImportingTsExtensions": true,\n    "declaration": true,\n    "outDir": "dist",\n    "emitDeclarationOnly": true,\n    "isolatedModules": true\n  },\n  "include": ["packages"]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n4、安装依赖并更改 vite.config.ts 配置文件\n\nnpm install vite-plugin-dts vite-plugin-static-copy -D\n\n\n1\n\n\n// vite.config.ts\nimport { defineConfig } from \'vite\'\nimport vue from \'@vitejs/plugin-vue\'\nimport path from \'path\'\nimport dts from \'vite-plugin-dts\';\nimport {viteStaticCopy } from \'vite-plugin-static-copy\';\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      \'@\': path.resolve(__dirname, \'./src\')\n    }\n  },\n  plugins: [\n    vue(),\n    dts({\n      insertTypesEntry: true,\n    }),\n    viteStaticCopy({\n      targets: [\n        {\n          src: \'src/assets/*\',\n          dest: \'assets\'\n        }\n      ]\n    }),\n  ],\n  build: {\n    outDir: \'dist\',\n    assetsDir: \'assets\',\n    lib: {\n      entry: path.resolve(__dirname, \'./packages/index.ts\'),\n      name: \'vue-lib-lei\',\n      fileName: (format) => `vue-lib-lei.${format}.js`\n    },\n    rollupOptions: {\n      external: [\'vue\'],\n      output: {\n        globals: {\n          vue: \'Vue\'\n        },\n      },\n    },\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n5、更新 package.json 文件，添加如下配置\n\n"type": "module",\n"main": "./dist/vue-lib-lei.umd.js",\n"module": "./dist/vue-lib-lei.es.js",\n"types": "./dist/index.d.ts",\n"files": [\n  "dist"\n],\n"peerDependencies": {\n  "vue": ">=3.4"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n6、准备工作完毕后，现在开始创建组件，由于上面配置的是 packages 目录，因此创建 packages 目录，后续开发的组件都在该目录下\n\n创建 Button 目录，该目录下依次创建 Button.vue 文件、index.ts 文件\n/packages/Button/Button.vue 文件\n\n<template>\n\t<button>按钮</button>\n</template>\n\n<script lang="ts" setup><\/script>\n<script lang="ts">\nexport default {\n\tname: "MyButton"\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n/packages/Button/index.ts 文件\n\nimport type { App } from "vue"\nimport Button from \'./Header.vue\'\n\nexport default {\n\tinstall: (app: App) {\n\t\tapp.component(Popup.name as string, Popup);\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n在 /packages/index.ts 文件中导入所有组件\n\nimport type { App } from \'vue\'\n\nimport MyButton from \'./Button/Button.vue\'\n\nconst components = [MyButton]\n\nconst install = (app: App) => {\n\tcomponents.forEach(component => {\n\t\tapp.component(component.name as string, component)\n\t})\n}\n\nexport { MyButton }\n\nexport default {\n\tinstall\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n然后就可以打包发布到 npm 上。\n\n使用：\n1、安装 vue-lib-lei\n\nnpm install vue-lib-lei\n\n\n1\n\n\n2、全局导入\n\n// /src/main.ts\nimport { createApp } from \'vue\';\nimport App from \'./App.vue\';\nimport VueLibLei from \'vue-lib-lei\';\nimport \'vue-lib-lei/dist/style.css\';\n\n\nconst app = createApp(App);\napp.use(VueLibLei);\napp.mount(\'#app\');\n\n// 组件中使用时\n<MyButton></MyButton>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n3、按需引入\n\n// /src/main.ts\nimport { MyButton } from \'vue-lib-lei\';\nimport "vue-lib-lei/dist/style.css";\n\nconst app = createApp(App);\napp.component(MyButton.name, MyButton);\napp.mount(\'#app\');\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n4、也可以不在 main.ts 中配置，直接在组件中引入使用\n\nimport { MyButton } from \'vue-lib-lei\';\nimport "vue-lib-lei/dist/style.css";\n\n\n<MyButton></MyButton>\n\n\n1\n2\n3\n4\n5\n',normalizedContent:'在使用 vite 相继搭建了 react 组件库、js 工具函数库后屡试不爽，于是又搭建了移动端 vue 的组件库，由于每次开发使用到的组件基本都是那几个，因此想着封装一下，方便后续偷懒。\n\n1、搭建基础环境\n\nnpm create vite@latest vue-lib-lei -- --template vue-ts\n\n\n1\n\n\n2、进入项目并安装相关依赖\n\ncd vue-lib-lei\nnpm install\n\n\n1\n2\n\n\n3、项目运行无误后，接下来开始更改相关配置文件。\n\n// 将tsconfig.json配置文件更改如下\n\n{\n\t"compileroptions": {\n    "target": "esnext",\n    "module": "esnext",\n    "baseurl": ".",\n    "paths": {\n      "@/*": ["src/*"],\n    },\n    "strict": true,\n    "moduleresolution": "node",\n    "esmoduleinterop": true,\n    "skiplibcheck": true,\n    "forceconsistentcasinginfilenames": true,\n    "allowimportingtsextensions": true,\n    "declaration": true,\n    "outdir": "dist",\n    "emitdeclarationonly": true,\n    "isolatedmodules": true\n  },\n  "include": ["packages"]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n4、安装依赖并更改 vite.config.ts 配置文件\n\nnpm install vite-plugin-dts vite-plugin-static-copy -d\n\n\n1\n\n\n// vite.config.ts\nimport { defineconfig } from \'vite\'\nimport vue from \'@vitejs/plugin-vue\'\nimport path from \'path\'\nimport dts from \'vite-plugin-dts\';\nimport {vitestaticcopy } from \'vite-plugin-static-copy\';\n\nexport default defineconfig({\n  resolve: {\n    alias: {\n      \'@\': path.resolve(__dirname, \'./src\')\n    }\n  },\n  plugins: [\n    vue(),\n    dts({\n      inserttypesentry: true,\n    }),\n    vitestaticcopy({\n      targets: [\n        {\n          src: \'src/assets/*\',\n          dest: \'assets\'\n        }\n      ]\n    }),\n  ],\n  build: {\n    outdir: \'dist\',\n    assetsdir: \'assets\',\n    lib: {\n      entry: path.resolve(__dirname, \'./packages/index.ts\'),\n      name: \'vue-lib-lei\',\n      filename: (format) => `vue-lib-lei.${format}.js`\n    },\n    rollupoptions: {\n      external: [\'vue\'],\n      output: {\n        globals: {\n          vue: \'vue\'\n        },\n      },\n    },\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n5、更新 package.json 文件，添加如下配置\n\n"type": "module",\n"main": "./dist/vue-lib-lei.umd.js",\n"module": "./dist/vue-lib-lei.es.js",\n"types": "./dist/index.d.ts",\n"files": [\n  "dist"\n],\n"peerdependencies": {\n  "vue": ">=3.4"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n6、准备工作完毕后，现在开始创建组件，由于上面配置的是 packages 目录，因此创建 packages 目录，后续开发的组件都在该目录下\n\n创建 button 目录，该目录下依次创建 button.vue 文件、index.ts 文件\n/packages/button/button.vue 文件\n\n<template>\n\t<button>按钮</button>\n</template>\n\n<script lang="ts" setup><\/script>\n<script lang="ts">\nexport default {\n\tname: "mybutton"\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n/packages/button/index.ts 文件\n\nimport type { app } from "vue"\nimport button from \'./header.vue\'\n\nexport default {\n\tinstall: (app: app) {\n\t\tapp.component(popup.name as string, popup);\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n在 /packages/index.ts 文件中导入所有组件\n\nimport type { app } from \'vue\'\n\nimport mybutton from \'./button/button.vue\'\n\nconst components = [mybutton]\n\nconst install = (app: app) => {\n\tcomponents.foreach(component => {\n\t\tapp.component(component.name as string, component)\n\t})\n}\n\nexport { mybutton }\n\nexport default {\n\tinstall\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n然后就可以打包发布到 npm 上。\n\n使用：\n1、安装 vue-lib-lei\n\nnpm install vue-lib-lei\n\n\n1\n\n\n2、全局导入\n\n// /src/main.ts\nimport { createapp } from \'vue\';\nimport app from \'./app.vue\';\nimport vueliblei from \'vue-lib-lei\';\nimport \'vue-lib-lei/dist/style.css\';\n\n\nconst app = createapp(app);\napp.use(vueliblei);\napp.mount(\'#app\');\n\n// 组件中使用时\n<mybutton></mybutton>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n3、按需引入\n\n// /src/main.ts\nimport { mybutton } from \'vue-lib-lei\';\nimport "vue-lib-lei/dist/style.css";\n\nconst app = createapp(app);\napp.component(mybutton.name, mybutton);\napp.mount(\'#app\');\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n4、也可以不在 main.ts 中配置，直接在组件中引入使用\n\nimport { mybutton } from \'vue-lib-lei\';\nimport "vue-lib-lei/dist/style.css";\n\n\n<mybutton></mybutton>\n\n\n1\n2\n3\n4\n5\n',charsets:{cjk:!0}},{title:"状态管理Pinia",frontmatter:{title:"状态管理Pinia",date:"2022-03-29T18:33:33.000Z",permalink:"/pages/c18c83/",categories:["Vue3"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/02.Vue3/03.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86Pinia.html",relativePath:"《Vue》笔记/02.Vue3/03.状态管理Pinia.md",key:"v-3314645a",path:"/pages/c18c83/",headers:[{level:3,title:"1、安装pinia",slug:"_1、安装pinia",normalizedTitle:"1、安装 pinia",charIndex:237},{level:3,title:"2、创建pinia并将其传递给根应用程序（在main.ts中）：",slug:"_2、创建pinia并将其传递给根应用程序-在main-ts中",normalizedTitle:"2、创建 pinia 并将其传递给根应用程序（在 main.ts 中）：",charIndex:276},{level:3,title:"3、在src文件夹下新建pinia文件夹（名字可随意）,在该文件夹下新建store.ts（例子是使用ts的，如果没有使用ts则直接store.js即可，名字随意）。代码如下：",slug:"_3、在src文件夹下新建pinia文件夹-名字可随意-在该文件夹下新建store-ts-例子是使用ts的-如果没有使用ts则直接store-js即可-名字随意-。代码如下",normalizedTitle:"3、在 src 文件夹下新建 pinia 文件夹（名字可随意）, 在该文件夹下新建 store.ts（例子是使用 ts 的，如果没有使用 ts 则直接 store.js 即可，名字随意）。代码如下：",charIndex:389},{level:3,title:"4、这样就可以在项目其他地方进行使用，如新建Pinia.vue文件，代码如下：",slug:"_4、这样就可以在项目其他地方进行使用-如新建pinia-vue文件-代码如下",normalizedTitle:"4、这样就可以在项目其他地方进行使用，如新建 pinia.vue 文件，代码如下：",charIndex:1301}],excerpt:"<p>在学习 vue3.x 时，看官方文档上极力推荐 Pinia，更强大，功能更丰富，因此也学习了一下，使用过后发现确实比 vuex 精简了许多。</p>\n",lastUpdated:"3/4/2025, 5:46:30 PM",lastUpdatedTimestamp:174108159e4,headersStr:"1、安装pinia 2、创建pinia并将其传递给根应用程序（在main.ts中）： 3、在src文件夹下新建pinia文件夹（名字可随意）,在该文件夹下新建store.ts（例子是使用ts的，如果没有使用ts则直接store.js即可，名字随意）。代码如下： 4、这样就可以在项目其他地方进行使用，如新建Pinia.vue文件，代码如下：",content:"在学习 vue3.x 时，看官方文档上极力推荐 Pinia，更强大，功能更丰富，因此也学习了一下，使用过后发现确实比 vuex 精简了许多。\n\n对比了下，发现 Pinia 和 vuex 使用上还是挺相似的：\n\n相同点：都有 state、actions、getters，都是在 actions 中操作 state。\n\n不同点：Pinia 中没有 mutations，Pinia 中在 actions 中操作 state，是直接通过 this 访问相应状态来进行更改。\n\n\n# 1、安装 pinia\n\nnpm install pinia\n\n\n1\n\n\n\n# 2、创建 pinia 并将其传递给根应用程序（在 main.ts 中）：\n\nimport { createPinia } from 'pinia';\n\napp.use(createPinia());\n\n\n1\n2\n3\n\n\n\n# 3、在 src 文件夹下新建 pinia 文件夹（名字可随意）, 在该文件夹下新建 store.ts（例子是使用 ts 的，如果没有使用 ts 则直接 store.js 即可，名字随意）。代码如下：\n\nimport { defineStore } from \"pinia\"\nimport localstore from \"@/utils/localstoreUtils\"   // 对localStorage进行了封装\n\nexport const useStore = defineStore({\n  id: 'globalState',\n  state: () => ({\n    name: '张三',\n    age: 34\n  }),\n  actions: {\n    changeInfo (payload: {name: string, age: number}) {\n      this.name = payload.name\n      this.age = payload.age\n      localstore.setItem('userInfo', JSON.stringify(payload))\n    }\n  },\n  getters: {\n    getInfo (state) {\n      const infoStr = localstore.getItem('userInfo') ? JSON.parse(localstore.getItem('userInfo')) : \"\"\n      if (infoStr) {\n        return {\n          name: infoStr.name,\n          age: infoStr.age\n        }\n      } else {\n        return state\n      }\n    }\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 4、这样就可以在项目其他地方进行使用，如新建 Pinia.vue 文件，代码如下：\n\n<template>\n  <div class=\"wrapper\">\n    Pinia学习\n    <p>姓名：{{info.name}}</p>\n    <p>年龄：{{info.age}}</p>\n    <button @click=\"handleChange\">更改信息</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed } from 'vue'\n  import { useStore } from '@/pinia/store'\n  const store = useStore()\n  const info = computed(() => {\n    return store.getInfo\n  })\n\n  function handleChange () {\n    store.changeInfo({ name: '李四', age: 45 })\n  }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n也可以通过方式进行修改，patch方式进行修改，patch 接收两种类型的参数，函数和对象\n\n$patch + 对象\n$patch + 函数：通过函数方式去使用的时候，函数接受一个 state 的参数，state 就是 store 仓库中的 state\n\nstore.$patch({name: '王五', age: 55})\n或者\nstore.$patch((state) => {\n  state.name = \"赵六\"\n  state.age = 37\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nps：上述 getInfo 对应了 store.ts 中 getters 中的 getInfo 方法，changeInfo 对应了 actions 中的 changeInfo 方法。\n\n如果需要进行异步操作的话，还是跟使用 vuex 一样，在 actions 中的方法里进行。\n\npinia 解构不具有响应式，可以使用 storeToRefs 解决，例如：\n\nimport { storeToRefs } from 'pinia'\nimport { useStore } from '@/pinia/store'\nconst store = useStore()\nconst { name, age } = storeToRefs(store)\n\n\n1\n2\n3\n4\n\n\n数据持久化插件：pinia-plugin-persistedstate\n安装：\n\nnpm install pinia-plugin-persistedstate\n\n\n1\n\n\nvue3 中使用：\n在 main.js（或 main.ts）中增加如下代码：\n\nimport { createPinia } from 'pinia'\nimport piniaPersist from 'pinia-plugin-persistedstate'\n\nconst pinia = createPinia()\npinia.use(piniaPersist)\ncreateApp({}).use(pinia).mount('#app')\n\n\n1\n2\n3\n4\n5\n6\n\n\n在需要用到的地方使用：\n\nimport { defineStore } from 'pinia'\nexport const useUserStore = defineStore({\n  id: 'userStore',\n  state () {\n    return {\n      name: '张三',\n      age: 23\n    }\n  },\n  persist: true\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n以上为 true 表示开启了数据持久化，默认使用 localStorage，且缓存该 store 中的所有数据，如果想使用 sessionStorage 或者指定需要缓存的数据，更多配置如下：\n\nimport { defineStore } from 'pinia'\nexport const useUserStore = defineStore({\n  id: 'userStore',\n  state () {\n    return {\n      name: '张三',\n      age: 23\n    }\n  },\n  persist: {\n    key: 'userStore',  \n    storage: sessionStorage,\n    path: ['age']\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nps：persist 是一个对象时，里面有 key，storage 和 path 三个字段。\n\n其中 key 表示设置缓存 sessionStorage 或 localStorage 时的 key，如果没有设置该 key，则默认使用上面那个 id 值。\n\nstorage 可设置为 sessionStorage 或 localStorage，或者自定义 storage。\n\npath 是一个数组，用来定义需要持久化的数据，如果没有定义 path，则缓存所有数据",normalizedContent:"在学习 vue3.x 时，看官方文档上极力推荐 pinia，更强大，功能更丰富，因此也学习了一下，使用过后发现确实比 vuex 精简了许多。\n\n对比了下，发现 pinia 和 vuex 使用上还是挺相似的：\n\n相同点：都有 state、actions、getters，都是在 actions 中操作 state。\n\n不同点：pinia 中没有 mutations，pinia 中在 actions 中操作 state，是直接通过 this 访问相应状态来进行更改。\n\n\n# 1、安装 pinia\n\nnpm install pinia\n\n\n1\n\n\n\n# 2、创建 pinia 并将其传递给根应用程序（在 main.ts 中）：\n\nimport { createpinia } from 'pinia';\n\napp.use(createpinia());\n\n\n1\n2\n3\n\n\n\n# 3、在 src 文件夹下新建 pinia 文件夹（名字可随意）, 在该文件夹下新建 store.ts（例子是使用 ts 的，如果没有使用 ts 则直接 store.js 即可，名字随意）。代码如下：\n\nimport { definestore } from \"pinia\"\nimport localstore from \"@/utils/localstoreutils\"   // 对localstorage进行了封装\n\nexport const usestore = definestore({\n  id: 'globalstate',\n  state: () => ({\n    name: '张三',\n    age: 34\n  }),\n  actions: {\n    changeinfo (payload: {name: string, age: number}) {\n      this.name = payload.name\n      this.age = payload.age\n      localstore.setitem('userinfo', json.stringify(payload))\n    }\n  },\n  getters: {\n    getinfo (state) {\n      const infostr = localstore.getitem('userinfo') ? json.parse(localstore.getitem('userinfo')) : \"\"\n      if (infostr) {\n        return {\n          name: infostr.name,\n          age: infostr.age\n        }\n      } else {\n        return state\n      }\n    }\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 4、这样就可以在项目其他地方进行使用，如新建 pinia.vue 文件，代码如下：\n\n<template>\n  <div class=\"wrapper\">\n    pinia学习\n    <p>姓名：{{info.name}}</p>\n    <p>年龄：{{info.age}}</p>\n    <button @click=\"handlechange\">更改信息</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed } from 'vue'\n  import { usestore } from '@/pinia/store'\n  const store = usestore()\n  const info = computed(() => {\n    return store.getinfo\n  })\n\n  function handlechange () {\n    store.changeinfo({ name: '李四', age: 45 })\n  }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n也可以通过方式进行修改，patch方式进行修改，patch 接收两种类型的参数，函数和对象\n\n$patch + 对象\n$patch + 函数：通过函数方式去使用的时候，函数接受一个 state 的参数，state 就是 store 仓库中的 state\n\nstore.$patch({name: '王五', age: 55})\n或者\nstore.$patch((state) => {\n  state.name = \"赵六\"\n  state.age = 37\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nps：上述 getinfo 对应了 store.ts 中 getters 中的 getinfo 方法，changeinfo 对应了 actions 中的 changeinfo 方法。\n\n如果需要进行异步操作的话，还是跟使用 vuex 一样，在 actions 中的方法里进行。\n\npinia 解构不具有响应式，可以使用 storetorefs 解决，例如：\n\nimport { storetorefs } from 'pinia'\nimport { usestore } from '@/pinia/store'\nconst store = usestore()\nconst { name, age } = storetorefs(store)\n\n\n1\n2\n3\n4\n\n\n数据持久化插件：pinia-plugin-persistedstate\n安装：\n\nnpm install pinia-plugin-persistedstate\n\n\n1\n\n\nvue3 中使用：\n在 main.js（或 main.ts）中增加如下代码：\n\nimport { createpinia } from 'pinia'\nimport piniapersist from 'pinia-plugin-persistedstate'\n\nconst pinia = createpinia()\npinia.use(piniapersist)\ncreateapp({}).use(pinia).mount('#app')\n\n\n1\n2\n3\n4\n5\n6\n\n\n在需要用到的地方使用：\n\nimport { definestore } from 'pinia'\nexport const useuserstore = definestore({\n  id: 'userstore',\n  state () {\n    return {\n      name: '张三',\n      age: 23\n    }\n  },\n  persist: true\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n以上为 true 表示开启了数据持久化，默认使用 localstorage，且缓存该 store 中的所有数据，如果想使用 sessionstorage 或者指定需要缓存的数据，更多配置如下：\n\nimport { definestore } from 'pinia'\nexport const useuserstore = definestore({\n  id: 'userstore',\n  state () {\n    return {\n      name: '张三',\n      age: 23\n    }\n  },\n  persist: {\n    key: 'userstore',  \n    storage: sessionstorage,\n    path: ['age']\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nps：persist 是一个对象时，里面有 key，storage 和 path 三个字段。\n\n其中 key 表示设置缓存 sessionstorage 或 localstorage 时的 key，如果没有设置该 key，则默认使用上面那个 id 值。\n\nstorage 可设置为 sessionstorage 或 localstorage，或者自定义 storage。\n\npath 是一个数组，用来定义需要持久化的数据，如果没有定义 path，则缓存所有数据",charsets:{cjk:!0}},{title:"项目国际化vue-i18n",frontmatter:{title:"项目国际化vue-i18n",date:"2022-03-29T11:48:29.000Z",permalink:"/pages/2c51f3/",categories:["Vue3"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/02.Vue3/04.%E9%A1%B9%E7%9B%AE%E5%9B%BD%E9%99%85%E5%8C%96.html",relativePath:"《Vue》笔记/02.Vue3/04.项目国际化.md",key:"v-2b48a6f6",path:"/pages/2c51f3/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:"在项目中，我们有时候会遇到这样的需求，就是项目需要实现国际化处理，这里需要借助 vue-i18n\n\n1、安装 vue-i18n\n\nnpm install vue-i18n@next\n\n\n1\n\n\n建立如下结构的文件：\n\n\nen-us.ts 和 zh-cn.ts 分别用于存放英文语言包内容和中文语言包内容。\n\nindex.ts 文件代码如下：\n\nimport { createI18n } from 'vue-i18n'\nimport enUs from './lang/en-us'\nimport zhCn from './lang/zh-cn'\nimport store from '../store/index'\nconst language = store.getters.getLanguage\n\nconst i18n = createI18n({\n  legacy: false,  // // 使用 Composition API 模式，则需要将其设置为false\n  globalInjection: true,   // 全局注入 $t 函数\n  locale: language,\n  messages: {\n    'en-us': enUs,\n    'zh-cn': zhCn\n  }\n})\nexport default i18n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n这里引入了 vuex 是为了方便在语言切换后，刷新页面重新获取切换后的语言包。\n\nen-us.ts 文件代码如下：\n\nexport default {\n  home: {\n    title: 'TITLE',\n    name: 'NAME',\n    age: 'AGE'\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nzh-cn.ts 代码如下：\n\nexport default {\n  home: {\n    title: '标题',\n    name: '姓名',\n    age: '年龄'\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nvuex 部分文件结构如下：\n\n\n\n其中 changeLanguage.ts 文件代码如下：\n\nimport localstore from '@/utils/localstoreUtils'   // 对localStorage进行了封装\nimport { Commit } from 'vuex'\ninterface IState {\n  language: string\n}\nconst language = {\n  state: {\n    language: 'en-us'\n  },\n  mutations: {\n    setLanguage (state: IState, payload: IState): void {\n      state.language = payload.language\n    }\n  },\n  actions: {\n    changeLanguage (context: {commit: Commit}, payload: IState): void {\n      localstore.setItem('lang', payload.language)\n      context.commit('setLanguage', payload)\n    }\n  },\n  getters: {\n    getLanguage (state: IState): any {\n      const storeStr = localstore.getItem('lang')\n      if (storeStr !== null && storeStr) {\n        return storeStr\n      }\n      return state.language\n    }\n  }\n}\n\nexport default language\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\nindex.ts 文件代码如下：\n\nimport { createStore } from 'vuex'\nimport language from './modules/changeLanguage'\n\nexport default createStore({\n  state: {\n  },\n  mutations: {\n  },\n  actions: {\n  },\n  modules: {\n    language\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n然后在项目 src 文件夹下的 main.ts 中代码修改如下：\n\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\nimport './networking/index'\nimport i18n from './locales/index'\n\ncreateApp(App).use(store).use(router).use(i18n).mount('#app')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这样在其他地方就可以使用多语言。例如新建 language.vue 文件，代码如下：\n\n<template>\n  <div class=\"wrapper\">\n    多语言\n    <p>标题：{{$t('home.title')}}</p>\n    <p>姓名：{{$t('home.name')}}</p>\n    <p>年龄：{{$t('home.age')}}</p>\n    <p>当前语言：{{locales}}</p>\n    <button @click=\"changeLanguage\">按钮</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref } from 'vue'\n  import { useStore } from 'vuex'\n  import { useI18n } from 'vue-i18n'\n  const store = useStore()\n  const locales = ref(store.getters.getLanguage)\n  const t = useI18n()\n\n  function changeLanguage () {\n    locales.value = locales.value === 'zh-cn' ? 'en-us' : 'zh-cn'\n    t.locale.value = locales.value\n    store.dispatch('changeLanguage', { language: locales.value })\n  }\n\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n如果项目中引入了 vant 组件库，也需要做国际化处理，那么上面的 index.ts 文件则修改如下：\n\n// vue-i18n所需要引入的\nimport { createI18n } from 'vue-i18n'\n// 本地的文件夹\nimport enLocale from './en_us'\nimport zhLocale from './zh_cn'\n// vant所需要引入的\nimport { Locale } from 'vant'\n//vant中的文件夹  需要的语言和本地的语言保持一致\nimport enUS from 'vant/lib/locale/lang/en-US'\nimport zhCN from 'vant/lib/locale/lang/zh-CN'\n\nconst messages = {\n  en: {\n    ...enUS,\n    ...enLocale\n  },\n  zh: {\n    ...zhCN,\n    ...zhLocale\n  }\n}\n// 更新vant组件库本身的语言变化，支持国际化\nfunction vantLocales(lang: any) {\n  if (lang === 'en') {\n    Locale.use(lang, enUS)\n  } else if (lang === 'zh') {\n    Locale.use(lang, zhCN)\n  }\n}\n// 获取浏览器的语言\nconst lang = (navigator.language || 'en').toLocaleLowerCase()\nconst language = localStorage.getItem('language') || lang.split('-')[0] || 'zh'\nlocalStorage.setItem('language', language)\nconst i18n = createI18n({\n  //Not available in legacy mode 解决报错问题的配置项！！！\n  legacy: false,\n  // 全局注册 $t方法\n  globalInjection: true,\n  //设置初始化语言\n  locale: language,\n  // 设置备用语言\n  fallbackLocale: 'en',\n  messages\n})\nexport { i18n, vantLocales }\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n此时，main.ts 中修改如下：\n\n//引入上面配置好的语言文件\nimport { i18n, vantLocales } from './lang'\n//对vant组件进行初始化语言设置\nvantLocales(i18n.global.locale)\n\napp.use(i18n)\n\n\n1\n2\n3\n4\n5\n6\n",normalizedContent:"在项目中，我们有时候会遇到这样的需求，就是项目需要实现国际化处理，这里需要借助 vue-i18n\n\n1、安装 vue-i18n\n\nnpm install vue-i18n@next\n\n\n1\n\n\n建立如下结构的文件：\n\n\nen-us.ts 和 zh-cn.ts 分别用于存放英文语言包内容和中文语言包内容。\n\nindex.ts 文件代码如下：\n\nimport { createi18n } from 'vue-i18n'\nimport enus from './lang/en-us'\nimport zhcn from './lang/zh-cn'\nimport store from '../store/index'\nconst language = store.getters.getlanguage\n\nconst i18n = createi18n({\n  legacy: false,  // // 使用 composition api 模式，则需要将其设置为false\n  globalinjection: true,   // 全局注入 $t 函数\n  locale: language,\n  messages: {\n    'en-us': enus,\n    'zh-cn': zhcn\n  }\n})\nexport default i18n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n这里引入了 vuex 是为了方便在语言切换后，刷新页面重新获取切换后的语言包。\n\nen-us.ts 文件代码如下：\n\nexport default {\n  home: {\n    title: 'title',\n    name: 'name',\n    age: 'age'\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nzh-cn.ts 代码如下：\n\nexport default {\n  home: {\n    title: '标题',\n    name: '姓名',\n    age: '年龄'\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nvuex 部分文件结构如下：\n\n\n\n其中 changelanguage.ts 文件代码如下：\n\nimport localstore from '@/utils/localstoreutils'   // 对localstorage进行了封装\nimport { commit } from 'vuex'\ninterface istate {\n  language: string\n}\nconst language = {\n  state: {\n    language: 'en-us'\n  },\n  mutations: {\n    setlanguage (state: istate, payload: istate): void {\n      state.language = payload.language\n    }\n  },\n  actions: {\n    changelanguage (context: {commit: commit}, payload: istate): void {\n      localstore.setitem('lang', payload.language)\n      context.commit('setlanguage', payload)\n    }\n  },\n  getters: {\n    getlanguage (state: istate): any {\n      const storestr = localstore.getitem('lang')\n      if (storestr !== null && storestr) {\n        return storestr\n      }\n      return state.language\n    }\n  }\n}\n\nexport default language\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\nindex.ts 文件代码如下：\n\nimport { createstore } from 'vuex'\nimport language from './modules/changelanguage'\n\nexport default createstore({\n  state: {\n  },\n  mutations: {\n  },\n  actions: {\n  },\n  modules: {\n    language\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n然后在项目 src 文件夹下的 main.ts 中代码修改如下：\n\nimport { createapp } from 'vue'\nimport app from './app.vue'\nimport router from './router'\nimport store from './store'\nimport './networking/index'\nimport i18n from './locales/index'\n\ncreateapp(app).use(store).use(router).use(i18n).mount('#app')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这样在其他地方就可以使用多语言。例如新建 language.vue 文件，代码如下：\n\n<template>\n  <div class=\"wrapper\">\n    多语言\n    <p>标题：{{$t('home.title')}}</p>\n    <p>姓名：{{$t('home.name')}}</p>\n    <p>年龄：{{$t('home.age')}}</p>\n    <p>当前语言：{{locales}}</p>\n    <button @click=\"changelanguage\">按钮</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref } from 'vue'\n  import { usestore } from 'vuex'\n  import { usei18n } from 'vue-i18n'\n  const store = usestore()\n  const locales = ref(store.getters.getlanguage)\n  const t = usei18n()\n\n  function changelanguage () {\n    locales.value = locales.value === 'zh-cn' ? 'en-us' : 'zh-cn'\n    t.locale.value = locales.value\n    store.dispatch('changelanguage', { language: locales.value })\n  }\n\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n如果项目中引入了 vant 组件库，也需要做国际化处理，那么上面的 index.ts 文件则修改如下：\n\n// vue-i18n所需要引入的\nimport { createi18n } from 'vue-i18n'\n// 本地的文件夹\nimport enlocale from './en_us'\nimport zhlocale from './zh_cn'\n// vant所需要引入的\nimport { locale } from 'vant'\n//vant中的文件夹  需要的语言和本地的语言保持一致\nimport enus from 'vant/lib/locale/lang/en-us'\nimport zhcn from 'vant/lib/locale/lang/zh-cn'\n\nconst messages = {\n  en: {\n    ...enus,\n    ...enlocale\n  },\n  zh: {\n    ...zhcn,\n    ...zhlocale\n  }\n}\n// 更新vant组件库本身的语言变化，支持国际化\nfunction vantlocales(lang: any) {\n  if (lang === 'en') {\n    locale.use(lang, enus)\n  } else if (lang === 'zh') {\n    locale.use(lang, zhcn)\n  }\n}\n// 获取浏览器的语言\nconst lang = (navigator.language || 'en').tolocalelowercase()\nconst language = localstorage.getitem('language') || lang.split('-')[0] || 'zh'\nlocalstorage.setitem('language', language)\nconst i18n = createi18n({\n  //not available in legacy mode 解决报错问题的配置项！！！\n  legacy: false,\n  // 全局注册 $t方法\n  globalinjection: true,\n  //设置初始化语言\n  locale: language,\n  // 设置备用语言\n  fallbacklocale: 'en',\n  messages\n})\nexport { i18n, vantlocales }\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n此时，main.ts 中修改如下：\n\n//引入上面配置好的语言文件\nimport { i18n, vantlocales } from './lang'\n//对vant组件进行初始化语言设置\nvantlocales(i18n.global.locale)\n\napp.use(i18n)\n\n\n1\n2\n3\n4\n5\n6\n",charsets:{cjk:!0}},{title:"项目国际化",frontmatter:{title:"项目国际化",date:"2022-03-23T11:02:07.000Z",permalink:"/pages/10d64c/",categories:["Vue2"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/01.Vue2/01.%E9%A1%B9%E7%9B%AE%E5%9B%BD%E9%99%85%E5%8C%96.html",relativePath:"《Vue》笔记/01.Vue2/01.项目国际化.md",key:"v-232e62ea",path:"/pages/10d64c/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'安装 vue-i18n\n\nnpm install vue-i18n\n\n\n1\n\n\n建立如下结构的文件：\n\n\n\nen-us.js 和 zh-cn.js 分别用于存放英文语言包内容和中文语言包内容。\n\nindex.js 文件代码如下：\n\nimport vue from "vue";\nimport vueI18n from "vue-i18n";\nimport enUs from "./lang/en-us";\nimport zhCn from "./lang/zh-cn";\nimport store from "../store/index";\nconst language = store.getters.getLanguage;\n\nvue.use(vueI18n);\n\nconst i18n = new vueI18n({\n  locale: language,\n  messages: {\n    "en-us": enUs,\n    "zh-cn": zhCn,\n  },\n});\n\nexport default i18n;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nen-us.js 代码如下：\n\nexport default {\n  home: {\n    title: "TITLE",\n    name: "NAME",\n    age: "AGE",\n  },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nzh-cn.js 代码如下：\n\nexport default {\n  home: {\n    title: "标题",\n    name: "姓名",\n    age: "年龄",\n  },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nvuex 部分文件结构如下：\n\n\n\nchangeLanguage.js 代码如下：\n\nimport localstore from "@/utils/localstore_polyfill.js";\n\nconst language = {\n  state: {\n    language: "en-us",\n  },\n  mutations: {\n    setLanguage(state, payload) {\n      state.language = payload.language;\n    },\n  },\n  actions: {\n    changeLanguage(context, payload) {\n      localstore.setItem("lang", payload.language);\n      context.commit("setLanguage", payload);\n    },\n  },\n  getters: {\n    getLanguage(state) {\n      const storeStr = localstore.getItem("lang");\n      if (storeStr !== null && storeStr) {\n        return storeStr;\n      }\n      return state.language;\n    },\n  },\n};\n\nexport default language;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\nstore 文件夹下 index.js 代码如下：\n\nimport Vue from "vue";\nimport Vuex from "vuex";\nimport language from "./modules/changeLanguage";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {},\n  mutations: {},\n  actions: {},\n  modules: {\n    language,\n  },\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nmain.js 文件代码更改后如下：\n\nimport Vue from "vue";\nimport App from "./App.vue";\nimport router from "./router";\nimport store from "./store";\nimport i18n from "./locales/index.js";\n\nVue.config.productionTip = false;\n\nnew Vue({\n  router,\n  i18n,\n  store,\n  render: (h) => h(App),\n}).$mount("#app");\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n现在在项目中就可以这样使用了，如 language.vue 组件中使用如下：\n\n<template>\n  <div class="wrapper">\n    多语言\n    <p>标题：{{ $t("home.title") }}</p>\n    <p>姓名：{{ $t("home.name") }}</p>\n    <p>年龄：{{ $t("home.age") }}</p>\n    <select name="" id="" v-model="locales" @change="getSelect">\n      <option value="" disabled>请选择</option>\n      <option>en-us</option>\n      <option>zh-cn</option>\n    </select>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from "vuex";\nexport default {\n  computed: {\n    ...mapGetters(["getLanguage"]),\n  },\n  data() {\n    return {\n      locales: this.getLanguage,\n    };\n  },\n  mounted() {},\n  methods: {\n    ...mapActions({\n      \'language\': \'changeLanguage\'\n    }),\n    getSelect () {\n      this.$i18n.locale = this.locales;\n      this.language({ language: this.locales });\n    }\n  },\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n如果想在路由配置文件中使用，则可以这样，如：\n\nimport i18n from "@/locales"\ni18n.t("home.name");\n\n\n1\n2\n\n\n如果搭配 Vant 使用，则上述 index.js 文件代码更改如下：\n\nimport vue from "vue";\nimport vueI18n from "vue-i18n";\n// 引入自定义语言包\nimport enUs from "./lang/en-us";\nimport zhCn from "./lang/zh-cn";\n\nimport { Locale } from \'vant\';\n// 引入vant英文语言包\nimport vantEnUS from \'vant/es/locale/lang/en-US\';\n// 引入vant中文语言包\nimport vantZhCN from "vant/es/locale/lang/zh-CN";\nimport store from "../store/index";\nconst language = store.getters.getLanguage;\n\nvue.use(vueI18n);\n\nconst messages = {\n  "en-US": {\n    ...enUs,\n    ...vantEnUS\n  },\n  "zh-CN": {\n    ...zhCn,\n    ...vantZhCN\n  },\n}\n\nexport const getLocale = () => {\n  const currentLanguage = language;\n  if (currentLanguage) {\n    document.documentElement.lang = currentLanguage;\n    return currentLanguage;\n  }\n\n  // Default language is english\n  return "en-US";\n};\n\nconst CURRENT_LANG = getLocale();\n// first entry\nLocale.use(CURRENT_LANG, messages[CURRENT_LANG])\n\nconst i18n = new vueI18n({\n  locale: CURRENT_LANG,\n  messages\n});\n\nexport default i18n;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n',normalizedContent:'安装 vue-i18n\n\nnpm install vue-i18n\n\n\n1\n\n\n建立如下结构的文件：\n\n\n\nen-us.js 和 zh-cn.js 分别用于存放英文语言包内容和中文语言包内容。\n\nindex.js 文件代码如下：\n\nimport vue from "vue";\nimport vuei18n from "vue-i18n";\nimport enus from "./lang/en-us";\nimport zhcn from "./lang/zh-cn";\nimport store from "../store/index";\nconst language = store.getters.getlanguage;\n\nvue.use(vuei18n);\n\nconst i18n = new vuei18n({\n  locale: language,\n  messages: {\n    "en-us": enus,\n    "zh-cn": zhcn,\n  },\n});\n\nexport default i18n;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\nen-us.js 代码如下：\n\nexport default {\n  home: {\n    title: "title",\n    name: "name",\n    age: "age",\n  },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nzh-cn.js 代码如下：\n\nexport default {\n  home: {\n    title: "标题",\n    name: "姓名",\n    age: "年龄",\n  },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nvuex 部分文件结构如下：\n\n\n\nchangelanguage.js 代码如下：\n\nimport localstore from "@/utils/localstore_polyfill.js";\n\nconst language = {\n  state: {\n    language: "en-us",\n  },\n  mutations: {\n    setlanguage(state, payload) {\n      state.language = payload.language;\n    },\n  },\n  actions: {\n    changelanguage(context, payload) {\n      localstore.setitem("lang", payload.language);\n      context.commit("setlanguage", payload);\n    },\n  },\n  getters: {\n    getlanguage(state) {\n      const storestr = localstore.getitem("lang");\n      if (storestr !== null && storestr) {\n        return storestr;\n      }\n      return state.language;\n    },\n  },\n};\n\nexport default language;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\nstore 文件夹下 index.js 代码如下：\n\nimport vue from "vue";\nimport vuex from "vuex";\nimport language from "./modules/changelanguage";\n\nvue.use(vuex);\n\nexport default new vuex.store({\n  state: {},\n  mutations: {},\n  actions: {},\n  modules: {\n    language,\n  },\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nmain.js 文件代码更改后如下：\n\nimport vue from "vue";\nimport app from "./app.vue";\nimport router from "./router";\nimport store from "./store";\nimport i18n from "./locales/index.js";\n\nvue.config.productiontip = false;\n\nnew vue({\n  router,\n  i18n,\n  store,\n  render: (h) => h(app),\n}).$mount("#app");\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n现在在项目中就可以这样使用了，如 language.vue 组件中使用如下：\n\n<template>\n  <div class="wrapper">\n    多语言\n    <p>标题：{{ $t("home.title") }}</p>\n    <p>姓名：{{ $t("home.name") }}</p>\n    <p>年龄：{{ $t("home.age") }}</p>\n    <select name="" id="" v-model="locales" @change="getselect">\n      <option value="" disabled>请选择</option>\n      <option>en-us</option>\n      <option>zh-cn</option>\n    </select>\n  </div>\n</template>\n\n<script>\nimport { mapgetters, mapactions } from "vuex";\nexport default {\n  computed: {\n    ...mapgetters(["getlanguage"]),\n  },\n  data() {\n    return {\n      locales: this.getlanguage,\n    };\n  },\n  mounted() {},\n  methods: {\n    ...mapactions({\n      \'language\': \'changelanguage\'\n    }),\n    getselect () {\n      this.$i18n.locale = this.locales;\n      this.language({ language: this.locales });\n    }\n  },\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n如果想在路由配置文件中使用，则可以这样，如：\n\nimport i18n from "@/locales"\ni18n.t("home.name");\n\n\n1\n2\n\n\n如果搭配 vant 使用，则上述 index.js 文件代码更改如下：\n\nimport vue from "vue";\nimport vuei18n from "vue-i18n";\n// 引入自定义语言包\nimport enus from "./lang/en-us";\nimport zhcn from "./lang/zh-cn";\n\nimport { locale } from \'vant\';\n// 引入vant英文语言包\nimport vantenus from \'vant/es/locale/lang/en-us\';\n// 引入vant中文语言包\nimport vantzhcn from "vant/es/locale/lang/zh-cn";\nimport store from "../store/index";\nconst language = store.getters.getlanguage;\n\nvue.use(vuei18n);\n\nconst messages = {\n  "en-us": {\n    ...enus,\n    ...vantenus\n  },\n  "zh-cn": {\n    ...zhcn,\n    ...vantzhcn\n  },\n}\n\nexport const getlocale = () => {\n  const currentlanguage = language;\n  if (currentlanguage) {\n    document.documentelement.lang = currentlanguage;\n    return currentlanguage;\n  }\n\n  // default language is english\n  return "en-us";\n};\n\nconst current_lang = getlocale();\n// first entry\nlocale.use(current_lang, messages[current_lang])\n\nconst i18n = new vuei18n({\n  locale: current_lang,\n  messages\n});\n\nexport default i18n;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n',charsets:{cjk:!0}},{title:"element ui之图片预览",frontmatter:{title:"element ui之图片预览",date:"2022-11-21T10:31:20.000Z",permalink:"/pages/679367/",categories:["Vue2"],tags:[null]},regularPath:"/%E3%80%8AVue%E3%80%8B%E7%AC%94%E8%AE%B0/01.Vue2/02.element%20ui%E4%B9%8B%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88.html",relativePath:"《Vue》笔记/01.Vue2/02.element ui之图片预览.md",key:"v-0e4cbbff",path:"/pages/679367/",lastUpdated:"7/1/2024, 4:56:33 PM",lastUpdatedTimestamp:1719824193e3,headersStr:null,content:'在后台管理中经常会遇到图片预览的需求，这不，来了个新需求，点击按钮，然后图片放大预览。\n\n不想自己写，网上找了半天也没找到，图片预览组件倒是有一大堆，不过都是图片本身，然后点击出现预览效果，没有那种可以点击任何元素，然后出现图片预览的\n\n没办法，需求下来了，还是得做，用了这么久的 element ui，没发现，原来 element ui 还可以这样用，官方文档上死活找不到，但是他组件库里其实是有这组件的。图片预览组件 el-image-viewer\n\n具体用法是这样的：\n\n1。引入 el-image-viewer 组件\n\nimport ElImageViewer from \'element-ui/packages/image/src/image-viewer\'\n\ncompotents: {\n\tElImageViewer\n}\n\n\n1\n2\n3\n4\n5\n\n\n2、组件中使用如下：\n\n<el-button type="text" @click="onPreview()">图片预览</el-button>\n<el-image-viewer \n\tv-if="showViewer" \n\t:on-close="closeViewer" \n\t:url-list="[previewUrl]" />\n\n\n1\n2\n3\n4\n5\n\n\n3、具体实现：\n\ndata () {\n\treturn {\n\t\tshowViewer: false,\n\t\tpreviewUrl: \'\'\n\t}\n},\nmethods: {\n\tcloseViewer () {\n\t\tthis.showViewer = false\n\t},\n\tonPreview (url) {\n\t\tthis.previewUrl = url\n\t\tthis.showViewer = true\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n看了下源码，发现功能还是蛮丰富的，可以传初始索引 initialIndex 字段，即图片预览时默认展示第几张图，可传层级 zIndex 字段，如果 url-list 属性的值，数组中有多张图，则会出现左右切换按钮等等，当然了，图片放大、缩小、旋转这些基本功能也都是有的。',normalizedContent:'在后台管理中经常会遇到图片预览的需求，这不，来了个新需求，点击按钮，然后图片放大预览。\n\n不想自己写，网上找了半天也没找到，图片预览组件倒是有一大堆，不过都是图片本身，然后点击出现预览效果，没有那种可以点击任何元素，然后出现图片预览的\n\n没办法，需求下来了，还是得做，用了这么久的 element ui，没发现，原来 element ui 还可以这样用，官方文档上死活找不到，但是他组件库里其实是有这组件的。图片预览组件 el-image-viewer\n\n具体用法是这样的：\n\n1。引入 el-image-viewer 组件\n\nimport elimageviewer from \'element-ui/packages/image/src/image-viewer\'\n\ncompotents: {\n\telimageviewer\n}\n\n\n1\n2\n3\n4\n5\n\n\n2、组件中使用如下：\n\n<el-button type="text" @click="onpreview()">图片预览</el-button>\n<el-image-viewer \n\tv-if="showviewer" \n\t:on-close="closeviewer" \n\t:url-list="[previewurl]" />\n\n\n1\n2\n3\n4\n5\n\n\n3、具体实现：\n\ndata () {\n\treturn {\n\t\tshowviewer: false,\n\t\tpreviewurl: \'\'\n\t}\n},\nmethods: {\n\tcloseviewer () {\n\t\tthis.showviewer = false\n\t},\n\tonpreview (url) {\n\t\tthis.previewurl = url\n\t\tthis.showviewer = true\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n看了下源码，发现功能还是蛮丰富的，可以传初始索引 initialindex 字段，即图片预览时默认展示第几张图，可传层级 zindex 字段，如果 url-list 属性的值，数组中有多张图，则会出现左右切换按钮等等，当然了，图片放大、缩小、旋转这些基本功能也都是有的。',charsets:{cjk:!0}}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"前端",link:"/web/",items:[{text:"",items:[{text:"《Vue》笔记",link:"/note/vue/"},{text:"《React》笔记",link:"/note/react/"},{text:"《NodeJs》笔记",link:"/note/node/"},{text:"《CSS》笔记",link:"/note/css/"},{text:"《Redis》笔记",link:"/note/redis/"}]}]},{text:"HarmonyOS相关",link:"/harmony/",items:[{text:"",items:[{text:"基础入门",link:"/harmony/base/"}]}]},{text:"随笔",link:"/random/",items:[{text:"",items:[{text:"《Mock》笔记",link:"/random/mock/"},{text:"《MySQL》笔记",link:"/random/mysql/"},{text:"《Git》相关",link:"/random/git/"}]}]},{text:"影音视听",link:"/movie/"},{text:"收藏",link:"/collect/website/"},{text:"关于",link:"/pages/5699bd/"}],sidebarDepth:3,logo:"/assets/img/avatar.jpeg",repo:"https://github.com/leiwuhen-67/my-blog",searchMaxSuggestions:10,lastUpdated:"上次更新",docsDir:"docs",editLinks:!0,editLinkText:"编辑",category:!0,tag:!0,archive:!0,sidebarOpen:!0,sidebar:{"/00.目录页/":[["01.前端.md","前端","/web"],["02.随笔.md","随性之笔","/random"],["03.影音.md","影音视听","/movie"],["04.收藏.md","网站收藏","/collect/website"],["05.HarmonyOS.md","HarmonyOS相关","/harmony"]],catalogue:{"前端":"/web","随笔":"/random",HarmonyOS:"/harmony","《Vue》笔记":"/note/vue/","《React》笔记":"/note/react/","《NodeJs》笔记":"/note/node/","《CSS》笔记":"/note/css/","《Redis》笔记":"/note/redis/","Mock使用":"/random/mock/",MySQL:"/random/mysql/","Git相关":"/random/git/","基础入门":"/harmony/base/"},"/01.前端/":[{title:"学习笔记",collapsable:!0,children:[["00.学习笔记/01.《Vue》笔记.md","《Vue》笔记","/note/vue/"],["00.学习笔记/02.《React》笔记.md","《React》笔记","/note/react/"],["00.学习笔记/03.《NodeJs》笔记.md","《NodeJs》笔记","/note/node/"],["00.学习笔记/04.《CSS》笔记.md","《CSS》笔记","/note/css/"],["00.学习笔记/05.《Redis》笔记.md","《Redis》笔记","/note/redis/"]]}],"/02.随笔/":[{title:"随性之笔",collapsable:!0,children:[["00.随性之笔/01.Mock使用.md","《Mock》","/random/mock/"],["00.随性之笔/02.MySQL.md","《MySQL》","/random/mysql/"],["00.随性之笔/03.Git相关.md","《Git相关》","/random/git/"],["00.随性之笔/05.在TypeScript中,import type和import的区别.md","在TypeScript中,import type和import的区别","/pages/a7d3bf/"],["00.随性之笔/06.vscode之代码跳转到定义(vue文件和js文件).md","vscode之代码跳转到定义(vue文件和js文件)","/pages/245711/"],["00.随性之笔/07.vscode之vue项目中实现@路径提示.md","vscode之vue项目中实现@路径提示","/pages/12eb8f/"],["00.随性之笔/08.使用vite构建js库并发布到npm.md","使用vite构建js库并发布到npm","/pages/b1603a/"],["00.随性之笔/09.vite构建js库兼容传统浏览器.md","vite构建js库兼容传统浏览器","/pages/15c17d/"]]}],"/03.HarmonyOS相关/":[{title:"基础入门",collapsable:!0,children:[["01.基础入门/01.基础入门.md","HarmonyOS之基础入门","/harmony/base/"]]}],"/04.about/":[["01.about.md","关于","/pages/5699bd/"]],"/Git/":[{title:"Git相关",collapsable:!0,children:[["01.Git相关/01.本地仓库关联远程仓库，拉取代码及提交.md","本地仓库关联远程仓库，拉取代码及提交","/pages/60613a/"]]}],"/HarmonyOS/":[{title:"基础入门",collapsable:!0,children:[["01.基础入门/01.项目简介.md","项目简介","/pages/65340b/"],["01.基础入门/02.ArkTS基础之自定义组件.md","ArkTS基础之自定义组件","/pages/6085ec/"],["01.基础入门/03.ArkTS基础之页面与自定义组件生命周期.md","ArkTS基础之页面与自定义组件生命周期","/pages/b80833/"],["01.基础入门/04.Column&Row组件的使用.md","Column&Row组件的使用","/pages/add86b/"],["01.基础入门/05.ohpm安装及配置.md","ohpm安装及配置","/pages/6b9001/"]]}],"/Mock/":[{title:"mock",collapsable:!0,children:[["01.mock/02.Mock的基本使用及拦截axios请求.md","Mock的基本使用及拦截axios请求","/pages/2403dc/"]]}],"/MySQL/":[{title:"MySQL",collapsable:!0,children:[["01.MySQL/01.Mac上安装MySQL以及MySQL基本操作.md","Mac上安装MySQL以及MySQL基本操作","/pages/dba329/"],["01.MySQL/02.DBeaver导出sql.md","DBeaver导出sql","/pages/f179f3/"],["01.MySQL/03.本地数据库导出然后上传到服务器，并访问服务器数据库.md","本地数据库上传到服务器，并访问服务器数据库","/pages/beb076/"]]}],"/《CSS》笔记/":[{title:"Less",collapsable:!0,children:[["01.Less/01.Less基本用法.md","Less基本用法","/pages/dcaaea/"]]},{title:"CSS",collapsable:!0,children:[["02.CSS/01.自定义复选框checkbox样式.md","自定义复选框checkbox样式","/pages/6ee7ee/"],["02.CSS/02.switch效果实现.md","switch效果实现","/pages/7a2ad5/"],["02.CSS/03.甜甜圈加载效果.md","甜甜圈加载效果","/pages/20cc42/"]]},{title:"瀑布流布局",collapsable:!0,children:[["03.瀑布流布局/01.瀑布流布局.md","瀑布流布局","/pages/50dc5b/"]]}],"/《NodeJs》笔记/":[{title:"Express",collapsable:!0,children:[["01.Express/01.使用Express搭建服务器.md","使用Express搭建服务器","/pages/2dd5ad/"],["01.Express/02.Express连接数据库MySQL.md","Express连接数据库MySQL","/pages/dfd853/"],["01.Express/03.Express之get请求与post请求.md","Express之get请求与post请求","/pages/a2dc8a/"],["01.Express/04.Node多环境配置(开发环境、生产环境).md","Node多环境配置(开发环境、生产环境)","/pages/79f61e/"]]},{title:"Koa",collapsable:!0,children:[["02.Koa/01.koa应用搭建与路由配置.md","koa应用搭建与路由配置","/pages/ccb7df/"],["02.Koa/02.koa连接数据库.md","koa连接数据库","/pages/eb12e5/"],["02.Koa/03.用户认证之jsonwebtoken.md","用户认证之jsonwebtoken","/pages/0de10f/"]]},{title:"Egg",collapsable:!0,children:[["03.Egg/01.使用脚手架快速初始化Egg项目.md","使用脚手架快速初始化Egg项目","/pages/ec6b29/"],["03.Egg/02.Egg之实现接口API并连接mysql数据库.md","实现接口API并连接mysql数据库","/pages/d9909a/"],["03.Egg/03.Egg之数据库的基本操作，增、删、改、查.md","数据库的基本操作，增、删、改、查","/pages/1d8e0d/"],["03.Egg/04.egg-jwt登录鉴权.md","egg-jwt登录鉴权","/pages/2bef2d/"],["03.Egg/05.上传图片到项目指定文件夹下.md","上传图片到项目指定文件夹下","/pages/858357/"],["03.Egg/06.上传图片到七牛云.md","上传图片到七牛云","/pages/c045b4/"],["03.Egg/07.使用ApiDoc生成接口文档.md","使用ApiDoc生成接口文档","/pages/40bfee/"]]},{title:"Node相关",collapsable:!0,children:[["04.Node相关/01.npm、nvm、nrm相关知识.md","npm、nvm、nrm相关知识","/pages/1f73d1/"],["04.Node相关/02.Node升级后，项目运行或打包报错.md","Node升级后，项目运行或打包报错","/pages/157510/"]]}],"/《React》笔记/":[{title:"React",collapsable:!0,children:[["01.React/01.create-react-app.md","使用React脚手架快速搭建项目","/pages/2be28a/"],["01.React/02.hook-useEffect.md","hooks之useEffect","/pages/a6152f/"],["01.React/03.React之事件绑定及简写方式.md","React之事件绑定及简写方式","/pages/517c91/"],["01.React/04.React之props传值并对其进行限制.md","React之props传值并对其进行限制","/pages/ca05b9/"],["01.React/05.React之Refs的基本使用.md","React之Refs的基本使用","/pages/d89cab/"],["01.React/06.React之生命周期钩子.md","React之生命周期钩子","/pages/81ee3b/"],["01.React/07.React之key的使用.md","React之key的使用","/pages/a9fc09/"],["01.React/08.React之代理服务器配置.md","React之代理服务器配置","/pages/c59606/"],["01.React/09.React之封装全局Loading组件.md","React之封装全局Loading组件","/pages/266ff7/"],["01.React/10.React之消息的发布-订阅(pubsub-js).md","React之消息的发布-订阅(pubsub-js)","/pages/dcc0fa/"],["01.React/11.React之Redux的基本使用.md","React之Redux的基本使用","/pages/707c70/"],["01.React/12.React之react-redux的基本使用.md","React之react-redux的基本使用","/pages/82cb44/"],["01.React/13.React之redux的数据持久化存储.md","React之redux的数据持久化存储","/pages/424f92/"],["01.React/14.React之路由懒加载.md","React之路由懒加载","/pages/13dc2b/"],["01.React/15.React之Render Props的使用.md","React之Render Props的使用","/pages/e3496f/"],["01.React/16.React之createBrowserRouter.md","React之createBrowserRouter","/pages/a729d6/"],["01.React/17.React之路径别名@配置.md","React之路径别名@配置","/pages/c4a432/"],["01.React/18.React之craco打包优化配置.md","React之craco打包优化配置","/pages/9c12e8/"],["01.React/19.React之项目国际化.md","React之项目国际化","/pages/dd9ea5/"],["01.React/20.React之postcss-pxtorem移动端适配.md","React之postcss-pxtorem移动端适配","/pages/2e5144/"],["01.React/21.React之使用vite创建项目.md","React之使用vite创建项目","/pages/a51345/"],["01.React/22.React之ts类型标注汇总.md","React之ts类型标注汇总","/pages/255759/"],["01.React/23.React之使用 ant design搭建后台管理.md","React之使用 ant design搭建后台管理之踩坑","/pages/982518/"],["01.React/24.React之路由切换动画.md","React之路由切换动画","/pages/7e1b82/"],["01.React/25.React之使用vite创建组件库并发布到npm.md","React之使用vite创建组件库并发布到npm","/pages/918a62/"],["01.React/26.React之项目打包部署到nginx.md","React之项目打包部署到nginx","/pages/127ba0/"],["01.React/27.React之自定义组件添加className与style.md","React之自定义组件添加className与style","/pages/9266a7/"]]},{title:"React Native",collapsable:!0,children:[["02.React Native/01.React Native之打包安卓apk优化.md","React Native之打包安卓apk优化","/pages/1d91bb/"],["02.React Native/02.React Native之安卓apk架构区别解析.md","React Native之安卓apk架构区别解析","/pages/643cae/"],["02.React Native/03.React Native之打包安卓修改Apk文件名.md","React Native之打包安卓修改Apk文件名","/pages/3ca574/"],["02.React Native/04.React Native之项目创建以及路由配置.md","React Native之项目创建以及路由配置","/pages/3210df/"],["02.React Native/05.React Native之h5唤起APP配置.md","React Native之h5唤起APP配置","/pages/6f6b6c/"],["02.React Native/06.React Native之保存图片到相册.md","React Native之安卓应用保存图片到相册","/pages/1b0979/"],["02.React Native/07.React Native之路径别名配置.md","React Native之路径别名配置","/pages/2ddb27/"]]}],"/《Redis》笔记/":[{title:"Redis",collapsable:!0,children:[["01.Redis/01.Redis安装与基本使用.md","Redis安装与基本使用","/pages/c63b43/"],["01.Redis/02.Redis 字符串(String).md","Redis 字符串(String)","/pages/b3075a/"],["01.Redis/03.Express+Redis使用.md","Express+Redis使用","/pages/8080fa/"],["01.Redis/04.Redis key命令.md","Redis key命令","/pages/fcc805/"],["01.Redis/05.Redis与MySQL的区别以及搭配使用.md","Redis与MySQL的区别以及搭配使用","/pages/6b2dfb/"],["01.Redis/06.Redis 哈希(hash).md","Redis 哈希(hash)","/pages/e7f710/"]]}],"/《Vue》笔记/":[{title:"Vue2",collapsable:!0,children:[["01.Vue2/01.项目国际化.md","项目国际化","/pages/10d64c/"],["01.Vue2/02.element ui之图片预览.md","element ui之图片预览","/pages/679367/"],["01.Vue2/03.element ui之图片上传到阿里云oss上.md","element ui之图片上传到阿里云oss上","/pages/3a53e1/"],["01.Vue2/04.element ui之表格拖拽排序.md","element ui之表格拖拽排序","/pages/109b92/"],["01.Vue2/05.vue动态添加路由后刷新页面白屏问题.md","vue动态添加路由后刷新页面白屏问题","/pages/289945/"],["01.Vue2/06.vue安装依赖报错.md","vue项目安装依赖报错","/pages/2e5ed7/"],["01.Vue2/07.vue项目使用postcss-pxtorem来实现移动端适配.md","vue项目使用postcss-pxtorem来实现移动端适配","/pages/1cca7c/"],["01.Vue2/08.vue之低版本浏览器兼容.md","vue之低版本浏览器兼容","/pages/d607c0/"],["01.Vue2/09.eslint报错汇总.md","eslint报错汇总","/pages/040685/"]]},{title:"Vue3",collapsable:!0,children:[["02.Vue3/01.navigation-guard.md","组件内导航守卫","/pages/0856ce/"],["02.Vue3/02.vue3setup函数与语法糖对比.md","vue3.0与vue3.2对比","/pages/0856be/"],["02.Vue3/03.状态管理Pinia.md","状态管理Pinia","/pages/c18c83/"],["02.Vue3/04.项目国际化.md","项目国际化vue-i18n","/pages/2c51f3/"],["02.Vue3/05.使用vite搭建vue3+TS项目及基础配置.md","使用vite搭建vue3+TS项目及基础配置","/pages/273d1e/"],["02.Vue3/06.使用vue-cli脚手架搭建vue3项目踩坑.md","使用vue-cli脚手架搭建vue3项目踩坑","/pages/64779d/"],["02.Vue3/07.vue3之使用vite搭建组件库.md","vue3之使用vite搭建组件库","/pages/7009d7/"]]}]},updateBar:{showToArticle:!1,moreArticle:"/archives"},author:{name:"心欲无痕",link:""},blogger:{avatar:"/assets/img/avatar.jpeg",slogan:""}}};var pl=t(95),ul=t(96),dl=t(11);var ml={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:r}}=n;return!(e||!1===t||!0===r)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(dl.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(dl.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(dl.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let r=0,a=n.length;r<a;r++){const{frontmatter:{categories:a,tags:o}}=n[r];"array"===Object(dl.n)(a)&&a.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[r]))}),"array"===Object(dl.n)(o)&&o.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[r]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Jt.component(pl.default),Jt.component(ul.default);function fl(n){return n.toString().padStart(2,"0")}t(245);Jt.component("Badge",()=>Promise.all([t.e(0),t.e(6)]).then(t.bind(null,381))),Jt.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,95))),Jt.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,96)));t(246);var hl=t(94),gl=t.n(hl),vl=t(24);let bl,yl;var xl;"valine"===(xl="gitalk")?t.e(151).then(t.t.bind(null,373,7)).then(n=>yl=n.default):"gitalk"===xl&&Promise.all([t.e(0),t.e(150)]).then(t.t.bind(null,374,7)).then(()=>t.e(149).then(t.t.bind(null,375,7))).then(n=>bl=n.default);function kl(n,e){const t={};return Reflect.ownKeys(n).forEach(r=>{if("string"==typeof n[r])try{t[r]=gl.a.render(n[r],e)}catch(e){console.warn(`Comment config option error at key named "${r}"`),console.warn("More info: "+e.message),t[r]=n[r]}else t[r]=n[r]}),t}console.log(`How to use "gitalk" in ${vl.name}@v${vl.version}:`,vl.homepage);const El={gitalk:{render(n,e){const t=document.createElement("div");t.id=e;document.querySelector("main.page").appendChild(t);new bl(kl({clientID:"c0968b8f34a4decd2cd9",clientSecret:"1f1af0bb760d85f86b33f27dcebd77d8757fd37f",repo:"blogComments",owner:"leiwuhen-67",admin:["leiwuhen-67"],pagerDirection:"last",id:"<%- (frontmatter.permalink || frontmatter.to.path).slice(-16) %>",title:"「评论」<%- frontmatter.title %>",labels:["Gitalk","Comment"],body:"页面：<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>"},{frontmatter:n})).render(e)},clear(n){const e=document.querySelector("#"+n);return e&&e.remove(),!0}},valine:{render(n,e){const t=document.createElement("div");t.id=e;document.querySelector("main.page").appendChild(t),new yl({...kl({clientID:"c0968b8f34a4decd2cd9",clientSecret:"1f1af0bb760d85f86b33f27dcebd77d8757fd37f",repo:"blogComments",owner:"leiwuhen-67",admin:["leiwuhen-67"],pagerDirection:"last",id:"<%- (frontmatter.permalink || frontmatter.to.path).slice(-16) %>",title:"「评论」<%- frontmatter.title %>",labels:["Gitalk","Comment"],body:"页面：<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>"},{frontmatter:n}),el:"#"+e})},clear(n){const e=document.querySelector("#"+n);return e&&e.remove(),!0}}},wl="vuepress-plugin-comment";let _l=null;function jl(n){return El.gitalk.clear(wl)}function Al(n){return!1!==n.comment&&!1!==n.comments}function Rl(n){clearTimeout(_l);if(document.querySelector("main.page"))return El.gitalk.render(n,wl);_l=setTimeout(()=>Rl(n),200)}var Sl={mounted(){_l=setTimeout(()=>{const n={to:{},from:{},...this.$frontmatter};jl()&&Al(n)&&Rl(n)},1e3),this.$router.afterEach((n,e)=>{if(n&&e&&n.path===e.path)return;const t={to:n,from:e,...this.$frontmatter};jl()&&Al(t)&&Rl(t)})}},Cl=Object(sl.a)(Sl,(function(){return(0,this._self._c)("div")}),[],!1,null,null,null).exports,Pl=[({Vue:n,options:e,router:t,siteData:r})=>{r.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${fl(n.getUTCMonth()+1)}-${fl(n.getUTCDate())} ${fl(n.getUTCHours())}:${fl(n.getUTCMinutes())}:${fl(n.getUTCSeconds())}`}(e)),t?n.author=t:r.themeConfig.author&&(n.author=r.themeConfig.author)}),n.mixin(ml)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({Vue:n})=>{n.component("Comment",Cl)}],Tl=["Comment"];class Bl extends class{constructor(){this.store=new Jt({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Jt.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(Bl.prototype,{getPageAsyncComponent:ii,getLayoutAsyncComponent:li,getAsyncComponent:ci,getVueComponent:pi});var ql={install(n){const e=new Bl;n.$vuepress=e,n.prototype.$vuepress=e}};function Il(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var Ll={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return di("pageKey",e),Jt.component(e)||Jt.component(e,ii(e)),Jt.component(e)?n(e):n("")}},zl={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},Nl={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Ol=(t(251),t(252),Object(sl.a)(Nl,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Ml={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Jt.config.productionTip=!1,Jt.use(Hs),Jt.use(ql),Jt.mixin(function(n,e,t=Jt){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const r=new(n(t.$vuepress.$get("siteData"))),a=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(r)),o={};return Object.keys(a).reduce((n,e)=>(e.startsWith("$")&&(n[e]=a[e].get),n),o),{computed:o}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const r in n)"/"===r?t=n[r]:0===this.$page.path.indexOf(r)&&(e=n[r]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},cl)),Jt.component("Content",Ll),Jt.component("ContentSlotsDistributor",zl),Jt.component("OutboundLink",Ol),Jt.component("ClientOnly",Ml),Jt.component("Layout",li("Layout")),Jt.component("NotFound",li("NotFound")),Jt.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.10",hash:"9a2ac46"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:cl.routerBase||cl.base,t=new Hs({base:e,mode:"history",fallback:!1,routes:ll,scrollBehavior:(n,e,t)=>t||(n.hash?!Jt.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,r)=>{if(Il(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";Il(n,t)?r(t):r()}else r();else{const t=e.path+"/",a=e.path+".html";Il(n,a)?r(a):Il(n,t)?r(t):r()}})}(t);const r={};try{await Promise.all(Pl.filter(n=>"function"==typeof n).map(e=>e({Vue:Jt,options:r,router:t,siteData:cl,isServer:n})))}catch(n){console.error(n)}return{app:new Jt(Object.assign(r,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},Tl.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);